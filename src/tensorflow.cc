/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x031110
#endif


#include <node.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) do { SWIGV8_ErrorHandler.error(code, msg); SWIG_fail; } while (0)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#else
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#endif
};

SWIGRUNTIME v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

}

SWIGRUNTIME int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();
  
  v8::Handle<v8::FunctionTemplate> class_templ;

  if (ptr == NULL) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif
  }

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals (should be 1)");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  if(objRef->InternalFieldCount() < 1) return false;
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
  return (flag->IsBoolean() && flag->BooleanValue());
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = valRef->ToObject();

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#else
  object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else  
  v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif
  arr->Set(arr->Length(), obj);

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info)
{
    char buffer[256];
    char msg[512];
    int res;

    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
fail: ;
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AllocationAttributes swig_types[0]
#define SWIGTYPE_p_AllocationDescription swig_types[1]
#define SWIGTYPE_p_Allocator swig_types[2]
#define SWIGTYPE_p_ArgDef swig_types[3]
#define SWIGTYPE_p_AttrDef swig_types[4]
#define SWIGTYPE_p_CSession swig_types[5]
#define SWIGTYPE_p_ConfigProto swig_types[6]
#define SWIGTYPE_p_DataTypeVector swig_types[7]
#define SWIGTYPE_p_EdgeSet swig_types[8]
#define SWIGTYPE_p_EdgeSet__const_iterator swig_types[9]
#define SWIGTYPE_p_FileStatistics swig_types[10]
#define SWIGTYPE_p_FileSystemRegistry__Factory swig_types[11]
#define SWIGTYPE_p_GraphDef swig_types[12]
#define SWIGTYPE_p_ListValue swig_types[13]
#define SWIGTYPE_p_NodeDefBuilder swig_types[14]
#define SWIGTYPE_p_OpRegistrationDataFactory swig_types[15]
#define SWIGTYPE_p_OpRegistryInterface swig_types[16]
#define SWIGTYPE_p_Reflection swig_types[17]
#define SWIGTYPE_p_RunMetadata swig_types[18]
#define SWIGTYPE_p_RunOptions swig_types[19]
#define SWIGTYPE_p_TF_AttrMetadata swig_types[20]
#define SWIGTYPE_p_TF_AttrType swig_types[21]
#define SWIGTYPE_p_TF_Buffer swig_types[22]
#define SWIGTYPE_p_TF_Code swig_types[23]
#define SWIGTYPE_p_TF_DataType swig_types[24]
#define SWIGTYPE_p_TF_DeprecatedSession swig_types[25]
#define SWIGTYPE_p_TF_Graph swig_types[26]
#define SWIGTYPE_p_TF_ImportGraphDefOptions swig_types[27]
#define SWIGTYPE_p_TF_Input swig_types[28]
#define SWIGTYPE_p_TF_Library swig_types[29]
#define SWIGTYPE_p_TF_Operation swig_types[30]
#define SWIGTYPE_p_TF_OperationDescription swig_types[31]
#define SWIGTYPE_p_TF_Output swig_types[32]
#define SWIGTYPE_p_TF_Session swig_types[33]
#define SWIGTYPE_p_TF_SessionOptions swig_types[34]
#define SWIGTYPE_p_TF_Status swig_types[35]
#define SWIGTYPE_p_TF_Tensor swig_types[36]
#define SWIGTYPE_p_TensorDescription swig_types[37]
#define SWIGTYPE_p_TensorShapeProto swig_types[38]
#define SWIGTYPE_p_VersionDef swig_types[39]
#define SWIGTYPE_p_Watcher swig_types[40]
#define SWIGTYPE_p_______TF_ManagedBuffer swig_types[41]
#define SWIGTYPE_p_char swig_types[42]
#define SWIGTYPE_p_condition_variable swig_types[43]
#define SWIGTYPE_p_f_p_void_size_t__void swig_types[44]
#define SWIGTYPE_p_f_p_void_size_t_p_void__void swig_types[45]
#define SWIGTYPE_p_f_r_q_const__string__void swig_types[46]
#define SWIGTYPE_p_float swig_types[47]
#define SWIGTYPE_p_google__protobuf__Arena swig_types[48]
#define SWIGTYPE_p_google__protobuf__Descriptor swig_types[49]
#define SWIGTYPE_p_google__protobuf__EnumDescriptor swig_types[50]
#define SWIGTYPE_p_google__protobuf__EnumValueDescriptor swig_types[51]
#define SWIGTYPE_p_google__protobuf__FieldDescriptor swig_types[52]
#define SWIGTYPE_p_google__protobuf__MapT_std__string___tensorflow__AttrValue_t swig_types[53]
#define SWIGTYPE_p_google__protobuf__Message swig_types[54]
#define SWIGTYPE_p_google__protobuf__MessageFactory swig_types[55]
#define SWIGTYPE_p_google__protobuf__MessageLite swig_types[56]
#define SWIGTYPE_p_google__protobuf__Metadata swig_types[57]
#define SWIGTYPE_p_google__protobuf__OneofDescriptor swig_types[58]
#define SWIGTYPE_p_google__protobuf__Reflection swig_types[59]
#define SWIGTYPE_p_google__protobuf__RepeatedFieldT_bool_t swig_types[60]
#define SWIGTYPE_p_google__protobuf__RepeatedFieldT_double_t swig_types[61]
#define SWIGTYPE_p_google__protobuf__RepeatedFieldT_float_t swig_types[62]
#define SWIGTYPE_p_google__protobuf__RepeatedFieldT_int32_t_t swig_types[63]
#define SWIGTYPE_p_google__protobuf__RepeatedFieldT_int64_t_t swig_types[64]
#define SWIGTYPE_p_google__protobuf__RepeatedFieldT_int_t swig_types[65]
#define SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_std__string_t swig_types[66]
#define SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_ArgDef_t swig_types[67]
#define SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_AttrDef_t swig_types[68]
#define SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_t swig_types[69]
#define SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__ResourceHandle_t swig_types[70]
#define SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorProto_t swig_types[71]
#define SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorShapeProto_t swig_types[72]
#define SWIGTYPE_p_google__protobuf__UnknownFieldSet swig_types[73]
#define SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_ListValue_t swig_types[74]
#define SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_t swig_types[75]
#define SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NameAttrList_t swig_types[76]
#define SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NodeDef_t swig_types[77]
#define SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_ArgDef_t swig_types[78]
#define SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_AttrDef_t swig_types[79]
#define SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_t swig_types[80]
#define SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDeprecation_t swig_types[81]
#define SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpList_t swig_types[82]
#define SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__SaveSliceInfoDef_t swig_types[83]
#define SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__TensorProto_t swig_types[84]
#define SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__VariableDef_t swig_types[85]
#define SWIGTYPE_p_google__protobuf__io__CodedInputStream swig_types[86]
#define SWIGTYPE_p_google__protobuf__io__CodedOutputStream swig_types[87]
#define SWIGTYPE_p_google__protobuf__io__ZeroCopyInputStream swig_types[88]
#define SWIGTYPE_p_google__protobuf__io__ZeroCopyOutputStream swig_types[89]
#define SWIGTYPE_p_gtl__ArraySliceT_int32_t swig_types[90]
#define SWIGTYPE_p_gtl__ArraySliceT_int64_t swig_types[91]
#define SWIGTYPE_p_gtl__ArraySliceT_tensorflow__TensorShape_t swig_types[92]
#define SWIGTYPE_p_gtl__InlinedVectorT_int64_4_t swig_types[93]
#define SWIGTYPE_p_int swig_types[94]
#define SWIGTYPE_p_int16_t swig_types[95]
#define SWIGTYPE_p_int32 swig_types[96]
#define SWIGTYPE_p_int32_t swig_types[97]
#define SWIGTYPE_p_int64 swig_types[98]
#define SWIGTYPE_p_int64_t swig_types[99]
#define SWIGTYPE_p_int8_t swig_types[100]
#define SWIGTYPE_p_mutex_lock swig_types[101]
#define SWIGTYPE_p_p_FileSystem swig_types[102]
#define SWIGTYPE_p_p_OpRegistrationData swig_types[103]
#define SWIGTYPE_p_p_TF_Buffer swig_types[104]
#define SWIGTYPE_p_p_TF_Operation swig_types[105]
#define SWIGTYPE_p_p_TF_Tensor swig_types[106]
#define SWIGTYPE_p_p_char swig_types[107]
#define SWIGTYPE_p_p_int64_t swig_types[108]
#define SWIGTYPE_p_p_tensorflow__Edge swig_types[109]
#define SWIGTYPE_p_p_tensorflow__Node swig_types[110]
#define SWIGTYPE_p_p_tensorflow__OpDef swig_types[111]
#define SWIGTYPE_p_p_tensorflow__Session swig_types[112]
#define SWIGTYPE_p_p_void swig_types[113]
#define SWIGTYPE_p_shape_inference__InferenceContext swig_types[114]
#define SWIGTYPE_p_shape_inference__ShapeHandle swig_types[115]
#define SWIGTYPE_p_size_t swig_types[116]
#define SWIGTYPE_p_size_type swig_types[117]
#define SWIGTYPE_p_std__functionT_tensorflow__Status_fOpRegistrationData_pF_t swig_types[118]
#define SWIGTYPE_p_std__functionT_tensorflow__Status_ftensorflow__Status_const_R_tensorflow__OpDef_const_RF_t swig_types[119]
#define SWIGTYPE_p_std__functionT_void_fF_t swig_types[120]
#define SWIGTYPE_p_std__functionT_void_ftensorflow__Status_const_RF_t swig_types[121]
#define SWIGTYPE_p_std__istream swig_types[122]
#define SWIGTYPE_p_std__ostream swig_types[123]
#define SWIGTYPE_p_std__string swig_types[124]
#define SWIGTYPE_p_std__unique_ptrT_RandomAccessFile_t swig_types[125]
#define SWIGTYPE_p_std__unique_ptrT_ReadOnlyMemoryRegion_t swig_types[126]
#define SWIGTYPE_p_std__unique_ptrT_WritableFile_t swig_types[127]
#define SWIGTYPE_p_std__unordered_mapT_tensorflow__string_tensorflow__Node_p_t swig_types[128]
#define SWIGTYPE_p_std__vectorT_TF_Operation_p_t swig_types[129]
#define SWIGTYPE_p_std__vectorT_google__protobuf__FieldDescriptor_const_p_t swig_types[130]
#define SWIGTYPE_p_std__vectorT_std__pairT_TF_Operation_p_TF_Tensor_p_t_t swig_types[131]
#define SWIGTYPE_p_std__vectorT_std__pairT_std__string_tensorflow__Tensor_t_t swig_types[132]
#define SWIGTYPE_p_std__vectorT_std__pairT_tensorflow__string_tensorflow__Tensor_t_t swig_types[133]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[134]
#define SWIGTYPE_p_std__vectorT_tensorflow__OpDef_t swig_types[135]
#define SWIGTYPE_p_std__vectorT_tensorflow__Tensor_t swig_types[136]
#define SWIGTYPE_p_std__vectorT_tensorflow__string_t swig_types[137]
#define SWIGTYPE_p_std__string swig_types[138]
#define SWIGTYPE_p_tensorflow__AttrValue swig_types[139]
#define SWIGTYPE_p_tensorflow__AttrValue_ListValue swig_types[140]
#define SWIGTYPE_p_tensorflow__DataType swig_types[141]
#define SWIGTYPE_p_tensorflow__Edge swig_types[142]
#define SWIGTYPE_p_tensorflow__Env swig_types[143]
#define SWIGTYPE_p_tensorflow__EnvWrapper swig_types[144]
#define SWIGTYPE_p_tensorflow__Graph swig_types[145]
#define SWIGTYPE_p_tensorflow__ImportGraphDefOptions swig_types[146]
#define SWIGTYPE_p_tensorflow__NameAttrList swig_types[147]
#define SWIGTYPE_p_tensorflow__NeighborIter swig_types[148]
#define SWIGTYPE_p_tensorflow__Node swig_types[149]
#define SWIGTYPE_p_tensorflow__NodeBuilder swig_types[150]
#define SWIGTYPE_p_tensorflow__NodeBuilder__NodeOut swig_types[151]
#define SWIGTYPE_p_tensorflow__NodeDef swig_types[152]
#define SWIGTYPE_p_tensorflow__NodeIter swig_types[153]
#define SWIGTYPE_p_tensorflow__OpDef swig_types[154]
#define SWIGTYPE_p_tensorflow__OpDef_ArgDef swig_types[155]
#define SWIGTYPE_p_tensorflow__OpDef_AttrDef swig_types[156]
#define SWIGTYPE_p_tensorflow__OpDeprecation swig_types[157]
#define SWIGTYPE_p_tensorflow__OpList swig_types[158]
#define SWIGTYPE_p_tensorflow__OpListOpRegistry swig_types[159]
#define SWIGTYPE_p_tensorflow__OpRegistry swig_types[160]
#define SWIGTYPE_p_tensorflow__OpRegistryInterface swig_types[161]
#define SWIGTYPE_p_tensorflow__ResourceHandle swig_types[162]
#define SWIGTYPE_p_tensorflow__SaveSliceInfoDef swig_types[163]
#define SWIGTYPE_p_tensorflow__Session swig_types[164]
#define SWIGTYPE_p_tensorflow__SessionOptions swig_types[165]
#define SWIGTYPE_p_tensorflow__ShapeRefiner swig_types[166]
#define SWIGTYPE_p_tensorflow__Status swig_types[167]
#define SWIGTYPE_p_tensorflow__StringPiece swig_types[168]
#define SWIGTYPE_p_tensorflow__Tensor swig_types[169]
#define SWIGTYPE_p_tensorflow__TensorBuffer swig_types[170]
#define SWIGTYPE_p_tensorflow__TensorCApi swig_types[171]
#define SWIGTYPE_p_tensorflow__TensorProto swig_types[172]
#define SWIGTYPE_p_tensorflow__TensorShape swig_types[173]
#define SWIGTYPE_p_tensorflow__TensorShapeDim swig_types[174]
#define SWIGTYPE_p_tensorflow__TensorShapeIter swig_types[175]
#define SWIGTYPE_p_tensorflow__TensorShapeProto swig_types[176]
#define SWIGTYPE_p_tensorflow__TensorShapeUtils swig_types[177]
#define SWIGTYPE_p_tensorflow__Thread swig_types[178]
#define SWIGTYPE_p_tensorflow__ThreadOptions swig_types[179]
#define SWIGTYPE_p_tensorflow__VariableDef swig_types[180]
#define SWIGTYPE_p_tensorflow__error__Code swig_types[181]
#define SWIGTYPE_p_tensorflow__gtl__ArraySliceT_tensorflow__NodeBuilder__NodeOut_t swig_types[182]
#define SWIGTYPE_p_tensorflow__gtl__ArraySliceT_tensorflow__Node_p_t swig_types[183]
#define SWIGTYPE_p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t swig_types[184]
#define SWIGTYPE_p_tensorflow__gtl__iterator_rangeT_tensorflow__NodeIter_t swig_types[185]
#define SWIGTYPE_p_tensorflow__protobuf__Message swig_types[186]
#define SWIGTYPE_p_tensorflow__protobuf__MessageLite swig_types[187]
#define SWIGTYPE_p_tensorflow__register_op__OpDefBuilderReceiver swig_types[188]
#define SWIGTYPE_p_tensorflow__register_op__OpDefBuilderWrapperT_false_t swig_types[189]
#define SWIGTYPE_p_tensorflow__register_op__OpDefBuilderWrapperT_true_t swig_types[190]
#define SWIGTYPE_p_uint16_t swig_types[191]
#define SWIGTYPE_p_uint32_t swig_types[192]
#define SWIGTYPE_p_uint64 swig_types[193]
#define SWIGTYPE_p_uint64_t swig_types[194]
#define SWIGTYPE_p_uint8_t swig_types[195]
#define SWIGTYPE_p_unsigned_char swig_types[196]
#define SWIGTYPE_p_unsigned_int swig_types[197]
#define SWIGTYPE_p_v8__LocalT_v8__Array_t swig_types[198]
#define SWIGTYPE_p_void swig_types[199]
static swig_type_info *swig_types[201];
static swig_module_info swig_module = {swig_types, 200, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


  #include "tensorflow/core/framework/allocator.h"

  static void Deallocator(void* data, size_t, void* arg) {
    tensorflow::cpu_allocator()->DeallocateRaw(data);
    *reinterpret_cast<bool*>(arg) = true;
  }


#include "tensorflow/c/c_api.h"
#include "tensorflow/core/util/port.h"
#include "tensorflow/core/public/version.h"
#include "tensorflow/core/framework/types.pb.h"
#include "tensorflow/core/framework/node_def.pb.h"
#include "tensorflow/core/framework/variable.pb.h"
#include "tensorflow/core/framework/attr_value.pb.h"
#include "tensorflow/core/framework/tensor.pb.h"
#include "tensorflow/core/framework/op_def.pb.h"
#include "tensorflow/core/framework/graph.pb.h"
#include "tensorflow/core/graph/graph.h"
#include "tensorflow/core/lib/core/stringpiece.h"

#include "tensorflow/core/platform/macros.h"
#include "tensorflow/core/platform/env.h"
#include "tensorflow/core/public/session.h"
#include "tensorflow/core/public/session_options.h"
#include "tensorflow/core/framework/tensor.h"
#include "tensorflow/core/framework/tensor_shape.h"
#include "tensorflow/core/framework/node_def.pb.h"
#include "tensorflow/core/platform/default/thread_annotations.h"
#include "tensorflow/core/platform/mutex.h"
#include "tensorflow/core/graph/graph.h"
#include "tensorflow/core/common_runtime/shape_refiner.h"
#include "tensorflow/core/graph/node_builder.h"
#include "tensorflow/core/platform/default/mutex.h"
#include "tensorflow/core/lib/gtl/iterator_range.h"
#include "tensorflow/core/graph/graph.h"
#include "tensorflow/core/lib/core/status.h"
#include "tensorflow/core/framework/op.h"
#include "tensorflow/c/c_api.cc"
#include "c_session.cc"

using tensorflow::mutex;
using tensorflow::mutex_lock;

using namespace tensorflow;
/*using namespace std;*/
#include "google/protobuf/stubs/port.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/message.h"


#include <string>


SWIGINTERNINLINE
v8::Handle<v8::Value>
SWIG_From_bool  (bool value)
{
  return SWIGV8_BOOLEAN_NEW(value);
}


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();

  return SWIG_OK;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return SWIGV8_NUMBER_NEW(value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW((long)(value));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long_SS_long  (long long value)
{
  return SWIGV8_NUMBER_NEW(value);
}
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW((long)(value));
}
#endif


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  ((unsigned long)(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  ((unsigned long long)(value));
  }
#endif
}


SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) obj->IntegerValue();

  return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_bool (v8::Handle<v8::Value> obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = obj->BooleanValue();
  return SWIG_OK;
}


SWIGINTERN
v8::Handle<v8::Value> SWIG_From_double   (double val)
{
  return SWIGV8_NUMBER_NEW(val);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (v8::Handle<v8::Value> obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (float)(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = valRef->ToString();

    size_t len = js_str->Utf8Length() + 1;
    char* cstr = new char[len];
    js_str->WriteUtf8(cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = valRef->ToObject();
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}





SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return SWIGV8_UNDEFINED();
    } else {
      v8::Handle<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
      return js_str;
    }
  } else {
    return SWIGV8_UNDEFINED();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value> 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) obj->NumberValue();

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (v8::Handle<v8::Value> obj, unsigned long long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long long longVal = (long long) obj->NumberValue();

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (v8::Handle<v8::Value> obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = (size_t)(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = (size_t)(v);
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (v8::Handle<v8::Value> obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned char)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsPtr_std_string (v8::Handle<v8::Value> obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsCharArray(v8::Handle<v8::Value> obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (v8::Handle<v8::Value> obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = (char)(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


#define SWIGV8_INIT tensorflow_initialize


SWIGV8_ClientData _exports_MessageLite_clientData;
SWIGV8_ClientData _exports_Metadata_clientData;
SWIGV8_ClientData _exports_Message_clientData;
SWIGV8_ClientData _exports_Reflection_clientData;
SWIGV8_ClientData _exports_MessageFactory_clientData;
SWIGV8_ClientData _exports_TF_Buffer_clientData;
SWIGV8_ClientData _exports_TF_Input_clientData;
SWIGV8_ClientData _exports_TF_Output_clientData;
SWIGV8_ClientData _exports_TF_AttrMetadata_clientData;
SWIGV8_ClientData _exports_NodeDef_clientData;
SWIGV8_ClientData _exports_VariableDef_clientData;
SWIGV8_ClientData _exports_SaveSliceInfoDef_clientData;
SWIGV8_ClientData _exports_AttrValue_ListValue_clientData;
SWIGV8_ClientData _exports_AttrValue_clientData;
SWIGV8_ClientData _exports_NameAttrList_clientData;
SWIGV8_ClientData _exports_TensorProto_clientData;
SWIGV8_ClientData _exports_OpDef_ArgDef_clientData;
SWIGV8_ClientData _exports_OpDef_AttrDef_clientData;
SWIGV8_ClientData _exports_OpDef_clientData;
SWIGV8_ClientData _exports_OpDeprecation_clientData;
SWIGV8_ClientData _exports_OpList_clientData;
SWIGV8_ClientData _exports_StringPiece_clientData;
SWIGV8_ClientData _exports_Env_clientData;
SWIGV8_ClientData _exports_EnvWrapper_clientData;
SWIGV8_ClientData _exports_Thread_clientData;
SWIGV8_ClientData _exports_ThreadOptions_clientData;
SWIGV8_ClientData _exports_Session_clientData;
SWIGV8_ClientData _exports_SessionOptions_clientData;
SWIGV8_ClientData _exports_Tensor_clientData;
SWIGV8_ClientData _exports_TensorBuffer_clientData;
SWIGV8_ClientData _exports_TensorShape_clientData;
SWIGV8_ClientData _exports_TensorShapeDim_clientData;
SWIGV8_ClientData _exports_TensorShapeIter_clientData;
SWIGV8_ClientData _exports_TensorShapeUtils_clientData;
SWIGV8_ClientData _exports_Node_clientData;
SWIGV8_ClientData _exports_Edge_clientData;
SWIGV8_ClientData _exports_Graph_clientData;
SWIGV8_ClientData _exports_NodeIter_clientData;
SWIGV8_ClientData _exports_NeighborIter_clientData;
SWIGV8_ClientData _exports_ShapeRefiner_clientData;
SWIGV8_ClientData _exports_NodeBuilder_clientData;
SWIGV8_ClientData _exports_Status_clientData;
SWIGV8_ClientData _exports_OpRegistryInterface_clientData;
SWIGV8_ClientData _exports_OpRegistry_clientData;
SWIGV8_ClientData _exports_OpListOpRegistry_clientData;
SWIGV8_ClientData _exports_OpDefBuilderReceiver_clientData;
SWIGV8_ClientData _exports_TF_Status_clientData;
SWIGV8_ClientData _exports_TF_Tensor_clientData;
SWIGV8_ClientData _exports_TF_SessionOptions_clientData;
SWIGV8_ClientData _exports_TF_DeprecatedSession_clientData;
SWIGV8_ClientData _exports_TensorCApi_clientData;
SWIGV8_ClientData _exports_TF_Library_clientData;
SWIGV8_ClientData _exports_TF_Graph_clientData;
SWIGV8_ClientData _exports_TF_OperationDescription_clientData;
SWIGV8_ClientData _exports_TF_Operation_clientData;
SWIGV8_ClientData _exports_TF_Session_clientData;
SWIGV8_ClientData _exports_TF_ImportGraphDefOptions_clientData;
SWIGV8_ClientData _exports_CSession_clientData;


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_MessageLite(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_MessageLite(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_MessageLite(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_MessageLite(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          google::protobuf::MessageLite * arg1 = (google::protobuf::MessageLite *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_MessageLite_GetTypeName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_GetTypeName (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_GetTypeName" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  result = ((google::protobuf::MessageLite const *)arg1)->GetTypeName();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  google::protobuf::MessageLite *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_New" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  result = (google::protobuf::MessageLite *)((google::protobuf::MessageLite const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  google::protobuf::MessageLite *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_New" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (google::protobuf::MessageLite *)((google::protobuf::MessageLite const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite__wrap_MessageLite_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_MessageLite_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_MessageLite_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_MessageLite_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_MessageLite_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_GetArena" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  result = (::google::protobuf::Arena *)((google::protobuf::MessageLite const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_GetMaybeArenaPointer" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  result = (void *)((google::protobuf::MessageLite const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_Clear" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_IsInitialized" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  result = (bool)((google::protobuf::MessageLite const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_InitializationErrorString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_InitializationErrorString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_InitializationErrorString" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  result = ((google::protobuf::MessageLite const *)arg1)->InitializationErrorString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_CheckTypeAndMergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::MessageLite *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_CheckTypeAndMergeFrom (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_CheckTypeAndMergeFrom" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__MessageLite,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_CheckTypeAndMergeFrom" "', argument " "2"" of type '" "google::protobuf::MessageLite const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageLite_CheckTypeAndMergeFrom" "', argument " "2"" of type '" "google::protobuf::MessageLite const &""'"); 
  }
  arg2 = (google::protobuf::MessageLite *)(argp2);
  (arg1)->CheckTypeAndMergeFrom((google::protobuf::MessageLite const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_ParseFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::CodedInputStream *arg2 = (google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_ParseFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_ParseFromCodedStream" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_ParseFromCodedStream" "', argument " "2"" of type '" "google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->ParseFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_ParsePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::CodedInputStream *arg2 = (google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_ParsePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_ParsePartialFromCodedStream" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_ParsePartialFromCodedStream" "', argument " "2"" of type '" "google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->ParsePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_ParseFromZeroCopyStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::ZeroCopyInputStream *arg2 = (google::protobuf::io::ZeroCopyInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_ParseFromZeroCopyStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_ParseFromZeroCopyStream" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__ZeroCopyInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_ParseFromZeroCopyStream" "', argument " "2"" of type '" "google::protobuf::io::ZeroCopyInputStream *""'"); 
  }
  arg2 = (google::protobuf::io::ZeroCopyInputStream *)(argp2);
  result = (bool)(arg1)->ParseFromZeroCopyStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_ParsePartialFromZeroCopyStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::ZeroCopyInputStream *arg2 = (google::protobuf::io::ZeroCopyInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_ParsePartialFromZeroCopyStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_ParsePartialFromZeroCopyStream" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__ZeroCopyInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_ParsePartialFromZeroCopyStream" "', argument " "2"" of type '" "google::protobuf::io::ZeroCopyInputStream *""'"); 
  }
  arg2 = (google::protobuf::io::ZeroCopyInputStream *)(argp2);
  result = (bool)(arg1)->ParsePartialFromZeroCopyStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_ParseFromBoundedZeroCopyStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::ZeroCopyInputStream *arg2 = (google::protobuf::io::ZeroCopyInputStream *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_ParseFromBoundedZeroCopyStream (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_ParseFromBoundedZeroCopyStream" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__ZeroCopyInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_ParseFromBoundedZeroCopyStream" "', argument " "2"" of type '" "google::protobuf::io::ZeroCopyInputStream *""'"); 
  }
  arg2 = (google::protobuf::io::ZeroCopyInputStream *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MessageLite_ParseFromBoundedZeroCopyStream" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (bool)(arg1)->ParseFromBoundedZeroCopyStream(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_ParsePartialFromBoundedZeroCopyStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::ZeroCopyInputStream *arg2 = (google::protobuf::io::ZeroCopyInputStream *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_ParsePartialFromBoundedZeroCopyStream (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_ParsePartialFromBoundedZeroCopyStream" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__ZeroCopyInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_ParsePartialFromBoundedZeroCopyStream" "', argument " "2"" of type '" "google::protobuf::io::ZeroCopyInputStream *""'"); 
  }
  arg2 = (google::protobuf::io::ZeroCopyInputStream *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MessageLite_ParsePartialFromBoundedZeroCopyStream" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (bool)(arg1)->ParsePartialFromBoundedZeroCopyStream(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_ParseFromString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_ParseFromString (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_ParseFromString" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_ParseFromString" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageLite_ParseFromString" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  result = (bool)(arg1)->ParseFromString((string const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_ParsePartialFromString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_ParsePartialFromString (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_ParsePartialFromString" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_ParsePartialFromString" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageLite_ParsePartialFromString" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  result = (bool)(arg1)->ParsePartialFromString((string const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_ParseFromArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_ParseFromArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_ParseFromArray" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_ParseFromArray" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MessageLite_ParseFromArray" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (bool)(arg1)->ParseFromArray((void const *)arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_ParsePartialFromArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_ParsePartialFromArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_ParsePartialFromArray" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_ParsePartialFromArray" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MessageLite_ParsePartialFromArray" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (bool)(arg1)->ParsePartialFromArray((void const *)arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_MergeFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::CodedInputStream *arg2 = (google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_MergeFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_MergeFromCodedStream" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_MergeFromCodedStream" "', argument " "2"" of type '" "google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergeFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::CodedInputStream *arg2 = (google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_MergePartialFromCodedStream" "', argument " "1"" of type '" "google::protobuf::MessageLite *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_MergePartialFromCodedStream" "', argument " "2"" of type '" "google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_SerializeToCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::CodedOutputStream *arg2 = (google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_SerializeToCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_SerializeToCodedStream" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_SerializeToCodedStream" "', argument " "2"" of type '" "google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (google::protobuf::io::CodedOutputStream *)(argp2);
  result = (bool)((google::protobuf::MessageLite const *)arg1)->SerializeToCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_SerializePartialToCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::CodedOutputStream *arg2 = (google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_SerializePartialToCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_SerializePartialToCodedStream" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_SerializePartialToCodedStream" "', argument " "2"" of type '" "google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (google::protobuf::io::CodedOutputStream *)(argp2);
  result = (bool)((google::protobuf::MessageLite const *)arg1)->SerializePartialToCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_SerializeToZeroCopyStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::ZeroCopyOutputStream *arg2 = (google::protobuf::io::ZeroCopyOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_SerializeToZeroCopyStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_SerializeToZeroCopyStream" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__ZeroCopyOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_SerializeToZeroCopyStream" "', argument " "2"" of type '" "google::protobuf::io::ZeroCopyOutputStream *""'"); 
  }
  arg2 = (google::protobuf::io::ZeroCopyOutputStream *)(argp2);
  result = (bool)((google::protobuf::MessageLite const *)arg1)->SerializeToZeroCopyStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_SerializePartialToZeroCopyStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::ZeroCopyOutputStream *arg2 = (google::protobuf::io::ZeroCopyOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_SerializePartialToZeroCopyStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_SerializePartialToZeroCopyStream" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__ZeroCopyOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_SerializePartialToZeroCopyStream" "', argument " "2"" of type '" "google::protobuf::io::ZeroCopyOutputStream *""'"); 
  }
  arg2 = (google::protobuf::io::ZeroCopyOutputStream *)(argp2);
  result = (bool)((google::protobuf::MessageLite const *)arg1)->SerializePartialToZeroCopyStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_SerializeToString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  string *arg2 = (string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_SerializeToString (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_SerializeToString" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_SerializeToString" "', argument " "2"" of type '" "string *""'"); 
  }
  arg2 = (string *)(argp2);
  result = (bool)((google::protobuf::MessageLite const *)arg1)->SerializeToString(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_SerializePartialToString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  string *arg2 = (string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_SerializePartialToString (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_SerializePartialToString" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_SerializePartialToString" "', argument " "2"" of type '" "string *""'"); 
  }
  arg2 = (string *)(argp2);
  result = (bool)((google::protobuf::MessageLite const *)arg1)->SerializePartialToString(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_SerializeToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_SerializeToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_SerializeToArray" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_SerializeToArray" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MessageLite_SerializeToArray" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (bool)((google::protobuf::MessageLite const *)arg1)->SerializeToArray(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_SerializePartialToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_SerializePartialToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_SerializePartialToArray" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_SerializePartialToArray" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MessageLite_SerializePartialToArray" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (bool)((google::protobuf::MessageLite const *)arg1)->SerializePartialToArray(arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_SerializeAsString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_SerializeAsString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_SerializeAsString" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  result = ((google::protobuf::MessageLite const *)arg1)->SerializeAsString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_SerializePartialAsString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_SerializePartialAsString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_SerializePartialAsString" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  result = ((google::protobuf::MessageLite const *)arg1)->SerializePartialAsString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_AppendToString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  string *arg2 = (string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_AppendToString (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_AppendToString" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_AppendToString" "', argument " "2"" of type '" "string *""'"); 
  }
  arg2 = (string *)(argp2);
  result = (bool)((google::protobuf::MessageLite const *)arg1)->AppendToString(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_AppendPartialToString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  string *arg2 = (string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_AppendPartialToString (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_AppendPartialToString" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_AppendPartialToString" "', argument " "2"" of type '" "string *""'"); 
  }
  arg2 = (string *)(argp2);
  result = (bool)((google::protobuf::MessageLite const *)arg1)->AppendPartialToString(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_ByteSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_ByteSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_ByteSize" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  result = (int)((google::protobuf::MessageLite const *)arg1)->ByteSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_ByteSizeLong" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  result = ((google::protobuf::MessageLite const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::io::CodedOutputStream *arg2 = (google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_SerializeWithCachedSizes" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_SerializeWithCachedSizes" "', argument " "2"" of type '" "google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (google::protobuf::io::CodedOutputStream *)(argp2);
  ((google::protobuf::MessageLite const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  google::protobuf::uint8 *arg2 = (google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageLite_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "google::protobuf::uint8 *""'"); 
  }
  arg2 = (google::protobuf::uint8 *)(argp2);
  result = (google::protobuf::uint8 *)((google::protobuf::MessageLite const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_GetCachedSize" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  result = (int)((google::protobuf::MessageLite const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageLite_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageLite *arg1 = (google::protobuf::MessageLite *) 0 ;
  bool arg2 ;
  google::protobuf::uint8 *arg3 = (google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageLite_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageLite_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "google::protobuf::MessageLite const *""'"); 
  }
  arg1 = (google::protobuf::MessageLite *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MessageLite_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageLite_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "google::protobuf::uint8 *""'"); 
  }
  arg3 = (google::protobuf::uint8 *)(argp3);
  result = (google::protobuf::uint8 *)((google::protobuf::MessageLite const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_MessageLite(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class MessageLite can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_Metadata_descriptor_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  google::protobuf::Metadata *arg1 = (google::protobuf::Metadata *) 0 ;
  google::protobuf::Descriptor *arg2 = (google::protobuf::Descriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_descriptor_set" "', argument " "1"" of type '" "google::protobuf::Metadata *""'"); 
  }
  arg1 = (google::protobuf::Metadata *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_google__protobuf__Descriptor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metadata_descriptor_set" "', argument " "2"" of type '" "google::protobuf::Descriptor const *""'"); 
  }
  arg2 = (google::protobuf::Descriptor *)(argp2);
  if (arg1) (arg1)->descriptor = (google::protobuf::Descriptor const *)arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_Metadata_descriptor_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Metadata *arg1 = (google::protobuf::Metadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  google::protobuf::Descriptor *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_descriptor_get" "', argument " "1"" of type '" "google::protobuf::Metadata *""'"); 
  }
  arg1 = (google::protobuf::Metadata *)(argp1);
  result = (google::protobuf::Descriptor *) ((arg1)->descriptor);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_Metadata_reflection_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  google::protobuf::Metadata *arg1 = (google::protobuf::Metadata *) 0 ;
  google::protobuf::Reflection *arg2 = (google::protobuf::Reflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_reflection_set" "', argument " "1"" of type '" "google::protobuf::Metadata *""'"); 
  }
  arg1 = (google::protobuf::Metadata *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_google__protobuf__Reflection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metadata_reflection_set" "', argument " "2"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg2 = (google::protobuf::Reflection *)(argp2);
  if (arg1) (arg1)->reflection = (google::protobuf::Reflection const *)arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_Metadata_reflection_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Metadata *arg1 = (google::protobuf::Metadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  google::protobuf::Reflection *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_reflection_get" "', argument " "1"" of type '" "google::protobuf::Metadata *""'"); 
  }
  arg1 = (google::protobuf::Metadata *)(argp1);
  result = (google::protobuf::Reflection *) ((arg1)->reflection);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_Metadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  google::protobuf::Metadata *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Metadata (should be 0)");
  result = (google::protobuf::Metadata *)new google::protobuf::Metadata();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Metadata(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Metadata(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Metadata(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Metadata(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          google::protobuf::Metadata * arg1 = (google::protobuf::Metadata *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Message(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Message(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Message(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Message(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          google::protobuf::Message * arg1 = (google::protobuf::Message *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Message_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_New" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  result = (google::protobuf::Message *)((google::protobuf::Message const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_New" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (google::protobuf::Message *)((google::protobuf::Message const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message__wrap_Message_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Message_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Message_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Message_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Message_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_CopyFrom (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_CopyFrom" "', argument " "1"" of type '" "google::protobuf::Message *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_CopyFrom" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_CopyFrom" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_MergeFrom (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_MergeFrom" "', argument " "1"" of type '" "google::protobuf::Message *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_MergeFrom" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_MergeFrom" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_CheckInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_CheckInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_CheckInitialized" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  ((google::protobuf::Message const *)arg1)->CheckInitialized();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_FindInitializationErrors(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_FindInitializationErrors (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_FindInitializationErrors" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_FindInitializationErrors" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = (std::vector< std::string > *)(argp2);
  ((google::protobuf::Message const *)arg1)->FindInitializationErrors(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_InitializationErrorString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_InitializationErrorString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_InitializationErrorString" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  result = ((google::protobuf::Message const *)arg1)->InitializationErrorString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_DiscardUnknownFields(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_DiscardUnknownFields (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_DiscardUnknownFields" "', argument " "1"" of type '" "google::protobuf::Message *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  (arg1)->DiscardUnknownFields();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_SpaceUsed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_SpaceUsed (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_SpaceUsed" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  result = (int)((google::protobuf::Message const *)arg1)->SpaceUsed();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_DebugString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_DebugString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_DebugString" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  result = ((google::protobuf::Message const *)arg1)->DebugString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_ShortDebugString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_ShortDebugString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_ShortDebugString" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  result = ((google::protobuf::Message const *)arg1)->ShortDebugString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_Utf8DebugString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_Utf8DebugString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_Utf8DebugString" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  result = ((google::protobuf::Message const *)arg1)->Utf8DebugString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_PrintDebugString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_PrintDebugString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_PrintDebugString" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  ((google::protobuf::Message const *)arg1)->PrintDebugString();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_ParseFromFileDescriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_ParseFromFileDescriptor (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_ParseFromFileDescriptor" "', argument " "1"" of type '" "google::protobuf::Message *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_ParseFromFileDescriptor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)(arg1)->ParseFromFileDescriptor(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_ParsePartialFromFileDescriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_ParsePartialFromFileDescriptor (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_ParsePartialFromFileDescriptor" "', argument " "1"" of type '" "google::protobuf::Message *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_ParsePartialFromFileDescriptor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)(arg1)->ParsePartialFromFileDescriptor(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_ParseFromIstream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_ParseFromIstream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_ParseFromIstream" "', argument " "1"" of type '" "google::protobuf::Message *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__istream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_ParseFromIstream" "', argument " "2"" of type '" "std::istream *""'"); 
  }
  arg2 = (std::istream *)(argp2);
  result = (bool)(arg1)->ParseFromIstream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_ParsePartialFromIstream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_ParsePartialFromIstream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_ParsePartialFromIstream" "', argument " "1"" of type '" "google::protobuf::Message *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__istream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_ParsePartialFromIstream" "', argument " "2"" of type '" "std::istream *""'"); 
  }
  arg2 = (std::istream *)(argp2);
  result = (bool)(arg1)->ParsePartialFromIstream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_SerializeToFileDescriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_SerializeToFileDescriptor (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_SerializeToFileDescriptor" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_SerializeToFileDescriptor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)((google::protobuf::Message const *)arg1)->SerializeToFileDescriptor(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_SerializePartialToFileDescriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_SerializePartialToFileDescriptor (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_SerializePartialToFileDescriptor" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_SerializePartialToFileDescriptor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)((google::protobuf::Message const *)arg1)->SerializePartialToFileDescriptor(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_SerializeToOstream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_SerializeToOstream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_SerializeToOstream" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__ostream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_SerializeToOstream" "', argument " "2"" of type '" "std::ostream *""'"); 
  }
  arg2 = (std::ostream *)(argp2);
  result = (bool)((google::protobuf::Message const *)arg1)->SerializeToOstream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_SerializePartialToOstream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_SerializePartialToOstream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_SerializePartialToOstream" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__ostream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_SerializePartialToOstream" "', argument " "2"" of type '" "std::ostream *""'"); 
  }
  arg2 = (std::ostream *)(argp2);
  result = (bool)((google::protobuf::Message const *)arg1)->SerializePartialToOstream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_GetTypeName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_GetTypeName (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_GetTypeName" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  result = ((google::protobuf::Message const *)arg1)->GetTypeName();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_Clear" "', argument " "1"" of type '" "google::protobuf::Message *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_IsInitialized" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  result = (bool)((google::protobuf::Message const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_CheckTypeAndMergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  google::protobuf::MessageLite *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_CheckTypeAndMergeFrom (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_CheckTypeAndMergeFrom" "', argument " "1"" of type '" "google::protobuf::Message *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__MessageLite,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_CheckTypeAndMergeFrom" "', argument " "2"" of type '" "google::protobuf::MessageLite const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_CheckTypeAndMergeFrom" "', argument " "2"" of type '" "google::protobuf::MessageLite const &""'"); 
  }
  arg2 = (google::protobuf::MessageLite *)(argp2);
  (arg1)->CheckTypeAndMergeFrom((google::protobuf::MessageLite const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  google::protobuf::io::CodedInputStream *arg2 = (google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_MergePartialFromCodedStream" "', argument " "1"" of type '" "google::protobuf::Message *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_MergePartialFromCodedStream" "', argument " "2"" of type '" "google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_ByteSizeLong" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  result = ((google::protobuf::Message const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  google::protobuf::io::CodedOutputStream *arg2 = (google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_SerializeWithCachedSizes" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_SerializeWithCachedSizes" "', argument " "2"" of type '" "google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (google::protobuf::io::CodedOutputStream *)(argp2);
  ((google::protobuf::Message const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_GetDescriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_GetDescriptor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_GetDescriptor" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  result = (google::protobuf::Descriptor *)((google::protobuf::Message const *)arg1)->GetDescriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Message_GetReflection(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Message *arg1 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  google::protobuf::Message::Reflection *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Message_GetReflection (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_GetReflection" "', argument " "1"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg1 = (google::protobuf::Message *)(argp1);
  result = (google::protobuf::Message::Reflection *)((google::protobuf::Message const *)arg1)->GetReflection();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_Message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Message can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Reflection(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Reflection(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Reflection(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Reflection(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          google::protobuf::Reflection * arg1 = (google::protobuf::Reflection *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Reflection_GetUnknownFields(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  google::protobuf::UnknownFieldSet *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetUnknownFields (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetUnknownFields" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetUnknownFields" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetUnknownFields" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  result = (google::protobuf::UnknownFieldSet *) &((google::protobuf::Reflection const *)arg1)->GetUnknownFields((google::protobuf::Message const &)*arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__UnknownFieldSet, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_MutableUnknownFields(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  google::protobuf::UnknownFieldSet *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_MutableUnknownFields (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_MutableUnknownFields" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_MutableUnknownFields" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  result = (google::protobuf::UnknownFieldSet *)((google::protobuf::Reflection const *)arg1)->MutableUnknownFields(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__UnknownFieldSet, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SpaceUsed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SpaceUsed (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SpaceUsed" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SpaceUsed" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_SpaceUsed" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  result = (int)((google::protobuf::Reflection const *)arg1)->SpaceUsed((google::protobuf::Message const &)*arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_HasField(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_HasField (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_HasField" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_HasField" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_HasField" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_HasField" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = (bool)((google::protobuf::Reflection const *)arg1)->HasField((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_FieldSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_FieldSize (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_FieldSize" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_FieldSize" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_FieldSize" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_FieldSize" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = (int)((google::protobuf::Reflection const *)arg1)->FieldSize((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_ClearField(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_ClearField (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_ClearField" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_ClearField" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_ClearField" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ((google::protobuf::Reflection const *)arg1)->ClearField(arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_HasOneof(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::OneofDescriptor *arg3 = (google::protobuf::OneofDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_HasOneof (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_HasOneof" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_HasOneof" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_HasOneof" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__OneofDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_HasOneof" "', argument " "3"" of type '" "google::protobuf::OneofDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::OneofDescriptor *)(argp3);
  result = (bool)((google::protobuf::Reflection const *)arg1)->HasOneof((google::protobuf::Message const &)*arg2,(google::protobuf::OneofDescriptor const *)arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_ClearOneof(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::OneofDescriptor *arg3 = (google::protobuf::OneofDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_ClearOneof (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_ClearOneof" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_ClearOneof" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__OneofDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_ClearOneof" "', argument " "3"" of type '" "google::protobuf::OneofDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::OneofDescriptor *)(argp3);
  ((google::protobuf::Reflection const *)arg1)->ClearOneof(arg2,(google::protobuf::OneofDescriptor const *)arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetOneofFieldDescriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::OneofDescriptor *arg3 = (google::protobuf::OneofDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  google::protobuf::FieldDescriptor *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetOneofFieldDescriptor (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetOneofFieldDescriptor" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetOneofFieldDescriptor" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetOneofFieldDescriptor" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__OneofDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetOneofFieldDescriptor" "', argument " "3"" of type '" "google::protobuf::OneofDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::OneofDescriptor *)(argp3);
  result = (google::protobuf::FieldDescriptor *)((google::protobuf::Reflection const *)arg1)->GetOneofFieldDescriptor((google::protobuf::Message const &)*arg2,(google::protobuf::OneofDescriptor const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_RemoveLast(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_RemoveLast (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_RemoveLast" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_RemoveLast" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_RemoveLast" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ((google::protobuf::Reflection const *)arg1)->RemoveLast(arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_ReleaseLast(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_ReleaseLast (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_ReleaseLast" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_ReleaseLast" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_ReleaseLast" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = (google::protobuf::Message *)((google::protobuf::Reflection const *)arg1)->ReleaseLast(arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::Message *arg3 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_Swap (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_Swap" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_Swap" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_Swap" "', argument " "3"" of type '" "google::protobuf::Message *""'"); 
  }
  arg3 = (google::protobuf::Message *)(argp3);
  ((google::protobuf::Reflection const *)arg1)->Swap(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SwapFields(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::Message *arg3 = (google::protobuf::Message *) 0 ;
  std::vector< google::protobuf::FieldDescriptor const * > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SwapFields (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SwapFields" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SwapFields" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SwapFields" "', argument " "3"" of type '" "google::protobuf::Message *""'"); 
  }
  arg3 = (google::protobuf::Message *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__vectorT_google__protobuf__FieldDescriptor_const_p_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_SwapFields" "', argument " "4"" of type '" "std::vector< google::protobuf::FieldDescriptor const * > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_SwapFields" "', argument " "4"" of type '" "std::vector< google::protobuf::FieldDescriptor const * > const &""'"); 
  }
  arg4 = (std::vector< google::protobuf::FieldDescriptor const * > *)(argp4);
  ((google::protobuf::Reflection const *)arg1)->SwapFields(arg2,arg3,(std::vector< google::protobuf::FieldDescriptor const * > const &)*arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SwapElements(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SwapElements (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SwapElements" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SwapElements" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SwapElements" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SwapElements" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Reflection_SwapElements" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ((google::protobuf::Reflection const *)arg1)->SwapElements(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_ListFields(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  std::vector< google::protobuf::FieldDescriptor const * > *arg3 = (std::vector< google::protobuf::FieldDescriptor const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_ListFields (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_ListFields" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_ListFields" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_ListFields" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_std__vectorT_google__protobuf__FieldDescriptor_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_ListFields" "', argument " "3"" of type '" "std::vector< google::protobuf::FieldDescriptor const * > *""'"); 
  }
  arg3 = (std::vector< google::protobuf::FieldDescriptor const * > *)(argp3);
  ((google::protobuf::Reflection const *)arg1)->ListFields((google::protobuf::Message const &)*arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetInt32(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  google::protobuf::int32 result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetInt32 (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetInt32" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetInt32" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetInt32" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetInt32" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = ((google::protobuf::Reflection const *)arg1)->GetInt32((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_NewPointerObj((new google::protobuf::int32((const google::protobuf::int32&)(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetInt64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  google::protobuf::int64 result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetInt64 (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetInt64" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetInt64" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetInt64" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetInt64" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = ((google::protobuf::Reflection const *)arg1)->GetInt64((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_NewPointerObj((new google::protobuf::int64((const google::protobuf::int64&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetUInt32(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  google::protobuf::uint32 result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetUInt32 (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetUInt32" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetUInt32" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetUInt32" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetUInt32" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = ((google::protobuf::Reflection const *)arg1)->GetUInt32((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_NewPointerObj((new google::protobuf::uint32((const google::protobuf::uint32&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetUInt64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  google::protobuf::uint64 result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetUInt64 (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetUInt64" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetUInt64" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetUInt64" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetUInt64" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = ((google::protobuf::Reflection const *)arg1)->GetUInt64((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_NewPointerObj((new google::protobuf::uint64((const google::protobuf::uint64&)(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetFloat(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetFloat (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetFloat" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetFloat" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetFloat" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetFloat" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = (float)((google::protobuf::Reflection const *)arg1)->GetFloat((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetDouble(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetDouble (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetDouble" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetDouble" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetDouble" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetDouble" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = (double)((google::protobuf::Reflection const *)arg1)->GetDouble((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_From_double((double)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetBool(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetBool (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetBool" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetBool" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetBool" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetBool" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = (bool)((google::protobuf::Reflection const *)arg1)->GetBool((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  string result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetString (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetString" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetString" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetString" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetString" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = ((google::protobuf::Reflection const *)arg1)->GetString((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetEnum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  google::protobuf::EnumValueDescriptor *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetEnum (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetEnum" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetEnum" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetEnum" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetEnum" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = (google::protobuf::EnumValueDescriptor *)((google::protobuf::Reflection const *)arg1)->GetEnum((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__EnumValueDescriptor, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetEnumValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetEnumValue (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetEnumValue" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetEnumValue" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetEnumValue" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetEnumValue" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = (int)((google::protobuf::Reflection const *)arg1)->GetEnumValue((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetMessage__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::MessageFactory *arg4 = (google::protobuf::MessageFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetMessage" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetMessage" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetMessage" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetMessage" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_google__protobuf__MessageFactory, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_GetMessage" "', argument " "4"" of type '" "google::protobuf::MessageFactory *""'"); 
  }
  arg4 = (google::protobuf::MessageFactory *)(argp4);
  result = (google::protobuf::Message *) &((google::protobuf::Reflection const *)arg1)->GetMessage((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetMessage__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetMessage" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetMessage" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetMessage" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetMessage" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = (google::protobuf::Message *) &((google::protobuf::Reflection const *)arg1)->GetMessage((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection__wrap_Reflection_GetMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Reflection_GetMessage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Reflection_GetMessage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Reflection_GetMessage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Reflection_GetMessage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function GetMessage.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetStringReference(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  string *arg4 = (string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  string *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetStringReference (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetStringReference" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetStringReference" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetStringReference" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetStringReference" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_GetStringReference" "', argument " "4"" of type '" "string *""'"); 
  }
  arg4 = (string *)(argp4);
  result = (string *) &((google::protobuf::Reflection const *)arg1)->GetStringReference((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetInt32(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::int32 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetInt32 (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetInt32" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetInt32" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetInt32" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_SetInt32" "', argument " "4"" of type '" "google::protobuf::int32""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_SetInt32" "', argument " "4"" of type '" "google::protobuf::int32""'");
    } else {
      arg4 = *((google::protobuf::int32 *)(argp4));
    }
  }
  ((google::protobuf::Reflection const *)arg1)->SetInt32(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetInt64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::int64 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetInt64 (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetInt64" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetInt64" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetInt64" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_SetInt64" "', argument " "4"" of type '" "google::protobuf::int64""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_SetInt64" "', argument " "4"" of type '" "google::protobuf::int64""'");
    } else {
      arg4 = *((google::protobuf::int64 *)(argp4));
    }
  }
  ((google::protobuf::Reflection const *)arg1)->SetInt64(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetUInt32(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::uint32 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetUInt32 (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetUInt32" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetUInt32" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetUInt32" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_SetUInt32" "', argument " "4"" of type '" "google::protobuf::uint32""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_SetUInt32" "', argument " "4"" of type '" "google::protobuf::uint32""'");
    } else {
      arg4 = *((google::protobuf::uint32 *)(argp4));
    }
  }
  ((google::protobuf::Reflection const *)arg1)->SetUInt32(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetUInt64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::uint64 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetUInt64 (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetUInt64" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetUInt64" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetUInt64" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_SetUInt64" "', argument " "4"" of type '" "google::protobuf::uint64""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_SetUInt64" "', argument " "4"" of type '" "google::protobuf::uint64""'");
    } else {
      arg4 = *((google::protobuf::uint64 *)(argp4));
    }
  }
  ((google::protobuf::Reflection const *)arg1)->SetUInt64(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetFloat(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetFloat (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetFloat" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetFloat" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetFloat" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetFloat" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ((google::protobuf::Reflection const *)arg1)->SetFloat(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetDouble(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetDouble (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetDouble" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetDouble" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetDouble" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetDouble" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  ((google::protobuf::Reflection const *)arg1)->SetDouble(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetBool(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetBool (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetBool" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetBool" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetBool" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetBool" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ((google::protobuf::Reflection const *)arg1)->SetBool(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetString (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetString" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetString" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetString" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_SetString" "', argument " "4"" of type '" "string const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_SetString" "', argument " "4"" of type '" "string const &""'"); 
  }
  arg4 = (string *)(argp4);
  ((google::protobuf::Reflection const *)arg1)->SetString(arg2,(google::protobuf::FieldDescriptor const *)arg3,(string const &)*arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetEnum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::EnumValueDescriptor *arg4 = (google::protobuf::EnumValueDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetEnum (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetEnum" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetEnum" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetEnum" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_google__protobuf__EnumValueDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_SetEnum" "', argument " "4"" of type '" "google::protobuf::EnumValueDescriptor const *""'"); 
  }
  arg4 = (google::protobuf::EnumValueDescriptor *)(argp4);
  ((google::protobuf::Reflection const *)arg1)->SetEnum(arg2,(google::protobuf::FieldDescriptor const *)arg3,(google::protobuf::EnumValueDescriptor const *)arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetEnumValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetEnumValue (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetEnumValue" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetEnumValue" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetEnumValue" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetEnumValue" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ((google::protobuf::Reflection const *)arg1)->SetEnumValue(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_MutableMessage__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::MessageFactory *arg4 = (google::protobuf::MessageFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_MutableMessage" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_MutableMessage" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_MutableMessage" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_google__protobuf__MessageFactory, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_MutableMessage" "', argument " "4"" of type '" "google::protobuf::MessageFactory *""'"); 
  }
  arg4 = (google::protobuf::MessageFactory *)(argp4);
  result = (google::protobuf::Message *)((google::protobuf::Reflection const *)arg1)->MutableMessage(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_MutableMessage__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_MutableMessage" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_MutableMessage" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_MutableMessage" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = (google::protobuf::Message *)((google::protobuf::Reflection const *)arg1)->MutableMessage(arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection__wrap_Reflection_MutableMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Reflection_MutableMessage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Reflection_MutableMessage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Reflection_MutableMessage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Reflection_MutableMessage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MutableMessage.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetAllocatedMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::Message *arg3 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg4 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetAllocatedMessage (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetAllocatedMessage" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetAllocatedMessage" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetAllocatedMessage" "', argument " "3"" of type '" "google::protobuf::Message *""'"); 
  }
  arg3 = (google::protobuf::Message *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_SetAllocatedMessage" "', argument " "4"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg4 = (google::protobuf::FieldDescriptor *)(argp4);
  ((google::protobuf::Reflection const *)arg1)->SetAllocatedMessage(arg2,arg3,(google::protobuf::FieldDescriptor const *)arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_ReleaseMessage__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::MessageFactory *arg4 = (google::protobuf::MessageFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_ReleaseMessage" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_ReleaseMessage" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_ReleaseMessage" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_google__protobuf__MessageFactory, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_ReleaseMessage" "', argument " "4"" of type '" "google::protobuf::MessageFactory *""'"); 
  }
  arg4 = (google::protobuf::MessageFactory *)(argp4);
  result = (google::protobuf::Message *)((google::protobuf::Reflection const *)arg1)->ReleaseMessage(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_ReleaseMessage__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_ReleaseMessage" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_ReleaseMessage" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_ReleaseMessage" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = (google::protobuf::Message *)((google::protobuf::Reflection const *)arg1)->ReleaseMessage(arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection__wrap_Reflection_ReleaseMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Reflection_ReleaseMessage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Reflection_ReleaseMessage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Reflection_ReleaseMessage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Reflection_ReleaseMessage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ReleaseMessage.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetRepeatedInt32(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  google::protobuf::int32 result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetRepeatedInt32 (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetRepeatedInt32" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetRepeatedInt32" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetRepeatedInt32" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetRepeatedInt32" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_GetRepeatedInt32" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = ((google::protobuf::Reflection const *)arg1)->GetRepeatedInt32((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj((new google::protobuf::int32((const google::protobuf::int32&)(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetRepeatedInt64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  google::protobuf::int64 result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetRepeatedInt64 (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetRepeatedInt64" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetRepeatedInt64" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetRepeatedInt64" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetRepeatedInt64" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_GetRepeatedInt64" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = ((google::protobuf::Reflection const *)arg1)->GetRepeatedInt64((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj((new google::protobuf::int64((const google::protobuf::int64&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetRepeatedUInt32(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  google::protobuf::uint32 result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetRepeatedUInt32 (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetRepeatedUInt32" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetRepeatedUInt32" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetRepeatedUInt32" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetRepeatedUInt32" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_GetRepeatedUInt32" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = ((google::protobuf::Reflection const *)arg1)->GetRepeatedUInt32((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj((new google::protobuf::uint32((const google::protobuf::uint32&)(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetRepeatedUInt64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  google::protobuf::uint64 result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetRepeatedUInt64 (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetRepeatedUInt64" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetRepeatedUInt64" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetRepeatedUInt64" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetRepeatedUInt64" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_GetRepeatedUInt64" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = ((google::protobuf::Reflection const *)arg1)->GetRepeatedUInt64((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj((new google::protobuf::uint64((const google::protobuf::uint64&)(result))), SWIGTYPE_p_uint64_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetRepeatedFloat(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetRepeatedFloat (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetRepeatedFloat" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetRepeatedFloat" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetRepeatedFloat" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetRepeatedFloat" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_GetRepeatedFloat" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (float)((google::protobuf::Reflection const *)arg1)->GetRepeatedFloat((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetRepeatedDouble(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetRepeatedDouble (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetRepeatedDouble" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetRepeatedDouble" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetRepeatedDouble" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetRepeatedDouble" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_GetRepeatedDouble" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (double)((google::protobuf::Reflection const *)arg1)->GetRepeatedDouble((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_From_double((double)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetRepeatedBool(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetRepeatedBool (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetRepeatedBool" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetRepeatedBool" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetRepeatedBool" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetRepeatedBool" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_GetRepeatedBool" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (bool)((google::protobuf::Reflection const *)arg1)->GetRepeatedBool((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetRepeatedString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  string result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetRepeatedString (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetRepeatedString" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetRepeatedString" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetRepeatedString" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetRepeatedString" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_GetRepeatedString" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = ((google::protobuf::Reflection const *)arg1)->GetRepeatedString((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetRepeatedEnum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  google::protobuf::EnumValueDescriptor *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetRepeatedEnum (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetRepeatedEnum" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetRepeatedEnum" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetRepeatedEnum" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetRepeatedEnum" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_GetRepeatedEnum" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (google::protobuf::EnumValueDescriptor *)((google::protobuf::Reflection const *)arg1)->GetRepeatedEnum((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__EnumValueDescriptor, 0 |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetRepeatedEnumValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetRepeatedEnumValue (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetRepeatedEnumValue" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetRepeatedEnumValue" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetRepeatedEnumValue" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetRepeatedEnumValue" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_GetRepeatedEnumValue" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (int)((google::protobuf::Reflection const *)arg1)->GetRepeatedEnumValue((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetRepeatedMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetRepeatedMessage (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetRepeatedMessage" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetRepeatedMessage" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetRepeatedMessage" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetRepeatedMessage" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_GetRepeatedMessage" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (google::protobuf::Message *) &((google::protobuf::Reflection const *)arg1)->GetRepeatedMessage((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetRepeatedStringReference(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  string *arg5 = (string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  string *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetRepeatedStringReference (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetRepeatedStringReference" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_GetRepeatedStringReference" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_GetRepeatedStringReference" "', argument " "2"" of type '" "google::protobuf::Message const &""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_GetRepeatedStringReference" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_GetRepeatedStringReference" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  res5 = SWIG_ConvertPtr(args[3], &argp5,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Reflection_GetRepeatedStringReference" "', argument " "5"" of type '" "string *""'"); 
  }
  arg5 = (string *)(argp5);
  result = (string *) &((google::protobuf::Reflection const *)arg1)->GetRepeatedStringReference((google::protobuf::Message const &)*arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetRepeatedInt32(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  google::protobuf::int32 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetRepeatedInt32 (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetRepeatedInt32" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetRepeatedInt32" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetRepeatedInt32" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetRepeatedInt32" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Reflection_SetRepeatedInt32" "', argument " "5"" of type '" "google::protobuf::int32""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_SetRepeatedInt32" "', argument " "5"" of type '" "google::protobuf::int32""'");
    } else {
      arg5 = *((google::protobuf::int32 *)(argp5));
    }
  }
  ((google::protobuf::Reflection const *)arg1)->SetRepeatedInt32(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetRepeatedInt64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  google::protobuf::int64 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetRepeatedInt64 (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetRepeatedInt64" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetRepeatedInt64" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetRepeatedInt64" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetRepeatedInt64" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Reflection_SetRepeatedInt64" "', argument " "5"" of type '" "google::protobuf::int64""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_SetRepeatedInt64" "', argument " "5"" of type '" "google::protobuf::int64""'");
    } else {
      arg5 = *((google::protobuf::int64 *)(argp5));
    }
  }
  ((google::protobuf::Reflection const *)arg1)->SetRepeatedInt64(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetRepeatedUInt32(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  google::protobuf::uint32 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetRepeatedUInt32 (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetRepeatedUInt32" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetRepeatedUInt32" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetRepeatedUInt32" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetRepeatedUInt32" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Reflection_SetRepeatedUInt32" "', argument " "5"" of type '" "google::protobuf::uint32""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_SetRepeatedUInt32" "', argument " "5"" of type '" "google::protobuf::uint32""'");
    } else {
      arg5 = *((google::protobuf::uint32 *)(argp5));
    }
  }
  ((google::protobuf::Reflection const *)arg1)->SetRepeatedUInt32(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetRepeatedUInt64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  google::protobuf::uint64 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetRepeatedUInt64 (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetRepeatedUInt64" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetRepeatedUInt64" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetRepeatedUInt64" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetRepeatedUInt64" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Reflection_SetRepeatedUInt64" "', argument " "5"" of type '" "google::protobuf::uint64""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_SetRepeatedUInt64" "', argument " "5"" of type '" "google::protobuf::uint64""'");
    } else {
      arg5 = *((google::protobuf::uint64 *)(argp5));
    }
  }
  ((google::protobuf::Reflection const *)arg1)->SetRepeatedUInt64(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetRepeatedFloat(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetRepeatedFloat (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetRepeatedFloat" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetRepeatedFloat" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetRepeatedFloat" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetRepeatedFloat" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Reflection_SetRepeatedFloat" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ((google::protobuf::Reflection const *)arg1)->SetRepeatedFloat(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetRepeatedDouble(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetRepeatedDouble (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetRepeatedDouble" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetRepeatedDouble" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetRepeatedDouble" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetRepeatedDouble" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_double(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Reflection_SetRepeatedDouble" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = (double)(val5);
  ((google::protobuf::Reflection const *)arg1)->SetRepeatedDouble(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetRepeatedBool(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetRepeatedBool (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetRepeatedBool" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetRepeatedBool" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetRepeatedBool" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetRepeatedBool" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_bool(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Reflection_SetRepeatedBool" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  ((google::protobuf::Reflection const *)arg1)->SetRepeatedBool(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetRepeatedString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetRepeatedString (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetRepeatedString" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetRepeatedString" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetRepeatedString" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetRepeatedString" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Reflection_SetRepeatedString" "', argument " "5"" of type '" "string const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_SetRepeatedString" "', argument " "5"" of type '" "string const &""'"); 
  }
  arg5 = (string *)(argp5);
  ((google::protobuf::Reflection const *)arg1)->SetRepeatedString(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4,(string const &)*arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetRepeatedEnum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  google::protobuf::EnumValueDescriptor *arg5 = (google::protobuf::EnumValueDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetRepeatedEnum (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetRepeatedEnum" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetRepeatedEnum" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetRepeatedEnum" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetRepeatedEnum" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  res5 = SWIG_ConvertPtr(args[3], &argp5,SWIGTYPE_p_google__protobuf__EnumValueDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Reflection_SetRepeatedEnum" "', argument " "5"" of type '" "google::protobuf::EnumValueDescriptor const *""'"); 
  }
  arg5 = (google::protobuf::EnumValueDescriptor *)(argp5);
  ((google::protobuf::Reflection const *)arg1)->SetRepeatedEnum(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4,(google::protobuf::EnumValueDescriptor const *)arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SetRepeatedEnumValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SetRepeatedEnumValue (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SetRepeatedEnumValue" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_SetRepeatedEnumValue" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_SetRepeatedEnumValue" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_SetRepeatedEnumValue" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Reflection_SetRepeatedEnumValue" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  ((google::protobuf::Reflection const *)arg1)->SetRepeatedEnumValue(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_MutableRepeatedMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_MutableRepeatedMessage (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_MutableRepeatedMessage" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_MutableRepeatedMessage" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_MutableRepeatedMessage" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_MutableRepeatedMessage" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (google::protobuf::Message *)((google::protobuf::Reflection const *)arg1)->MutableRepeatedMessage(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddInt32(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::int32 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_AddInt32 (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddInt32" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddInt32" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddInt32" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_AddInt32" "', argument " "4"" of type '" "google::protobuf::int32""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_AddInt32" "', argument " "4"" of type '" "google::protobuf::int32""'");
    } else {
      arg4 = *((google::protobuf::int32 *)(argp4));
    }
  }
  ((google::protobuf::Reflection const *)arg1)->AddInt32(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddInt64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::int64 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_AddInt64 (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddInt64" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddInt64" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddInt64" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_AddInt64" "', argument " "4"" of type '" "google::protobuf::int64""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_AddInt64" "', argument " "4"" of type '" "google::protobuf::int64""'");
    } else {
      arg4 = *((google::protobuf::int64 *)(argp4));
    }
  }
  ((google::protobuf::Reflection const *)arg1)->AddInt64(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddUInt32(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::uint32 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_AddUInt32 (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddUInt32" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddUInt32" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddUInt32" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_AddUInt32" "', argument " "4"" of type '" "google::protobuf::uint32""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_AddUInt32" "', argument " "4"" of type '" "google::protobuf::uint32""'");
    } else {
      arg4 = *((google::protobuf::uint32 *)(argp4));
    }
  }
  ((google::protobuf::Reflection const *)arg1)->AddUInt32(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddUInt64(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::uint64 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_AddUInt64 (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddUInt64" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddUInt64" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddUInt64" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_uint64_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_AddUInt64" "', argument " "4"" of type '" "google::protobuf::uint64""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_AddUInt64" "', argument " "4"" of type '" "google::protobuf::uint64""'");
    } else {
      arg4 = *((google::protobuf::uint64 *)(argp4));
    }
  }
  ((google::protobuf::Reflection const *)arg1)->AddUInt64(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddFloat(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_AddFloat (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddFloat" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddFloat" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddFloat" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_AddFloat" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ((google::protobuf::Reflection const *)arg1)->AddFloat(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddDouble(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_AddDouble (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddDouble" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddDouble" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddDouble" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_AddDouble" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = (double)(val4);
  ((google::protobuf::Reflection const *)arg1)->AddDouble(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddBool(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_AddBool (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddBool" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddBool" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddBool" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_bool(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_AddBool" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  ((google::protobuf::Reflection const *)arg1)->AddBool(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_AddString (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddString" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddString" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddString" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_AddString" "', argument " "4"" of type '" "string const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_AddString" "', argument " "4"" of type '" "string const &""'"); 
  }
  arg4 = (string *)(argp4);
  ((google::protobuf::Reflection const *)arg1)->AddString(arg2,(google::protobuf::FieldDescriptor const *)arg3,(string const &)*arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddEnum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::EnumValueDescriptor *arg4 = (google::protobuf::EnumValueDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_AddEnum (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddEnum" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddEnum" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddEnum" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_google__protobuf__EnumValueDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_AddEnum" "', argument " "4"" of type '" "google::protobuf::EnumValueDescriptor const *""'"); 
  }
  arg4 = (google::protobuf::EnumValueDescriptor *)(argp4);
  ((google::protobuf::Reflection const *)arg1)->AddEnum(arg2,(google::protobuf::FieldDescriptor const *)arg3,(google::protobuf::EnumValueDescriptor const *)arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddEnumValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_AddEnumValue (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddEnumValue" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddEnumValue" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddEnumValue" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reflection_AddEnumValue" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  ((google::protobuf::Reflection const *)arg1)->AddEnumValue(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddMessage__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::MessageFactory *arg4 = (google::protobuf::MessageFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddMessage" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddMessage" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddMessage" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_google__protobuf__MessageFactory, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_AddMessage" "', argument " "4"" of type '" "google::protobuf::MessageFactory *""'"); 
  }
  arg4 = (google::protobuf::MessageFactory *)(argp4);
  result = (google::protobuf::Message *)((google::protobuf::Reflection const *)arg1)->AddMessage(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddMessage__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddMessage" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddMessage" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddMessage" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  result = (google::protobuf::Message *)((google::protobuf::Reflection const *)arg1)->AddMessage(arg2,(google::protobuf::FieldDescriptor const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection__wrap_Reflection_AddMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Reflection_AddMessage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Reflection_AddMessage__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Reflection_AddMessage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Reflection_AddMessage__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function AddMessage.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_AddAllocatedMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  google::protobuf::FieldDescriptor *arg3 = (google::protobuf::FieldDescriptor *) 0 ;
  google::protobuf::Message *arg4 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_AddAllocatedMessage (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_AddAllocatedMessage" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_AddAllocatedMessage" "', argument " "2"" of type '" "google::protobuf::Message *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Reflection_AddAllocatedMessage" "', argument " "3"" of type '" "google::protobuf::FieldDescriptor const *""'"); 
  }
  arg3 = (google::protobuf::FieldDescriptor *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Reflection_AddAllocatedMessage" "', argument " "4"" of type '" "google::protobuf::Message *""'"); 
  }
  arg4 = (google::protobuf::Message *)(argp4);
  ((google::protobuf::Reflection const *)arg1)->AddAllocatedMessage(arg2,(google::protobuf::FieldDescriptor const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_FindKnownExtensionByName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  google::protobuf::FieldDescriptor *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_FindKnownExtensionByName (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_FindKnownExtensionByName" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reflection_FindKnownExtensionByName" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reflection_FindKnownExtensionByName" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  result = (google::protobuf::FieldDescriptor *)((google::protobuf::Reflection const *)arg1)->FindKnownExtensionByName((string const &)*arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_FindKnownExtensionByNumber(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  google::protobuf::FieldDescriptor *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_FindKnownExtensionByNumber (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_FindKnownExtensionByNumber" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Reflection_FindKnownExtensionByNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (google::protobuf::FieldDescriptor *)((google::protobuf::Reflection const *)arg1)->FindKnownExtensionByNumber(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__FieldDescriptor, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_SupportsUnknownEnumValues(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_SupportsUnknownEnumValues (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_SupportsUnknownEnumValues" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  result = (bool)((google::protobuf::Reflection const *)arg1)->SupportsUnknownEnumValues();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reflection_GetMessageFactory(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Reflection *arg1 = (google::protobuf::Reflection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  google::protobuf::MessageFactory *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reflection_GetMessageFactory (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__Reflection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reflection_GetMessageFactory" "', argument " "1"" of type '" "google::protobuf::Reflection const *""'"); 
  }
  arg1 = (google::protobuf::Reflection *)(argp1);
  result = (google::protobuf::MessageFactory *)((google::protobuf::Reflection const *)arg1)->GetMessageFactory();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__MessageFactory, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_Reflection(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Reflection can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_MessageFactory(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_MessageFactory(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_MessageFactory(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_MessageFactory(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          google::protobuf::MessageFactory * arg1 = (google::protobuf::MessageFactory *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_MessageFactory_GetPrototype(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageFactory *arg1 = (google::protobuf::MessageFactory *) 0 ;
  google::protobuf::Descriptor *arg2 = (google::protobuf::Descriptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  google::protobuf::Message *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageFactory_GetPrototype (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_google__protobuf__MessageFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageFactory_GetPrototype" "', argument " "1"" of type '" "google::protobuf::MessageFactory *""'"); 
  }
  arg1 = (google::protobuf::MessageFactory *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageFactory_GetPrototype" "', argument " "2"" of type '" "google::protobuf::Descriptor const *""'"); 
  }
  arg2 = (google::protobuf::Descriptor *)(argp2);
  result = (google::protobuf::Message *)(arg1)->GetPrototype((google::protobuf::Descriptor const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageFactory_generated_factory(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::MessageFactory *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageFactory_generated_factory (should be 0)");
  
  result = (google::protobuf::MessageFactory *)google::protobuf::MessageFactory::generated_factory();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__MessageFactory, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageFactory_InternalRegisterGeneratedFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  void (*arg2)(string const &) = (void (*)(string const &)) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageFactory_InternalRegisterGeneratedFile (should be 2)");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageFactory_InternalRegisterGeneratedFile" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_r_q_const__string__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MessageFactory_InternalRegisterGeneratedFile" "', argument " "2"" of type '" "void (*)(string const &)""'"); 
    }
  }
  google::protobuf::MessageFactory::InternalRegisterGeneratedFile((char const *)arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MessageFactory_InternalRegisterGeneratedMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  google::protobuf::Descriptor *arg1 = (google::protobuf::Descriptor *) 0 ;
  google::protobuf::Message *arg2 = (google::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MessageFactory_InternalRegisterGeneratedMessage (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageFactory_InternalRegisterGeneratedMessage" "', argument " "1"" of type '" "google::protobuf::Descriptor const *""'"); 
  }
  arg1 = (google::protobuf::Descriptor *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_google__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageFactory_InternalRegisterGeneratedMessage" "', argument " "2"" of type '" "google::protobuf::Message const *""'"); 
  }
  arg2 = (google::protobuf::Message *)(argp2);
  google::protobuf::MessageFactory::InternalRegisterGeneratedMessage((google::protobuf::Descriptor const *)arg1,(google::protobuf::Message const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_MessageFactory(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class MessageFactory can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_Version(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_Version (should be 0)");
  
  result = (char *)TF_Version();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_FLOAT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_FLOAT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_DOUBLE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_DOUBLE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_INT32(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_INT32));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_UINT8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_UINT8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_INT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_INT16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_INT8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_INT8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_STRING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_STRING));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_COMPLEX64(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_COMPLEX64));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_COMPLEX(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_COMPLEX));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_INT64(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_INT64));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_BOOL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_BOOL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_QINT8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_QINT8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_QUINT8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_QUINT8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_QINT32(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_QINT32));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_BFLOAT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_BFLOAT16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_QINT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_QINT16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_QUINT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_QUINT16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_UINT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_UINT16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_COMPLEX128(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_COMPLEX128));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_HALF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_HALF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_RESOURCE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_RESOURCE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_OK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_OK));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_CANCELLED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_CANCELLED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_UNKNOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_UNKNOWN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_INVALID_ARGUMENT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_INVALID_ARGUMENT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_DEADLINE_EXCEEDED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_DEADLINE_EXCEEDED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_NOT_FOUND(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_NOT_FOUND));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_ALREADY_EXISTS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_ALREADY_EXISTS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_PERMISSION_DENIED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_PERMISSION_DENIED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_UNAUTHENTICATED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_UNAUTHENTICATED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_RESOURCE_EXHAUSTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_RESOURCE_EXHAUSTED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_FAILED_PRECONDITION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_FAILED_PRECONDITION));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_ABORTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_ABORTED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_OUT_OF_RANGE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_OUT_OF_RANGE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_UNIMPLEMENTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_UNIMPLEMENTED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_INTERNAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_INTERNAL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_UNAVAILABLE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_UNAVAILABLE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_DATA_LOSS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_DATA_LOSS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_NewStatus(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Status *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_NewStatus (should be 0)");
  
  result = (TF_Status *)TF_NewStatus();
  {
    if (!SWIG_IsOK(result)) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(result));
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_DeleteStatus(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Status *arg1 = (TF_Status *) 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_DeleteStatus (should be 0)");
  
  {
    arg1 = TF_NewStatus();
  }
  TF_DeleteStatus(arg1);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg1) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg1));
    }
  }
  {
    TF_DeleteStatus(arg1);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetStatus(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Status *arg1 = (TF_Status *) 0 ;
  TF_Code arg2 ;
  char *arg3 = (char *) 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetStatus (should be 2)");
  
  {
    arg1 = TF_NewStatus();
  }
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_SetStatus" "', argument " "2"" of type '" "TF_Code""'");
  } 
  arg2 = (TF_Code)(val2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetStatus" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  TF_SetStatus(arg1,arg2,(char const *)arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg1) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg1));
    }
  }
  {
    TF_DeleteStatus(arg1);
  }
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_GetCode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Status *arg1 = (TF_Status *) 0 ;
  TF_Code result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_GetCode (should be 0)");
  
  {
    arg1 = TF_NewStatus();
  }
  result = (TF_Code)TF_GetCode((TF_Status const *)arg1);
  jsresult = SWIG_From_int((int)(result));
  {
    if (TF_GetCode(arg1) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg1));
    }
  }
  {
    TF_DeleteStatus(arg1);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_Message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Status *arg1 = (TF_Status *) 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_Message (should be 0)");
  
  {
    arg1 = TF_NewStatus();
  }
  result = (char *)TF_Message((TF_Status const *)arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  {
    if (TF_GetCode(arg1) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg1));
    }
  }
  {
    TF_DeleteStatus(arg1);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_TF_Buffer_data_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Buffer *arg1 = (TF_Buffer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Buffer_data_set" "', argument " "1"" of type '" "TF_Buffer *""'"); 
  }
  arg1 = (TF_Buffer *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Buffer_data_set" "', argument " "2"" of type '" "void const *""'"); 
  }
  if (arg1) (arg1)->data = (void const *)arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Buffer_data_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Buffer *arg1 = (TF_Buffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Buffer_data_get" "', argument " "1"" of type '" "TF_Buffer *""'"); 
  }
  arg1 = (TF_Buffer *)(argp1);
  result = (void *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_Buffer_length_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Buffer *arg1 = (TF_Buffer *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Buffer_length_set" "', argument " "1"" of type '" "TF_Buffer *""'"); 
  }
  arg1 = (TF_Buffer *)(argp1);
  ecode2 = SWIG_AsVal_size_t(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_Buffer_length_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  if (arg1) (arg1)->length = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Buffer_length_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Buffer *arg1 = (TF_Buffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Buffer_length_get" "', argument " "1"" of type '" "TF_Buffer *""'"); 
  }
  arg1 = (TF_Buffer *)(argp1);
  result =  ((arg1)->length);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_Buffer_data_deallocator_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Buffer *arg1 = (TF_Buffer *) 0 ;
  void (*arg2)(void *,size_t) = (void (*)(void *,size_t)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Buffer_data_deallocator_set" "', argument " "1"" of type '" "TF_Buffer *""'"); 
  }
  arg1 = (TF_Buffer *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_void_size_t__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "TF_Buffer_data_deallocator_set" "', argument " "2"" of type '" "void (*)(void *,size_t)""'"); 
    }
  }
  if (arg1) (arg1)->data_deallocator = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Buffer_data_deallocator_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Buffer *arg1 = (TF_Buffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void (*result)(void *,size_t) = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Buffer_data_deallocator_get" "', argument " "1"" of type '" "TF_Buffer *""'"); 
  }
  arg1 = (TF_Buffer *)(argp1);
  result = (void (*)(void *,size_t)) ((arg1)->data_deallocator);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_void_size_t__void);
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_TF_Buffer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_Buffer *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_Buffer (should be 0)");
  result = (TF_Buffer *)new TF_Buffer();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_Buffer, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_Buffer(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_Buffer(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_Buffer(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_Buffer(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_Buffer * arg1 = (TF_Buffer *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_TF_NewBufferFromString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  int res1 ;
  size_t val2 ;
  int ecode2 = 0 ;
  TF_Buffer *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_NewBufferFromString (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_NewBufferFromString" "', argument " "1"" of type '" "void const *""'"); 
  }
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_NewBufferFromString" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (TF_Buffer *)TF_NewBufferFromString((void const *)arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Buffer, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_NewBuffer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Buffer *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_NewBuffer (should be 0)");
  
  result = (TF_Buffer *)TF_NewBuffer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Buffer, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_DeleteBuffer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Buffer *arg1 = (TF_Buffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_DeleteBuffer (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_DeleteBuffer" "', argument " "1"" of type '" "TF_Buffer *""'"); 
  }
  arg1 = (TF_Buffer *)(argp1);
  TF_DeleteBuffer(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_GetBuffer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Buffer *arg1 = (TF_Buffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TF_Buffer result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_GetBuffer (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_GetBuffer" "', argument " "1"" of type '" "TF_Buffer *""'"); 
  }
  arg1 = (TF_Buffer *)(argp1);
  result = TF_GetBuffer(arg1);
  jsresult = SWIG_NewPointerObj((new TF_Buffer((const TF_Buffer&)(result))), SWIGTYPE_p_TF_Buffer, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_NewTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_DataType arg1 ;
  int64_t *arg2 = (int64_t *) 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  size_t arg5 ;
  void (*arg6)(void *,size_t,void *) = (void (*)(void *,size_t,void *)) 0 ;
  void *arg7 = (void *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  TF_Tensor *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_NewTensor (should be 2)");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TF_NewTensor" "', argument " "1"" of type '" "TF_DataType""'");
  } 
  arg1 = (TF_DataType)(val1);
  {
    v8::Local<v8::Array> array;
    v8::Local<v8::Value> jsvalue;
    int i = 0, res = 0;
    unsigned long long temp;
    
    if (args[1]->IsArray()) {
      array = v8::Local<v8::Array>::Cast(args[1]);
      
      arg3 = array->Length();
      arg2  = (int64_t *) malloc(sizeof(int64_t *) * arg3);
      
      // Get each element from array
      for (i = 0; i < arg3; i++) {
        jsvalue = array->Get(i);
        
        // Get primitive value from JSObject
        res = SWIG_AsVal_unsigned_SS_long_SS_long (jsvalue, &temp);
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ERROR, "Failed to convert args[1] to double");
        }
        
        arg2[i] = (int64_t) temp;
      }
    } else {
      SWIG_exception_fail(SWIG_ERROR, "args[1] is not an array");
    }
  }
  {
    int total = 0, length = arg3, i = 0;
    
    for (; i < length; i++) {
      total += arg2[i];
    }
    
    arg5 = total * sizeof(float);
    arg4 = reinterpret_cast<float*>(tensorflow::cpu_allocator()->AllocateRaw(
        EIGEN_MAX_ALIGN_BYTES, arg5));
  }
  {
    arg6 = &Deallocator;
  }
  {
    bool deallocator_called = false;
    arg7 = &deallocator_called;
  }
  result = (TF_Tensor *)TF_NewTensor(arg1,(int64_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Tensor, 0 |  0 );
  
  {
    free(arg2);
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_AllocateTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_DataType arg1 ;
  int64_t *arg2 = (int64_t *) 0 ;
  int arg3 ;
  size_t arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  TF_Tensor *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_AllocateTensor (should be 3)");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TF_AllocateTensor" "', argument " "1"" of type '" "TF_DataType""'");
  } 
  arg1 = (TF_DataType)(val1);
  {
    v8::Local<v8::Array> array;
    v8::Local<v8::Value> jsvalue;
    int i = 0, res = 0;
    unsigned long long temp;
    
    if (args[1]->IsArray()) {
      array = v8::Local<v8::Array>::Cast(args[1]);
      
      arg3 = array->Length();
      arg2  = (int64_t *) malloc(sizeof(int64_t *) * arg3);
      
      // Get each element from array
      for (i = 0; i < arg3; i++) {
        jsvalue = array->Get(i);
        
        // Get primitive value from JSObject
        res = SWIG_AsVal_unsigned_SS_long_SS_long (jsvalue, &temp);
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ERROR, "Failed to convert args[1] to double");
        }
        
        arg2[i] = (int64_t) temp;
      }
    } else {
      SWIG_exception_fail(SWIG_ERROR, "args[1] is not an array");
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_AllocateTensor" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  result = (TF_Tensor *)TF_AllocateTensor(arg1,(int64_t const *)arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Tensor, 0 |  0 );
  
  {
    free(arg2);
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_DeleteTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_DeleteTensor (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_DeleteTensor" "', argument " "1"" of type '" "TF_Tensor *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  TF_DeleteTensor(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_TensorType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TF_DataType result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_TensorType (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_TensorType" "', argument " "1"" of type '" "TF_Tensor const *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  result = (TF_DataType)TF_TensorType((TF_Tensor const *)arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_NumDims(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_NumDims (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_NumDims" "', argument " "1"" of type '" "TF_Tensor const *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  result = (int)TF_NumDims((TF_Tensor const *)arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_Dim(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int64_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_Dim (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Dim" "', argument " "1"" of type '" "TF_Tensor const *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_Dim" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = TF_Dim((TF_Tensor const *)arg1,arg2);
  jsresult = SWIG_NewPointerObj((new int64_t((const int64_t&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_TensorByteSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_TensorByteSize (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_TensorByteSize" "', argument " "1"" of type '" "TF_Tensor const *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  result = TF_TensorByteSize((TF_Tensor const *)arg1);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_TensorData(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_TensorData (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_TensorData" "', argument " "1"" of type '" "TF_Tensor const *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  result = (void *)TF_TensorData((TF_Tensor const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_StringEncode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_StringEncode (should be 4)");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_StringEncode" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_StringEncode" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_StringEncode" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = (char *)(buf3);
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_StringEncode" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  {
    arg5 = TF_NewStatus();
  }
  result = TF_StringEncode((char const *)arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_size_t((size_t)(result));
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_StringDecode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char **arg3 = (char **) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  size_t result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_StringDecode (should be 4)");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_StringDecode" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_StringDecode" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_StringDecode" "', argument " "3"" of type '" "char const **""'"); 
  }
  arg3 = (char **)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_StringDecode" "', argument " "4"" of type '" "size_t *""'"); 
  }
  arg4 = (size_t *)(argp4);
  {
    arg5 = TF_NewStatus();
  }
  result = TF_StringDecode((char const *)arg1,arg2,(char const **)arg3,arg4,arg5);
  jsresult = SWIG_From_size_t((size_t)(result));
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_StringEncodedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_StringEncodedSize (should be 1)");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TF_StringEncodedSize" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = (size_t)(val1);
  result = TF_StringEncodedSize(arg1);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_NewSessionOptions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_SessionOptions *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_NewSessionOptions (should be 0)");
  
  result = (TF_SessionOptions *)TF_NewSessionOptions();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_SessionOptions, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetTarget(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_SessionOptions *arg1 = (TF_SessionOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetTarget (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetTarget" "', argument " "1"" of type '" "TF_SessionOptions *""'"); 
  }
  arg1 = (TF_SessionOptions *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  TF_SetTarget(arg1,(char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetConfig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_SessionOptions *arg1 = (TF_SessionOptions *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  TF_Status *arg4 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetConfig (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetConfig" "', argument " "1"" of type '" "TF_SessionOptions *""'"); 
  }
  arg1 = (TF_SessionOptions *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetConfig" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TF_SetConfig" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  {
    arg4 = TF_NewStatus();
  }
  TF_SetConfig(arg1,(void const *)arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg4) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg4));
    }
  }
  
  
  
  {
    TF_DeleteStatus(arg4);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_DeleteSessionOptions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_SessionOptions *arg1 = (TF_SessionOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_DeleteSessionOptions (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_DeleteSessionOptions" "', argument " "1"" of type '" "TF_SessionOptions *""'"); 
  }
  arg1 = (TF_SessionOptions *)(argp1);
  TF_DeleteSessionOptions(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_NewGraph(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_NewGraph (should be 0)");
  
  result = (TF_Graph *)TF_NewGraph();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Graph, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_DeleteGraph(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_DeleteGraph (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_DeleteGraph" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  TF_DeleteGraph(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_TF_Input_oper_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Input *arg1 = (TF_Input *) 0 ;
  TF_Operation *arg2 = (TF_Operation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Input, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Input_oper_set" "', argument " "1"" of type '" "TF_Input *""'"); 
  }
  arg1 = (TF_Input *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_TF_Operation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Input_oper_set" "', argument " "2"" of type '" "TF_Operation *""'"); 
  }
  arg2 = (TF_Operation *)(argp2);
  if (arg1) (arg1)->oper = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Input_oper_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Input *arg1 = (TF_Input *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TF_Operation *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Input, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Input_oper_get" "', argument " "1"" of type '" "TF_Input *""'"); 
  }
  arg1 = (TF_Input *)(argp1);
  result = (TF_Operation *) ((arg1)->oper);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Operation, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_Input_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Input *arg1 = (TF_Input *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Input, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Input_index_set" "', argument " "1"" of type '" "TF_Input *""'"); 
  }
  arg1 = (TF_Input *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_Input_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Input_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Input *arg1 = (TF_Input *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Input, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Input_index_get" "', argument " "1"" of type '" "TF_Input *""'"); 
  }
  arg1 = (TF_Input *)(argp1);
  result = (int) ((arg1)->index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_TF_Input(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_Input *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_Input (should be 0)");
  result = (TF_Input *)new TF_Input();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_Input, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_Input(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_Input(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_Input(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_Input(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_Input * arg1 = (TF_Input *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_TF_Output_oper_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Output *arg1 = (TF_Output *) 0 ;
  TF_Operation *arg2 = (TF_Operation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Output, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Output_oper_set" "', argument " "1"" of type '" "TF_Output *""'"); 
  }
  arg1 = (TF_Output *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_TF_Operation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Output_oper_set" "', argument " "2"" of type '" "TF_Operation *""'"); 
  }
  arg2 = (TF_Operation *)(argp2);
  if (arg1) (arg1)->oper = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Output_oper_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Output *arg1 = (TF_Output *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TF_Operation *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Output, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Output_oper_get" "', argument " "1"" of type '" "TF_Output *""'"); 
  }
  arg1 = (TF_Output *)(argp1);
  result = (TF_Operation *) ((arg1)->oper);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Operation, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_Output_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Output *arg1 = (TF_Output *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Output, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Output_index_set" "', argument " "1"" of type '" "TF_Output *""'"); 
  }
  arg1 = (TF_Output *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_Output_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Output_index_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Output *arg1 = (TF_Output *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Output, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Output_index_get" "', argument " "1"" of type '" "TF_Output *""'"); 
  }
  arg1 = (TF_Output *)(argp1);
  result = (int) ((arg1)->index);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_TF_Output(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_Output *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_Output (should be 0)");
  result = (TF_Output *)new TF_Output();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_Output, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_Output(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_Output(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_Output(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_Output(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_Output * arg1 = (TF_Output *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_TF_GraphSetTensorShape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  TF_Output arg2 ;
  int64_t *arg3 = (int64_t *) 0 ;
  int arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_GraphSetTensorShape (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_GraphSetTensorShape" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_TF_Output,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_GraphSetTensorShape" "', argument " "2"" of type '" "TF_Output""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_GraphSetTensorShape" "', argument " "2"" of type '" "TF_Output""'");
    } else {
      arg2 = *((TF_Output *)(argp2));
    }
  }
  {
    v8::Local<v8::Array> array;
    v8::Local<v8::Value> jsvalue;
    int i = 0, res = 0;
    unsigned long long temp;
    
    if (args[2]->IsArray()) {
      array = v8::Local<v8::Array>::Cast(args[2]);
      
      arg4 = array->Length();
      arg3  = (int64_t *) malloc(sizeof(int64_t *) * arg4);
      
      // Get each element from array
      for (i = 0; i < arg4; i++) {
        jsvalue = array->Get(i);
        
        // Get primitive value from JSObject
        res = SWIG_AsVal_unsigned_SS_long_SS_long (jsvalue, &temp);
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ERROR, "Failed to convert args[2] to double");
        }
        
        arg3[i] = (int64_t) temp;
      }
    } else {
      SWIG_exception_fail(SWIG_ERROR, "args[2] is not an array");
    }
  }
  {
    arg5 = TF_NewStatus();
  }
  TF_GraphSetTensorShape(arg1,arg2,(int64_t const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  {
    free(arg3);
  }
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_GraphGetTensorNumDims(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  TF_Output arg2 ;
  TF_Status *arg3 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_GraphGetTensorNumDims (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_GraphGetTensorNumDims" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_TF_Output,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_GraphGetTensorNumDims" "', argument " "2"" of type '" "TF_Output""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_GraphGetTensorNumDims" "', argument " "2"" of type '" "TF_Output""'");
    } else {
      arg2 = *((TF_Output *)(argp2));
    }
  }
  {
    arg3 = TF_NewStatus();
  }
  result = (int)TF_GraphGetTensorNumDims(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  {
    if (TF_GetCode(arg3) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg3));
    }
  }
  
  {
    TF_DeleteStatus(arg3);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_GraphGetTensorShape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  TF_Output arg2 ;
  int64_t *arg3 = (int64_t *) 0 ;
  int arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_GraphGetTensorShape (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_GraphGetTensorShape" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_TF_Output,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_GraphGetTensorShape" "', argument " "2"" of type '" "TF_Output""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_GraphGetTensorShape" "', argument " "2"" of type '" "TF_Output""'");
    } else {
      arg2 = *((TF_Output *)(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_int64_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_GraphGetTensorShape" "', argument " "3"" of type '" "int64_t *""'"); 
  }
  arg3 = (int64_t *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_GraphGetTensorShape" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    arg5 = TF_NewStatus();
  }
  TF_GraphGetTensorShape(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_NewOperation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  TF_OperationDescription *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_NewOperation (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_NewOperation" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_NewOperation" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_NewOperation" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (TF_OperationDescription *)TF_NewOperation(arg1,(char const *)arg2,(char const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetDevice(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetDevice (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetDevice" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  TF_SetDevice(arg1,(char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_AddInput(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  TF_Output arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_AddInput (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_AddInput" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_TF_Output,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_AddInput" "', argument " "2"" of type '" "TF_Output""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_AddInput" "', argument " "2"" of type '" "TF_Output""'");
    } else {
      arg2 = *((TF_Output *)(argp2));
    }
  }
  TF_AddInput(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_AddInputList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  TF_Output *arg2 = (TF_Output *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_AddInputList (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_AddInputList" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_TF_Output, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_AddInputList" "', argument " "2"" of type '" "TF_Output const *""'"); 
  }
  arg2 = (TF_Output *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TF_AddInputList" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  TF_AddInputList(arg1,(TF_Output const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_AddControlInput(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  TF_Operation *arg2 = (TF_Operation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_AddControlInput (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_AddControlInput" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_AddControlInput" "', argument " "2"" of type '" "TF_Operation *""'"); 
  }
  arg2 = (TF_Operation *)(argp2);
  TF_AddControlInput(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_ColocateWith(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  TF_Operation *arg2 = (TF_Operation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_ColocateWith (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_ColocateWith" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_ColocateWith" "', argument " "2"" of type '" "TF_Operation *""'"); 
  }
  arg2 = (TF_Operation *)(argp2);
  TF_ColocateWith(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrString (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrString" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrString" "', argument " "3"" of type '" "void const *""'"); 
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_SetAttrString" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  TF_SetAttrString(arg1,(char const *)arg2,(void const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrStringList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  void **arg3 = (void **) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrStringList (should be 5)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrStringList" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrStringList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrStringList" "', argument " "3"" of type '" "void const *const *""'"); 
  }
  arg3 = (void **)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_SetAttrStringList" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = (size_t *)(argp4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TF_SetAttrStringList" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  TF_SetAttrStringList(arg1,(char const *)arg2,(void const *const *)arg3,(size_t const *)arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrInt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrInt (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrInt" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrInt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrInt" "', argument " "3"" of type '" "int64_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_SetAttrInt" "', argument " "3"" of type '" "int64_t""'");
    } else {
      arg3 = *((int64_t *)(argp3));
    }
  }
  TF_SetAttrInt(arg1,(char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrIntList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t *arg3 = (int64_t *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrIntList (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrIntList" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrIntList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_int64_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrIntList" "', argument " "3"" of type '" "int64_t const *""'"); 
  }
  arg3 = (int64_t *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_SetAttrIntList" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  TF_SetAttrIntList(arg1,(char const *)arg2,(int64_t const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrFloat(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrFloat (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrFloat" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrFloat" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TF_SetAttrFloat" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  TF_SetAttrFloat(arg1,(char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrFloatList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrFloatList (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrFloatList" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrFloatList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrFloatList" "', argument " "3"" of type '" "float const *""'"); 
  }
  arg3 = (float *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_SetAttrFloatList" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  TF_SetAttrFloatList(arg1,(char const *)arg2,(float const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrBool(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrBool (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrBool" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrBool" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TF_SetAttrBool" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = (unsigned char)(val3);
  TF_SetAttrBool(arg1,(char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrBoolList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrBoolList (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrBoolList" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrBoolList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrBoolList" "', argument " "3"" of type '" "unsigned char const *""'"); 
  }
  arg3 = (unsigned char *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_SetAttrBoolList" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  TF_SetAttrBoolList(arg1,(char const *)arg2,(unsigned char const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_DataType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrType (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrType" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrType" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TF_SetAttrType" "', argument " "3"" of type '" "TF_DataType""'");
  } 
  arg3 = (TF_DataType)(val3);
  TF_SetAttrType(arg1,(char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrTypeList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_DataType *arg3 = (TF_DataType *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrTypeList (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrTypeList" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrTypeList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_TF_DataType, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrTypeList" "', argument " "3"" of type '" "TF_DataType const *""'"); 
  }
  arg3 = (TF_DataType *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_SetAttrTypeList" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  TF_SetAttrTypeList(arg1,(char const *)arg2,(TF_DataType const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrShape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t *arg3 = (int64_t *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrShape (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrShape" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrShape" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  {
    v8::Local<v8::Array> array;
    v8::Local<v8::Value> jsvalue;
    int i = 0, res = 0;
    unsigned long long temp;
    
    if (args[2]->IsArray()) {
      array = v8::Local<v8::Array>::Cast(args[2]);
      
      arg4 = array->Length();
      arg3  = (int64_t *) malloc(sizeof(int64_t *) * arg4);
      
      // Get each element from array
      for (i = 0; i < arg4; i++) {
        jsvalue = array->Get(i);
        
        // Get primitive value from JSObject
        res = SWIG_AsVal_unsigned_SS_long_SS_long (jsvalue, &temp);
        if (!SWIG_IsOK(res)) {
          SWIG_exception_fail(SWIG_ERROR, "Failed to convert args[2] to double");
        }
        
        arg3[i] = (int64_t) temp;
      }
    } else {
      SWIG_exception_fail(SWIG_ERROR, "args[2] is not an array");
    }
  }
  TF_SetAttrShape(arg1,(char const *)arg2,(int64_t const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    free(arg3);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrShapeList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t **arg3 = (int64_t **) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrShapeList (should be 5)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrShapeList" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrShapeList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_int64_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrShapeList" "', argument " "3"" of type '" "int64_t const *const *""'"); 
  }
  arg3 = (int64_t **)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_SetAttrShapeList" "', argument " "4"" of type '" "int const *""'"); 
  }
  arg4 = (int *)(argp4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TF_SetAttrShapeList" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  TF_SetAttrShapeList(arg1,(char const *)arg2,(int64_t const *const *)arg3,(int const *)arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrTensorShapeProto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrTensorShapeProto (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrTensorShapeProto" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrTensorShapeProto" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrTensorShapeProto" "', argument " "3"" of type '" "void const *""'"); 
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_SetAttrTensorShapeProto" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  {
    arg5 = TF_NewStatus();
  }
  TF_SetAttrTensorShapeProto(arg1,(char const *)arg2,(void const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrTensorShapeProtoList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  void **arg3 = (void **) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  int arg5 ;
  TF_Status *arg6 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrTensorShapeProtoList (should be 5)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrTensorShapeProtoList" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrTensorShapeProtoList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrTensorShapeProtoList" "', argument " "3"" of type '" "void const *const *""'"); 
  }
  arg3 = (void **)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_SetAttrTensorShapeProtoList" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = (size_t *)(argp4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TF_SetAttrTensorShapeProtoList" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  {
    arg6 = TF_NewStatus();
  }
  TF_SetAttrTensorShapeProtoList(arg1,(char const *)arg2,(void const *const *)arg3,(size_t const *)arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg6) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg6));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  {
    TF_DeleteStatus(arg6);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_Tensor *arg3 = (TF_Tensor *) 0 ;
  TF_Status *arg4 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrTensor (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrTensor" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrTensor" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrTensor" "', argument " "3"" of type '" "TF_Tensor *""'"); 
  }
  arg3 = (TF_Tensor *)(argp3);
  {
    arg4 = TF_NewStatus();
  }
  TF_SetAttrTensor(arg1,(char const *)arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg4) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg4));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  {
    TF_DeleteStatus(arg4);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrTensorList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_Tensor **arg3 = (TF_Tensor **) 0 ;
  int arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrTensorList (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrTensorList" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrTensorList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrTensorList" "', argument " "3"" of type '" "TF_Tensor *const *""'"); 
  }
  arg3 = (TF_Tensor **)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_SetAttrTensorList" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    arg5 = TF_NewStatus();
  }
  TF_SetAttrTensorList(arg1,(char const *)arg2,(TF_Tensor *const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SetAttrValueProto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SetAttrValueProto (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SetAttrValueProto" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SetAttrValueProto" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SetAttrValueProto" "', argument " "3"" of type '" "void const *""'"); 
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_SetAttrValueProto" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  {
    arg5 = TF_NewStatus();
  }
  TF_SetAttrValueProto(arg1,(char const *)arg2,(void const *)arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_FinishOperation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  TF_Status *arg2 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TF_Operation *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_FinishOperation (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_FinishOperation" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  {
    arg2 = TF_NewStatus();
  }
  result = (TF_Operation *)TF_FinishOperation(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Operation, 0 |  0 );
  {
    if (TF_GetCode(arg2) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg2));
    }
  }
  
  {
    TF_DeleteStatus(arg2);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationName (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationName" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  result = (char *)TF_OperationName(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationOpType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationOpType (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationOpType" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  result = (char *)TF_OperationOpType(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationDevice(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationDevice (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationDevice" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  result = (char *)TF_OperationDevice(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationNumOutputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationNumOutputs (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationNumOutputs" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  result = (int)TF_OperationNumOutputs(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationOutputType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Output arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  TF_DataType result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationOutputType (should be 1)");
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_TF_Output,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationOutputType" "', argument " "1"" of type '" "TF_Output""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_OperationOutputType" "', argument " "1"" of type '" "TF_Output""'");
    } else {
      arg1 = *((TF_Output *)(argp1));
    }
  }
  result = (TF_DataType)TF_OperationOutputType(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationOutputListLength(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_Status *arg3 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationOutputListLength (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationOutputListLength" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationOutputListLength" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  {
    arg3 = TF_NewStatus();
  }
  result = (int)TF_OperationOutputListLength(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  {
    if (TF_GetCode(arg3) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg3));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    TF_DeleteStatus(arg3);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationNumInputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationNumInputs (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationNumInputs" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  result = (int)TF_OperationNumInputs(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationInputType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Input arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  TF_DataType result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationInputType (should be 1)");
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_TF_Input,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationInputType" "', argument " "1"" of type '" "TF_Input""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_OperationInputType" "', argument " "1"" of type '" "TF_Input""'");
    } else {
      arg1 = *((TF_Input *)(argp1));
    }
  }
  result = (TF_DataType)TF_OperationInputType(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationInputListLength(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_Status *arg3 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationInputListLength (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationInputListLength" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationInputListLength" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  {
    arg3 = TF_NewStatus();
  }
  result = (int)TF_OperationInputListLength(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  {
    if (TF_GetCode(arg3) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg3));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    TF_DeleteStatus(arg3);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationInput(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Input arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  TF_Output result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationInput (should be 1)");
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_TF_Input,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationInput" "', argument " "1"" of type '" "TF_Input""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_OperationInput" "', argument " "1"" of type '" "TF_Input""'");
    } else {
      arg1 = *((TF_Input *)(argp1));
    }
  }
  result = TF_OperationInput(arg1);
  jsresult = SWIG_NewPointerObj((new TF_Output((const TF_Output&)(result))), SWIGTYPE_p_TF_Output, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationOutputNumConsumers(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Output arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationOutputNumConsumers (should be 1)");
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_TF_Output,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationOutputNumConsumers" "', argument " "1"" of type '" "TF_Output""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_OperationOutputNumConsumers" "', argument " "1"" of type '" "TF_Output""'");
    } else {
      arg1 = *((TF_Output *)(argp1));
    }
  }
  result = (int)TF_OperationOutputNumConsumers(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationOutputConsumers(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Output arg1 ;
  TF_Input *arg2 = (TF_Input *) 0 ;
  int arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationOutputConsumers (should be 3)");
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_TF_Output,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationOutputConsumers" "', argument " "1"" of type '" "TF_Output""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_OperationOutputConsumers" "', argument " "1"" of type '" "TF_Output""'");
    } else {
      arg1 = *((TF_Output *)(argp1));
    }
  }
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_TF_Input, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationOutputConsumers" "', argument " "2"" of type '" "TF_Input *""'"); 
  }
  arg2 = (TF_Input *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TF_OperationOutputConsumers" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)TF_OperationOutputConsumers(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationNumControlInputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationNumControlInputs (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationNumControlInputs" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  result = (int)TF_OperationNumControlInputs(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetControlInputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  TF_Operation **arg2 = (TF_Operation **) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetControlInputs (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetControlInputs" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetControlInputs" "', argument " "2"" of type '" "TF_Operation **""'"); 
  }
  arg2 = (TF_Operation **)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TF_OperationGetControlInputs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)TF_OperationGetControlInputs(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationNumControlOutputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationNumControlOutputs (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationNumControlOutputs" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  result = (int)TF_OperationNumControlOutputs(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetControlOutputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  TF_Operation **arg2 = (TF_Operation **) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetControlOutputs (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetControlOutputs" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetControlOutputs" "', argument " "2"" of type '" "TF_Operation **""'"); 
  }
  arg2 = (TF_Operation **)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TF_OperationGetControlOutputs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)TF_OperationGetControlOutputs(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_ATTR_STRING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_ATTR_STRING));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_ATTR_INT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_ATTR_INT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_ATTR_FLOAT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_ATTR_FLOAT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_ATTR_BOOL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_ATTR_BOOL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_ATTR_TYPE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_ATTR_TYPE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_ATTR_SHAPE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_ATTR_SHAPE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_ATTR_TENSOR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_ATTR_TENSOR));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_ATTR_PLACEHOLDER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_ATTR_PLACEHOLDER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_ATTR_FUNC(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(TF_ATTR_FUNC));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_AttrMetadata_is_list_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_AttrMetadata *arg1 = (TF_AttrMetadata *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_AttrMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_AttrMetadata_is_list_set" "', argument " "1"" of type '" "TF_AttrMetadata *""'"); 
  }
  arg1 = (TF_AttrMetadata *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_AttrMetadata_is_list_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = (unsigned char)(val2);
  if (arg1) (arg1)->is_list = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_AttrMetadata_is_list_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_AttrMetadata *arg1 = (TF_AttrMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_AttrMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_AttrMetadata_is_list_get" "', argument " "1"" of type '" "TF_AttrMetadata *""'"); 
  }
  arg1 = (TF_AttrMetadata *)(argp1);
  result = (unsigned char) ((arg1)->is_list);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_AttrMetadata_list_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_AttrMetadata *arg1 = (TF_AttrMetadata *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_AttrMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_AttrMetadata_list_size_set" "', argument " "1"" of type '" "TF_AttrMetadata *""'"); 
  }
  arg1 = (TF_AttrMetadata *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_AttrMetadata_list_size_set" "', argument " "2"" of type '" "int64_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_AttrMetadata_list_size_set" "', argument " "2"" of type '" "int64_t""'");
    } else {
      arg2 = *((int64_t *)(argp2));
    }
  }
  if (arg1) (arg1)->list_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_AttrMetadata_list_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_AttrMetadata *arg1 = (TF_AttrMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_AttrMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_AttrMetadata_list_size_get" "', argument " "1"" of type '" "TF_AttrMetadata *""'"); 
  }
  arg1 = (TF_AttrMetadata *)(argp1);
  result =  ((arg1)->list_size);
  jsresult = SWIG_NewPointerObj((new int64_t((const int64_t&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_AttrMetadata_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_AttrMetadata *arg1 = (TF_AttrMetadata *) 0 ;
  TF_AttrType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_AttrMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_AttrMetadata_type_set" "', argument " "1"" of type '" "TF_AttrMetadata *""'"); 
  }
  arg1 = (TF_AttrMetadata *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_AttrMetadata_type_set" "', argument " "2"" of type '" "TF_AttrType""'");
  } 
  arg2 = (TF_AttrType)(val2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_AttrMetadata_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_AttrMetadata *arg1 = (TF_AttrMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TF_AttrType result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_AttrMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_AttrMetadata_type_get" "', argument " "1"" of type '" "TF_AttrMetadata *""'"); 
  }
  arg1 = (TF_AttrMetadata *)(argp1);
  result = (TF_AttrType) ((arg1)->type);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_AttrMetadata_total_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_AttrMetadata *arg1 = (TF_AttrMetadata *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_AttrMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_AttrMetadata_total_size_set" "', argument " "1"" of type '" "TF_AttrMetadata *""'"); 
  }
  arg1 = (TF_AttrMetadata *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_AttrMetadata_total_size_set" "', argument " "2"" of type '" "int64_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_AttrMetadata_total_size_set" "', argument " "2"" of type '" "int64_t""'");
    } else {
      arg2 = *((int64_t *)(argp2));
    }
  }
  if (arg1) (arg1)->total_size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_AttrMetadata_total_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_AttrMetadata *arg1 = (TF_AttrMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_AttrMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_AttrMetadata_total_size_get" "', argument " "1"" of type '" "TF_AttrMetadata *""'"); 
  }
  arg1 = (TF_AttrMetadata *)(argp1);
  result =  ((arg1)->total_size);
  jsresult = SWIG_NewPointerObj((new int64_t((const int64_t&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_TF_AttrMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_AttrMetadata *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_AttrMetadata (should be 0)");
  result = (TF_AttrMetadata *)new TF_AttrMetadata();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_AttrMetadata, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_AttrMetadata(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_AttrMetadata(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_AttrMetadata(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_AttrMetadata(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_AttrMetadata * arg1 = (TF_AttrMetadata *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_TF_OperationGetAttrMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_Status *arg3 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  TF_AttrMetadata result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrMetadata (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrMetadata" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrMetadata" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  {
    arg3 = TF_NewStatus();
  }
  result = TF_OperationGetAttrMetadata(arg1,(char const *)arg2,arg3);
  jsresult = SWIG_NewPointerObj((new TF_AttrMetadata((const TF_AttrMetadata&)(result))), SWIGTYPE_p_TF_AttrMetadata, SWIG_POINTER_OWN |  0 );
  {
    if (TF_GetCode(arg3) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg3));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    TF_DeleteStatus(arg3);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrString (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrString" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrString" "', argument " "3"" of type '" "void *""'"); 
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_OperationGetAttrString" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  {
    arg5 = TF_NewStatus();
  }
  TF_OperationGetAttrString(arg1,(char const *)arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrStringList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  void **arg3 = (void **) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  size_t arg7 ;
  TF_Status *arg8 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  size_t val7 ;
  int ecode7 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrStringList (should be 7)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrStringList" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrStringList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrStringList" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = (void **)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_OperationGetAttrStringList" "', argument " "4"" of type '" "size_t *""'"); 
  }
  arg4 = (size_t *)(argp4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TF_OperationGetAttrStringList" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  res6 = SWIG_ConvertPtr(args[5],SWIG_as_voidptrptr(&arg6), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TF_OperationGetAttrStringList" "', argument " "6"" of type '" "void *""'"); 
  }
  ecode7 = SWIG_AsVal_size_t(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TF_OperationGetAttrStringList" "', argument " "7"" of type '" "size_t""'");
  } 
  arg7 = (size_t)(val7);
  {
    arg8 = TF_NewStatus();
  }
  TF_OperationGetAttrStringList(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg8) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg8));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  
  {
    TF_DeleteStatus(arg8);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrInt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t *arg3 = (int64_t *) 0 ;
  TF_Status *arg4 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrInt (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrInt" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrInt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_int64_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrInt" "', argument " "3"" of type '" "int64_t *""'"); 
  }
  arg3 = (int64_t *)(argp3);
  {
    arg4 = TF_NewStatus();
  }
  TF_OperationGetAttrInt(arg1,(char const *)arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg4) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg4));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  {
    TF_DeleteStatus(arg4);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrIntList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t *arg3 = (int64_t *) 0 ;
  int arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrIntList (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrIntList" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrIntList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_int64_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrIntList" "', argument " "3"" of type '" "int64_t *""'"); 
  }
  arg3 = (int64_t *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_OperationGetAttrIntList" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    arg5 = TF_NewStatus();
  }
  TF_OperationGetAttrIntList(arg1,(char const *)arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrFloat(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  TF_Status *arg4 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrFloat (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrFloat" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrFloat" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrFloat" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = (float *)(argp3);
  {
    arg4 = TF_NewStatus();
  }
  TF_OperationGetAttrFloat(arg1,(char const *)arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg4) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg4));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  {
    TF_DeleteStatus(arg4);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrFloatList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrFloatList (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrFloatList" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrFloatList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrFloatList" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = (float *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_OperationGetAttrFloatList" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    arg5 = TF_NewStatus();
  }
  TF_OperationGetAttrFloatList(arg1,(char const *)arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrBool(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  TF_Status *arg4 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrBool (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrBool" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrBool" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrBool" "', argument " "3"" of type '" "unsigned char *""'"); 
  }
  arg3 = (unsigned char *)(argp3);
  {
    arg4 = TF_NewStatus();
  }
  TF_OperationGetAttrBool(arg1,(char const *)arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg4) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg4));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  {
    TF_DeleteStatus(arg4);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrBoolList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrBoolList (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrBoolList" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrBoolList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrBoolList" "', argument " "3"" of type '" "unsigned char *""'"); 
  }
  arg3 = (unsigned char *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_OperationGetAttrBoolList" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    arg5 = TF_NewStatus();
  }
  TF_OperationGetAttrBoolList(arg1,(char const *)arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_DataType *arg3 = (TF_DataType *) 0 ;
  TF_Status *arg4 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrType (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrType" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrType" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_TF_DataType, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrType" "', argument " "3"" of type '" "TF_DataType *""'"); 
  }
  arg3 = (TF_DataType *)(argp3);
  {
    arg4 = TF_NewStatus();
  }
  TF_OperationGetAttrType(arg1,(char const *)arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg4) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg4));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  {
    TF_DeleteStatus(arg4);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrTypeList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_DataType *arg3 = (TF_DataType *) 0 ;
  int arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrTypeList (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrTypeList" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrTypeList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_TF_DataType, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrTypeList" "', argument " "3"" of type '" "TF_DataType *""'"); 
  }
  arg3 = (TF_DataType *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_OperationGetAttrTypeList" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    arg5 = TF_NewStatus();
  }
  TF_OperationGetAttrTypeList(arg1,(char const *)arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrShape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t *arg3 = (int64_t *) 0 ;
  int arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrShape (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrShape" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrShape" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_int64_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrShape" "', argument " "3"" of type '" "int64_t *""'"); 
  }
  arg3 = (int64_t *)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_OperationGetAttrShape" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    arg5 = TF_NewStatus();
  }
  TF_OperationGetAttrShape(arg1,(char const *)arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrShapeList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t **arg3 = (int64_t **) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int64_t *arg6 = (int64_t *) 0 ;
  int arg7 ;
  TF_Status *arg8 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrShapeList (should be 7)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrShapeList" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrShapeList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_int64_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrShapeList" "', argument " "3"" of type '" "int64_t **""'"); 
  }
  arg3 = (int64_t **)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_OperationGetAttrShapeList" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = (int *)(argp4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TF_OperationGetAttrShapeList" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  res6 = SWIG_ConvertPtr(args[5], &argp6,SWIGTYPE_p_int64_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TF_OperationGetAttrShapeList" "', argument " "6"" of type '" "int64_t *""'"); 
  }
  arg6 = (int64_t *)(argp6);
  ecode7 = SWIG_AsVal_int(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TF_OperationGetAttrShapeList" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = (int)(val7);
  {
    arg8 = TF_NewStatus();
  }
  TF_OperationGetAttrShapeList(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg8) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg8));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  
  {
    TF_DeleteStatus(arg8);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrTensorShapeProto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_Buffer *arg3 = (TF_Buffer *) 0 ;
  TF_Status *arg4 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrTensorShapeProto (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrTensorShapeProto" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrTensorShapeProto" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrTensorShapeProto" "', argument " "3"" of type '" "TF_Buffer *""'"); 
  }
  arg3 = (TF_Buffer *)(argp3);
  {
    arg4 = TF_NewStatus();
  }
  TF_OperationGetAttrTensorShapeProto(arg1,(char const *)arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg4) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg4));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  {
    TF_DeleteStatus(arg4);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrTensorShapeProtoList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_Buffer **arg3 = (TF_Buffer **) 0 ;
  int arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrTensorShapeProtoList (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrTensorShapeProtoList" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrTensorShapeProtoList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrTensorShapeProtoList" "', argument " "3"" of type '" "TF_Buffer **""'"); 
  }
  arg3 = (TF_Buffer **)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_OperationGetAttrTensorShapeProtoList" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    arg5 = TF_NewStatus();
  }
  TF_OperationGetAttrTensorShapeProtoList(arg1,(char const *)arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_Tensor **arg3 = (TF_Tensor **) 0 ;
  TF_Status *arg4 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrTensor (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrTensor" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrTensor" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrTensor" "', argument " "3"" of type '" "TF_Tensor **""'"); 
  }
  arg3 = (TF_Tensor **)(argp3);
  {
    arg4 = TF_NewStatus();
  }
  TF_OperationGetAttrTensor(arg1,(char const *)arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg4) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg4));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  {
    TF_DeleteStatus(arg4);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrTensorList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_Tensor **arg3 = (TF_Tensor **) 0 ;
  int arg4 ;
  TF_Status *arg5 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrTensorList (should be 4)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrTensorList" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrTensorList" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrTensorList" "', argument " "3"" of type '" "TF_Tensor **""'"); 
  }
  arg3 = (TF_Tensor **)(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TF_OperationGetAttrTensorList" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    arg5 = TF_NewStatus();
  }
  TF_OperationGetAttrTensorList(arg1,(char const *)arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg5) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg5));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  {
    TF_DeleteStatus(arg5);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationGetAttrValueProto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_Buffer *arg3 = (TF_Buffer *) 0 ;
  TF_Status *arg4 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationGetAttrValueProto (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationGetAttrValueProto" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationGetAttrValueProto" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_OperationGetAttrValueProto" "', argument " "3"" of type '" "TF_Buffer *""'"); 
  }
  arg3 = (TF_Buffer *)(argp3);
  {
    arg4 = TF_NewStatus();
  }
  TF_OperationGetAttrValueProto(arg1,(char const *)arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg4) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg4));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  {
    TF_DeleteStatus(arg4);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_GraphOperationByName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  TF_Operation *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_GraphOperationByName (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_GraphOperationByName" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_GraphOperationByName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (TF_Operation *)TF_GraphOperationByName(arg1,(char const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Operation, 0 |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_GraphNextOperation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  TF_Operation *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_GraphNextOperation (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_GraphNextOperation" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_GraphNextOperation" "', argument " "2"" of type '" "size_t *""'"); 
  }
  arg2 = (size_t *)(argp2);
  result = (TF_Operation *)TF_GraphNextOperation(arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Operation, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_GraphToGraphDef(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  TF_Buffer *arg2 = (TF_Buffer *) 0 ;
  TF_Status *arg3 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_GraphToGraphDef (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_GraphToGraphDef" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_GraphToGraphDef" "', argument " "2"" of type '" "TF_Buffer *""'"); 
  }
  arg2 = (TF_Buffer *)(argp2);
  {
    arg3 = TF_NewStatus();
  }
  TF_GraphToGraphDef(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg3) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg3));
    }
  }
  
  
  {
    TF_DeleteStatus(arg3);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_NewImportGraphDefOptions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_ImportGraphDefOptions *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_NewImportGraphDefOptions (should be 0)");
  
  result = (TF_ImportGraphDefOptions *)TF_NewImportGraphDefOptions();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_ImportGraphDefOptions, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_DeleteImportGraphDefOptions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_ImportGraphDefOptions *arg1 = (TF_ImportGraphDefOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_DeleteImportGraphDefOptions (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_ImportGraphDefOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_DeleteImportGraphDefOptions" "', argument " "1"" of type '" "TF_ImportGraphDefOptions *""'"); 
  }
  arg1 = (TF_ImportGraphDefOptions *)(argp1);
  TF_DeleteImportGraphDefOptions(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_ImportGraphDefOptionsSetPrefix(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_ImportGraphDefOptions *arg1 = (TF_ImportGraphDefOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_ImportGraphDefOptionsSetPrefix (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_ImportGraphDefOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_ImportGraphDefOptionsSetPrefix" "', argument " "1"" of type '" "TF_ImportGraphDefOptions *""'"); 
  }
  arg1 = (TF_ImportGraphDefOptions *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_ImportGraphDefOptionsSetPrefix" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  TF_ImportGraphDefOptionsSetPrefix(arg1,(char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_GraphImportGraphDef(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  TF_Buffer *arg2 = (TF_Buffer *) 0 ;
  TF_ImportGraphDefOptions *arg3 = (TF_ImportGraphDefOptions *) 0 ;
  TF_Status *arg4 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_GraphImportGraphDef (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_GraphImportGraphDef" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_GraphImportGraphDef" "', argument " "2"" of type '" "TF_Buffer const *""'"); 
  }
  arg2 = (TF_Buffer *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_TF_ImportGraphDefOptions, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_GraphImportGraphDef" "', argument " "3"" of type '" "TF_ImportGraphDefOptions const *""'"); 
  }
  arg3 = (TF_ImportGraphDefOptions *)(argp3);
  {
    arg4 = TF_NewStatus();
  }
  TF_GraphImportGraphDef(arg1,(TF_Buffer const *)arg2,(TF_ImportGraphDefOptions const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg4) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg4));
    }
  }
  
  
  
  {
    TF_DeleteStatus(arg4);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_OperationToNodeDef(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  TF_Buffer *arg2 = (TF_Buffer *) 0 ;
  TF_Status *arg3 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_OperationToNodeDef (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationToNodeDef" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationToNodeDef" "', argument " "2"" of type '" "TF_Buffer *""'"); 
  }
  arg2 = (TF_Buffer *)(argp2);
  {
    arg3 = TF_NewStatus();
  }
  TF_OperationToNodeDef(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg3) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg3));
    }
  }
  
  
  {
    TF_DeleteStatus(arg3);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_NewSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  TF_SessionOptions *arg2 = (TF_SessionOptions *) 0 ;
  TF_Status *arg3 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  TF_Session *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_NewSession (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_NewSession" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_TF_SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_NewSession" "', argument " "2"" of type '" "TF_SessionOptions const *""'"); 
  }
  arg2 = (TF_SessionOptions *)(argp2);
  {
    arg3 = TF_NewStatus();
  }
  result = (TF_Session *)TF_NewSession(arg1,(TF_SessionOptions const *)arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Session, 0 |  0 );
  {
    if (TF_GetCode(arg3) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg3));
    }
  }
  
  
  {
    TF_DeleteStatus(arg3);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_CloseSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Session *arg1 = (TF_Session *) 0 ;
  TF_Status *arg2 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_CloseSession (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_CloseSession" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  {
    arg2 = TF_NewStatus();
  }
  TF_CloseSession(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg2) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg2));
    }
  }
  
  {
    TF_DeleteStatus(arg2);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_DeleteSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Session *arg1 = (TF_Session *) 0 ;
  TF_Status *arg2 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_DeleteSession (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_DeleteSession" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  {
    arg2 = TF_NewStatus();
  }
  TF_DeleteSession(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg2) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg2));
    }
  }
  
  {
    TF_DeleteStatus(arg2);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SessionRun(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Session *arg1 = (TF_Session *) 0 ;
  TF_Buffer *arg2 = (TF_Buffer *) 0 ;
  TF_Output *arg3 = (TF_Output *) 0 ;
  TF_Tensor **arg4 = (TF_Tensor **) 0 ;
  int arg5 ;
  TF_Output *arg6 = (TF_Output *) 0 ;
  TF_Tensor **arg7 = (TF_Tensor **) 0 ;
  int arg8 ;
  TF_Operation **arg9 = (TF_Operation **) 0 ;
  int arg10 ;
  TF_Buffer *arg11 = (TF_Buffer *) 0 ;
  TF_Status *arg12 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  
  if(args.Length() != 11) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SessionRun (should be 11)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SessionRun" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SessionRun" "', argument " "2"" of type '" "TF_Buffer const *""'"); 
  }
  arg2 = (TF_Buffer *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_TF_Output, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SessionRun" "', argument " "3"" of type '" "TF_Output const *""'"); 
  }
  arg3 = (TF_Output *)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_SessionRun" "', argument " "4"" of type '" "TF_Tensor *const *""'"); 
  }
  arg4 = (TF_Tensor **)(argp4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TF_SessionRun" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  res6 = SWIG_ConvertPtr(args[5], &argp6,SWIGTYPE_p_TF_Output, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TF_SessionRun" "', argument " "6"" of type '" "TF_Output const *""'"); 
  }
  arg6 = (TF_Output *)(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "TF_SessionRun" "', argument " "7"" of type '" "TF_Tensor **""'"); 
  }
  arg7 = (TF_Tensor **)(argp7);
  ecode8 = SWIG_AsVal_int(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TF_SessionRun" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = (int)(val8);
  res9 = SWIG_ConvertPtr(args[8], &argp9,SWIGTYPE_p_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "TF_SessionRun" "', argument " "9"" of type '" "TF_Operation const *const *""'"); 
  }
  arg9 = (TF_Operation **)(argp9);
  ecode10 = SWIG_AsVal_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "TF_SessionRun" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = (int)(val10);
  res11 = SWIG_ConvertPtr(args[10], &argp11,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "TF_SessionRun" "', argument " "11"" of type '" "TF_Buffer *""'"); 
  }
  arg11 = (TF_Buffer *)(argp11);
  {
    arg12 = TF_NewStatus();
  }
  TF_SessionRun(arg1,(TF_Buffer const *)arg2,(TF_Output const *)arg3,(TF_Tensor *const *)arg4,arg5,(TF_Output const *)arg6,arg7,arg8,(TF_Operation const *const *)arg9,arg10,arg11,arg12);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg12) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg12));
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  {
    TF_DeleteStatus(arg12);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SessionPRunSetup(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Session *arg1 = (TF_Session *) 0 ;
  TF_Output *arg2 = (TF_Output *) 0 ;
  int arg3 ;
  TF_Output *arg4 = (TF_Output *) 0 ;
  int arg5 ;
  TF_Operation **arg6 = (TF_Operation **) 0 ;
  int arg7 ;
  char **arg8 = (char **) 0 ;
  TF_Status *arg9 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SessionPRunSetup (should be 8)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SessionPRunSetup" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_TF_Output, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SessionPRunSetup" "', argument " "2"" of type '" "TF_Output const *""'"); 
  }
  arg2 = (TF_Output *)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TF_SessionPRunSetup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_TF_Output, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_SessionPRunSetup" "', argument " "4"" of type '" "TF_Output const *""'"); 
  }
  arg4 = (TF_Output *)(argp4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TF_SessionPRunSetup" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  res6 = SWIG_ConvertPtr(args[5], &argp6,SWIGTYPE_p_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TF_SessionPRunSetup" "', argument " "6"" of type '" "TF_Operation const *const *""'"); 
  }
  arg6 = (TF_Operation **)(argp6);
  ecode7 = SWIG_AsVal_int(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TF_SessionPRunSetup" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = (int)(val7);
  res8 = SWIG_ConvertPtr(args[7], &argp8,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "TF_SessionPRunSetup" "', argument " "8"" of type '" "char const **""'"); 
  }
  arg8 = (char **)(argp8);
  {
    arg9 = TF_NewStatus();
  }
  TF_SessionPRunSetup(arg1,(TF_Output const *)arg2,arg3,(TF_Output const *)arg4,arg5,(TF_Operation const *const *)arg6,arg7,(char const **)arg8,arg9);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg9) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg9));
    }
  }
  
  
  
  
  
  
  
  
  {
    TF_DeleteStatus(arg9);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_SessionPRun(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Session *arg1 = (TF_Session *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_Output *arg3 = (TF_Output *) 0 ;
  TF_Tensor **arg4 = (TF_Tensor **) 0 ;
  int arg5 ;
  TF_Output *arg6 = (TF_Output *) 0 ;
  TF_Tensor **arg7 = (TF_Tensor **) 0 ;
  int arg8 ;
  TF_Operation **arg9 = (TF_Operation **) 0 ;
  int arg10 ;
  TF_Status *arg11 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  
  if(args.Length() != 10) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_SessionPRun (should be 10)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SessionPRun" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SessionPRun" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_TF_Output, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_SessionPRun" "', argument " "3"" of type '" "TF_Output const *""'"); 
  }
  arg3 = (TF_Output *)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_SessionPRun" "', argument " "4"" of type '" "TF_Tensor *const *""'"); 
  }
  arg4 = (TF_Tensor **)(argp4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TF_SessionPRun" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  res6 = SWIG_ConvertPtr(args[5], &argp6,SWIGTYPE_p_TF_Output, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TF_SessionPRun" "', argument " "6"" of type '" "TF_Output const *""'"); 
  }
  arg6 = (TF_Output *)(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "TF_SessionPRun" "', argument " "7"" of type '" "TF_Tensor **""'"); 
  }
  arg7 = (TF_Tensor **)(argp7);
  ecode8 = SWIG_AsVal_int(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TF_SessionPRun" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = (int)(val8);
  res9 = SWIG_ConvertPtr(args[8], &argp9,SWIGTYPE_p_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "TF_SessionPRun" "', argument " "9"" of type '" "TF_Operation const *const *""'"); 
  }
  arg9 = (TF_Operation **)(argp9);
  ecode10 = SWIG_AsVal_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "TF_SessionPRun" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = (int)(val10);
  {
    arg11 = TF_NewStatus();
  }
  TF_SessionPRun(arg1,(char const *)arg2,(TF_Output const *)arg3,(TF_Tensor *const *)arg4,arg5,(TF_Output const *)arg6,arg7,arg8,(TF_Operation const *const *)arg9,arg10,arg11);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg11) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg11));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  
  
  
  
  {
    TF_DeleteStatus(arg11);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_NewDeprecatedSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_SessionOptions *arg1 = (TF_SessionOptions *) 0 ;
  TF_Status *arg2 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TF_DeprecatedSession *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_NewDeprecatedSession (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_NewDeprecatedSession" "', argument " "1"" of type '" "TF_SessionOptions const *""'"); 
  }
  arg1 = (TF_SessionOptions *)(argp1);
  {
    arg2 = TF_NewStatus();
  }
  result = (TF_DeprecatedSession *)TF_NewDeprecatedSession((TF_SessionOptions const *)arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_DeprecatedSession, 0 |  0 );
  {
    if (TF_GetCode(arg2) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg2));
    }
  }
  
  {
    TF_DeleteStatus(arg2);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_CloseDeprecatedSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_DeprecatedSession *arg1 = (TF_DeprecatedSession *) 0 ;
  TF_Status *arg2 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_CloseDeprecatedSession (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_DeprecatedSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_CloseDeprecatedSession" "', argument " "1"" of type '" "TF_DeprecatedSession *""'"); 
  }
  arg1 = (TF_DeprecatedSession *)(argp1);
  {
    arg2 = TF_NewStatus();
  }
  TF_CloseDeprecatedSession(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg2) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg2));
    }
  }
  
  {
    TF_DeleteStatus(arg2);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_DeleteDeprecatedSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_DeprecatedSession *arg1 = (TF_DeprecatedSession *) 0 ;
  TF_Status *arg2 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_DeleteDeprecatedSession (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_DeprecatedSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_DeleteDeprecatedSession" "', argument " "1"" of type '" "TF_DeprecatedSession *""'"); 
  }
  arg1 = (TF_DeprecatedSession *)(argp1);
  {
    arg2 = TF_NewStatus();
  }
  TF_DeleteDeprecatedSession(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg2) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg2));
    }
  }
  
  {
    TF_DeleteStatus(arg2);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_Reset(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_SessionOptions *arg1 = (TF_SessionOptions *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  TF_Status *arg4 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_Reset (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Reset" "', argument " "1"" of type '" "TF_SessionOptions const *""'"); 
  }
  arg1 = (TF_SessionOptions *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Reset" "', argument " "2"" of type '" "char const **""'"); 
  }
  arg2 = (char **)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TF_Reset" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    arg4 = TF_NewStatus();
  }
  TF_Reset((TF_SessionOptions const *)arg1,(char const **)arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg4) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg4));
    }
  }
  
  
  
  {
    TF_DeleteStatus(arg4);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_ExtendGraph(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_DeprecatedSession *arg1 = (TF_DeprecatedSession *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  TF_Status *arg4 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_ExtendGraph (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_DeprecatedSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_ExtendGraph" "', argument " "1"" of type '" "TF_DeprecatedSession *""'"); 
  }
  arg1 = (TF_DeprecatedSession *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_ExtendGraph" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TF_ExtendGraph" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  {
    arg4 = TF_NewStatus();
  }
  TF_ExtendGraph(arg1,(void const *)arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg4) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg4));
    }
  }
  
  
  
  {
    TF_DeleteStatus(arg4);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_Run(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_DeprecatedSession *arg1 = (TF_DeprecatedSession *) 0 ;
  TF_Buffer *arg2 = (TF_Buffer *) 0 ;
  char **arg3 = (char **) 0 ;
  TF_Tensor **arg4 = (TF_Tensor **) 0 ;
  int arg5 ;
  char **arg6 = (char **) 0 ;
  TF_Tensor **arg7 = (TF_Tensor **) 0 ;
  int arg8 ;
  char **arg9 = (char **) 0 ;
  int arg10 ;
  TF_Buffer *arg11 = (TF_Buffer *) 0 ;
  TF_Status *arg12 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  
  if(args.Length() != 11) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_Run (should be 11)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_DeprecatedSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Run" "', argument " "1"" of type '" "TF_DeprecatedSession *""'"); 
  }
  arg1 = (TF_DeprecatedSession *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Run" "', argument " "2"" of type '" "TF_Buffer const *""'"); 
  }
  arg2 = (TF_Buffer *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_Run" "', argument " "3"" of type '" "char const **""'"); 
  }
  arg3 = (char **)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_Run" "', argument " "4"" of type '" "TF_Tensor **""'"); 
  }
  arg4 = (TF_Tensor **)(argp4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TF_Run" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  res6 = SWIG_ConvertPtr(args[5], &argp6,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TF_Run" "', argument " "6"" of type '" "char const **""'"); 
  }
  arg6 = (char **)(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "TF_Run" "', argument " "7"" of type '" "TF_Tensor **""'"); 
  }
  arg7 = (TF_Tensor **)(argp7);
  ecode8 = SWIG_AsVal_int(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TF_Run" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = (int)(val8);
  res9 = SWIG_ConvertPtr(args[8], &argp9,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "TF_Run" "', argument " "9"" of type '" "char const **""'"); 
  }
  arg9 = (char **)(argp9);
  ecode10 = SWIG_AsVal_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "TF_Run" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = (int)(val10);
  res11 = SWIG_ConvertPtr(args[10], &argp11,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "TF_Run" "', argument " "11"" of type '" "TF_Buffer *""'"); 
  }
  arg11 = (TF_Buffer *)(argp11);
  {
    arg12 = TF_NewStatus();
  }
  TF_Run(arg1,(TF_Buffer const *)arg2,(char const **)arg3,arg4,arg5,(char const **)arg6,arg7,arg8,(char const **)arg9,arg10,arg11,arg12);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg12) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg12));
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  {
    TF_DeleteStatus(arg12);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_PRunSetup(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_DeprecatedSession *arg1 = (TF_DeprecatedSession *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  char **arg4 = (char **) 0 ;
  int arg5 ;
  char **arg6 = (char **) 0 ;
  int arg7 ;
  char **arg8 = (char **) 0 ;
  TF_Status *arg9 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_PRunSetup (should be 8)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_DeprecatedSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_PRunSetup" "', argument " "1"" of type '" "TF_DeprecatedSession *""'"); 
  }
  arg1 = (TF_DeprecatedSession *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_PRunSetup" "', argument " "2"" of type '" "char const **""'"); 
  }
  arg2 = (char **)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TF_PRunSetup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_PRunSetup" "', argument " "4"" of type '" "char const **""'"); 
  }
  arg4 = (char **)(argp4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TF_PRunSetup" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  res6 = SWIG_ConvertPtr(args[5], &argp6,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TF_PRunSetup" "', argument " "6"" of type '" "char const **""'"); 
  }
  arg6 = (char **)(argp6);
  ecode7 = SWIG_AsVal_int(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TF_PRunSetup" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = (int)(val7);
  res8 = SWIG_ConvertPtr(args[7], &argp8,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "TF_PRunSetup" "', argument " "8"" of type '" "char const **""'"); 
  }
  arg8 = (char **)(argp8);
  {
    arg9 = TF_NewStatus();
  }
  TF_PRunSetup(arg1,(char const **)arg2,arg3,(char const **)arg4,arg5,(char const **)arg6,arg7,(char const **)arg8,arg9);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg9) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg9));
    }
  }
  
  
  
  
  
  
  
  
  {
    TF_DeleteStatus(arg9);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_PRun(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_DeprecatedSession *arg1 = (TF_DeprecatedSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  TF_Tensor **arg4 = (TF_Tensor **) 0 ;
  int arg5 ;
  char **arg6 = (char **) 0 ;
  TF_Tensor **arg7 = (TF_Tensor **) 0 ;
  int arg8 ;
  char **arg9 = (char **) 0 ;
  int arg10 ;
  TF_Status *arg11 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  
  if(args.Length() != 10) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_PRun (should be 10)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_DeprecatedSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_PRun" "', argument " "1"" of type '" "TF_DeprecatedSession *""'"); 
  }
  arg1 = (TF_DeprecatedSession *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_PRun" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_PRun" "', argument " "3"" of type '" "char const **""'"); 
  }
  arg3 = (char **)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_PRun" "', argument " "4"" of type '" "TF_Tensor **""'"); 
  }
  arg4 = (TF_Tensor **)(argp4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TF_PRun" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  res6 = SWIG_ConvertPtr(args[5], &argp6,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TF_PRun" "', argument " "6"" of type '" "char const **""'"); 
  }
  arg6 = (char **)(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "TF_PRun" "', argument " "7"" of type '" "TF_Tensor **""'"); 
  }
  arg7 = (TF_Tensor **)(argp7);
  ecode8 = SWIG_AsVal_int(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TF_PRun" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = (int)(val8);
  res9 = SWIG_ConvertPtr(args[8], &argp9,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "TF_PRun" "', argument " "9"" of type '" "char const **""'"); 
  }
  arg9 = (char **)(argp9);
  ecode10 = SWIG_AsVal_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "TF_PRun" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = (int)(val10);
  {
    arg11 = TF_NewStatus();
  }
  TF_PRun(arg1,(char const *)arg2,(char const **)arg3,arg4,arg5,(char const **)arg6,arg7,arg8,(char const **)arg9,arg10,arg11);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg11) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg11));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  
  
  
  
  {
    TF_DeleteStatus(arg11);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_LoadLibrary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  TF_Status *arg2 = (TF_Status *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  TF_Library *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_LoadLibrary (should be 1)");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_LoadLibrary" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  {
    arg2 = TF_NewStatus();
  }
  result = (TF_Library *)TF_LoadLibrary((char const *)arg1,arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Library, 0 |  0 );
  {
    if (TF_GetCode(arg2) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg2));
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    TF_DeleteStatus(arg2);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_GetOpList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Library *arg1 = (TF_Library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TF_Buffer result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_GetOpList (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_GetOpList" "', argument " "1"" of type '" "TF_Library *""'"); 
  }
  arg1 = (TF_Library *)(argp1);
  result = TF_GetOpList(arg1);
  jsresult = SWIG_NewPointerObj((new TF_Buffer((const TF_Buffer&)(result))), SWIGTYPE_p_TF_Buffer, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_DeleteLibraryHandle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Library *arg1 = (TF_Library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_DeleteLibraryHandle (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_DeleteLibraryHandle" "', argument " "1"" of type '" "TF_Library *""'"); 
  }
  arg1 = (TF_Library *)(argp1);
  TF_DeleteLibraryHandle(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_GetAllOpList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Buffer *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_GetAllOpList (should be 0)");
  
  result = (TF_Buffer *)TF_GetAllOpList();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Buffer, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsGoogleCudaEnabled(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsGoogleCudaEnabled (should be 0)");
  
  result = (bool)tensorflow::IsGoogleCudaEnabled();
  jsresult = SWIG_From_bool((bool)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CudaSupportsHalfMatMulAndConv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CudaSupportsHalfMatMulAndConv (should be 0)");
  
  result = (bool)tensorflow::CudaSupportsHalfMatMulAndConv();
  jsresult = SWIG_From_bool((bool)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_MAJOR_VERSION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_MINOR_VERSION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_PATCH_VERSION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_VERSION_SUFFIX(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_VERSION_STRING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"(0.12.0)");
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_GRAPH_DEF_VERSION_MIN_PRODUCER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_GRAPH_DEF_VERSION_MIN_CONSUMER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_GRAPH_DEF_VERSION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(17));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_CHECKPOINT_VERSION_MIN_PRODUCER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_CHECKPOINT_VERSION_MIN_CONSUMER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_CHECKPOINT_VERSION(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tf_compiler_version(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tf_compiler_version (should be 0)");
  
  result = (char *)tf_compiler_version();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tf_git_version(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_tf_git_version (should be 0)");
  
  result = (char *)tf_git_version();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto (should be 0)");
  
  tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftypes_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftypes_2eproto (should be 0)");
  
  tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto (should be 0)");
  
  tensorflow::protobuf_AssignDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2ftypes_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2ftypes_2eproto (should be 0)");
  
  tensorflow::protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_DT_INVALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_INVALID));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_FLOAT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_FLOAT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_DOUBLE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_DOUBLE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_INT32(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_INT32));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_UINT8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_UINT8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_INT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_INT16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_INT8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_INT8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_STRING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_STRING));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_COMPLEX64(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_COMPLEX64));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_INT64(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_INT64));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_BOOL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_BOOL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_QINT8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_QINT8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_QUINT8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_QUINT8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_QINT32(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_QINT32));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_BFLOAT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_BFLOAT16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_QINT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_QINT16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_QUINT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_QUINT16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_UINT16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_UINT16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_COMPLEX128(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_COMPLEX128));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_HALF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_HALF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_RESOURCE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_RESOURCE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_FLOAT_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_FLOAT_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_DOUBLE_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_DOUBLE_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_INT32_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_INT32_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_UINT8_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_UINT8_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_INT16_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_INT16_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_INT8_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_INT8_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_STRING_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_STRING_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_COMPLEX64_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_COMPLEX64_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_INT64_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_INT64_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_BOOL_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_BOOL_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_QINT8_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_QINT8_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_QUINT8_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_QUINT8_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_QINT32_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_QINT32_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_BFLOAT16_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_BFLOAT16_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_QINT16_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_QINT16_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_QUINT16_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_QUINT16_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_UINT16_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_UINT16_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_COMPLEX128_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_COMPLEX128_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_HALF_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_HALF_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DT_RESOURCE_REF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DT_RESOURCE_REF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DataType_INT_MIN_SENTINEL_DO_NOT_USE_(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DataType_INT_MIN_SENTINEL_DO_NOT_USE_));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_DataType_INT_MAX_SENTINEL_DO_NOT_USE_(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::DataType_INT_MAX_SENTINEL_DO_NOT_USE_));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_DataType_IsValid(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DataType_IsValid (should be 1)");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DataType_IsValid" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (bool)tensorflow::DataType_IsValid(arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DataType_MIN_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::DataType result;
  
  result = (tensorflow::DataType)(tensorflow::DataType)tensorflow::DataType_MIN;
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_DataType_MAX_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::DataType result;
  
  result = (tensorflow::DataType)(tensorflow::DataType)tensorflow::DataType_MAX;
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_DataType_ARRAYSIZE_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int result;
  
  result = (int)(int)tensorflow::DataType_ARRAYSIZE;
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_DataType_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::EnumDescriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DataType_descriptor (should be 0)");
  
  result = (::google::protobuf::EnumDescriptor *)tensorflow::DataType_descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__EnumDescriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DataType_Name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::DataType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DataType_Name (should be 1)");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DataType_Name" "', argument " "1"" of type '" "tensorflow::DataType""'");
  } 
  arg1 = (tensorflow::DataType)(val1);
  result = (::std::string *) &tensorflow::DataType_Name(arg1);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DataType_Parse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::std::string *arg1 = 0 ;
  tensorflow::DataType *arg2 = (tensorflow::DataType *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DataType_Parse (should be 2)");
  
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataType_Parse" "', argument " "1"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataType_Parse" "', argument " "1"" of type '" "::std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_tensorflow__DataType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataType_Parse" "', argument " "2"" of type '" "tensorflow::DataType *""'"); 
  }
  arg2 = (tensorflow::DataType *)(argp2);
  result = (bool)tensorflow::DataType_Parse((::std::string const &)*arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto (should be 0)");
  
  tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto (should be 0)");
  
  tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto (should be 0)");
  
  tensorflow::protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto (should be 0)");
  
  tensorflow::protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_NodeDef__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::NodeDef *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_NodeDef__SWIG_0 (should be 0)");
  result = (tensorflow::NodeDef *)new tensorflow::NodeDef();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__NodeDef, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_NodeDef(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_NodeDef(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_NodeDef(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_NodeDef(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::NodeDef * arg1 = (tensorflow::NodeDef *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_NodeDef__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::NodeDef *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::NodeDef *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_NodeDef__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__NodeDef,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodeDef" "', argument " "1"" of type '" "tensorflow::NodeDef const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodeDef" "', argument " "1"" of type '" "tensorflow::NodeDef const &""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (tensorflow::NodeDef *)new tensorflow::NodeDef((tensorflow::NodeDef const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__NodeDef, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_NodeDef(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_NodeDef__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_NodeDef__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_NodeDef__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_NodeDef__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_NodeDef");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_GetArena" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::google::protobuf::Arena *)((tensorflow::NodeDef const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_GetMaybeArenaPointer" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (void *)((tensorflow::NodeDef const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_descriptor (should be 0)");
  
  result = (::google::protobuf::Descriptor *)tensorflow::NodeDef::descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_default_instance (should be 0)");
  
  result = (tensorflow::NodeDef *) &tensorflow::NodeDef::default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_internal_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_internal_default_instance (should be 0)");
  
  result = (tensorflow::NodeDef *)tensorflow::NodeDef::internal_default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_UnsafeArenaSwap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  tensorflow::NodeDef *arg2 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_UnsafeArenaSwap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_UnsafeArenaSwap" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_UnsafeArenaSwap" "', argument " "2"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg2 = (tensorflow::NodeDef *)(argp2);
  (arg1)->UnsafeArenaSwap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  tensorflow::NodeDef *arg2 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_Swap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_Swap" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_Swap" "', argument " "2"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg2 = (tensorflow::NodeDef *)(argp2);
  (arg1)->Swap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::NodeDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_New" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (tensorflow::NodeDef *)((tensorflow::NodeDef const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::NodeDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_New" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (tensorflow::NodeDef *)((tensorflow::NodeDef const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef__wrap_NodeDef_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_CopyFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_CopyFrom" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeDef_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_MergeFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_MergeFrom" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeDef_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_CopyFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  tensorflow::NodeDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_CopyFrom" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__NodeDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_CopyFrom" "', argument " "2"" of type '" "tensorflow::NodeDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeDef_CopyFrom" "', argument " "2"" of type '" "tensorflow::NodeDef const &""'"); 
  }
  arg2 = (tensorflow::NodeDef *)(argp2);
  (arg1)->CopyFrom((tensorflow::NodeDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef__wrap_NodeDef_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CopyFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_MergeFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  tensorflow::NodeDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_MergeFrom" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__NodeDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_MergeFrom" "', argument " "2"" of type '" "tensorflow::NodeDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeDef_MergeFrom" "', argument " "2"" of type '" "tensorflow::NodeDef const &""'"); 
  }
  arg2 = (tensorflow::NodeDef *)(argp2);
  (arg1)->MergeFrom((tensorflow::NodeDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef__wrap_NodeDef_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MergeFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_Clear" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_IsInitialized" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (bool)((tensorflow::NodeDef const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_ByteSizeLong" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = ((tensorflow::NodeDef const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::google::protobuf::io::CodedInputStream *arg2 = (::google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_MergePartialFromCodedStream" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_MergePartialFromCodedStream" "', argument " "2"" of type '" "::google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::google::protobuf::io::CodedOutputStream *arg2 = (::google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_SerializeWithCachedSizes" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_SerializeWithCachedSizes" "', argument " "2"" of type '" "::google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedOutputStream *)(argp2);
  ((tensorflow::NodeDef const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  bool arg2 ;
  ::google::protobuf::uint8 *arg3 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeDef_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeDef_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg3 = (::google::protobuf::uint8 *)(argp3);
  result = (::google::protobuf::uint8 *)((tensorflow::NodeDef const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::google::protobuf::uint8 *arg2 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg2 = (::google::protobuf::uint8 *)(argp2);
  result = (::google::protobuf::uint8 *)((tensorflow::NodeDef const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_GetCachedSize" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (int)((tensorflow::NodeDef const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_GetMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Metadata result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_GetMetadata (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_GetMetadata" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = ((tensorflow::NodeDef const *)arg1)->GetMetadata();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::Metadata((const ::google::protobuf::Metadata&)(result))), SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_clear_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_clear_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_clear_name" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  (arg1)->clear_name();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_NodeDef_kNameFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::NodeDef::kNameFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_NodeDef_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_name" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *) &((tensorflow::NodeDef const *)arg1)->name();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_name__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_name" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_set_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeDef_set_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_name((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_name__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_name" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_set_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_name((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_name__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_name" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_set_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeDef_set_name" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_name((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef__wrap_NodeDef_set_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_set_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_set_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_set_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_set_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_set_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_set_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_name.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_mutable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_mutable_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_mutable_name" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_release_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_release_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_release_name" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *)(arg1)->release_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_allocated_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_set_allocated_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_allocated_name" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_set_allocated_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_unsafe_arena_release_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_unsafe_arena_release_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_unsafe_arena_release_name" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_unsafe_arena_set_allocated_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_unsafe_arena_set_allocated_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_unsafe_arena_set_allocated_name" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_unsafe_arena_set_allocated_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_clear_op(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_clear_op (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_clear_op" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  (arg1)->clear_op();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_NodeDef_kOpFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::NodeDef::kOpFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_NodeDef_op(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_op (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_op" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *) &((tensorflow::NodeDef const *)arg1)->op();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_op__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_op" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_set_op" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeDef_set_op" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_op((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_op__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_op" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_set_op" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_op((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_op__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_op" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_set_op" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeDef_set_op" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_op((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef__wrap_NodeDef_set_op(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_set_op__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_set_op__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_set_op__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_set_op__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_set_op__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_set_op__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_op.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_mutable_op(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_mutable_op (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_mutable_op" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_op();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_release_op(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_release_op (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_release_op" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *)(arg1)->release_op();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_allocated_op(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_set_allocated_op (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_allocated_op" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_set_allocated_op" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_op(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_unsafe_arena_release_op(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_unsafe_arena_release_op (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_unsafe_arena_release_op" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_op();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_unsafe_arena_set_allocated_op(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_unsafe_arena_set_allocated_op (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_unsafe_arena_set_allocated_op" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_unsafe_arena_set_allocated_op" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_op(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_input_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_input_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_input_size" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (int)((tensorflow::NodeDef const *)arg1)->input_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_clear_input(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_clear_input (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_clear_input" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  (arg1)->clear_input();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_NodeDef_kInputFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::NodeDef::kInputFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_NodeDef_input__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_input" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeDef_input" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::std::string *) &((tensorflow::NodeDef const *)arg1)->input(arg2);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_mutable_input__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_mutable_input" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeDef_mutable_input" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::std::string *)(arg1)->mutable_input(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_input__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  int arg2 ;
  ::std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_input" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeDef_set_input" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeDef_set_input" "', argument " "3"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeDef_set_input" "', argument " "3"" of type '" "::std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->set_input(arg2,(::std::string const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_input__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_input" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeDef_set_input" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_AsCharPtrAndSize(args[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeDef_set_input" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  (arg1)->set_input(arg2,(char const *)arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_input__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_input" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeDef_set_input" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_AsCharPtrAndSize(args[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeDef_set_input" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  ecode4 = SWIG_AsVal_size_t(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NodeDef_set_input" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  (arg1)->set_input(arg2,(char const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef__wrap_NodeDef_set_input(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_set_input__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_set_input__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_set_input__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_set_input__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_set_input__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_set_input__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_input.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_add_input__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_add_input" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *)(arg1)->add_input();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_add_input__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_add_input" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_add_input" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeDef_add_input" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->add_input((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_add_input__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_add_input" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_add_input" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->add_input((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_add_input__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_add_input" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_add_input" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeDef_add_input" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->add_input((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef__wrap_NodeDef_add_input(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_add_input__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_add_input__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_add_input__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_add_input__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_add_input__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_add_input__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_add_input__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_add_input__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add_input.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_input__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::std::string > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_input" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::std::string > *) &((tensorflow::NodeDef const *)arg1)->input();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef__wrap_NodeDef_input(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_input__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_input__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_input__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_input__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function input.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_mutable_input__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::std::string > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_mutable_input" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::std::string > *)(arg1)->mutable_input();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef__wrap_NodeDef_mutable_input(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_mutable_input__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_mutable_input__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_mutable_input__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_mutable_input__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mutable_input.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_clear_device(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_clear_device (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_clear_device" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  (arg1)->clear_device();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_NodeDef_kDeviceFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::NodeDef::kDeviceFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_NodeDef_device(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_device (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_device" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *) &((tensorflow::NodeDef const *)arg1)->device();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_device__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_device" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_set_device" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeDef_set_device" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_device((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_device__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_device" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_set_device" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_device((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_device__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_device" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_set_device" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeDef_set_device" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_device((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef__wrap_NodeDef_set_device(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_set_device__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_set_device__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_set_device__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_set_device__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeDef_set_device__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeDef_set_device__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_device.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_mutable_device(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_mutable_device (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_mutable_device" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_device();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_release_device(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_release_device (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_release_device" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *)(arg1)->release_device();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_set_allocated_device(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_set_allocated_device (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_set_allocated_device" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_set_allocated_device" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_device(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_unsafe_arena_release_device(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_unsafe_arena_release_device (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_unsafe_arena_release_device" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_device();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_unsafe_arena_set_allocated_device(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_unsafe_arena_set_allocated_device (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_unsafe_arena_set_allocated_device" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeDef_unsafe_arena_set_allocated_device" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_device(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_attr_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_attr_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_attr_size" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (int)((tensorflow::NodeDef const *)arg1)->attr_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_clear_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_clear_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_clear_attr" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  (arg1)->clear_attr();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_NodeDef_kAttrFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::NodeDef::kAttrFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_NodeDef_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Map< ::std::string,::tensorflow::AttrValue > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_attr" "', argument " "1"" of type '" "tensorflow::NodeDef const *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::google::protobuf::Map< ::std::string,::tensorflow::AttrValue > *) &((tensorflow::NodeDef const *)arg1)->attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__MapT_std__string___tensorflow__AttrValue_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeDef_mutable_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeDef *arg1 = (tensorflow::NodeDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Map< ::std::string,::tensorflow::AttrValue > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeDef_mutable_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_mutable_attr" "', argument " "1"" of type '" "tensorflow::NodeDef *""'"); 
  }
  arg1 = (tensorflow::NodeDef *)(argp1);
  result = (::google::protobuf::Map< ::std::string,::tensorflow::AttrValue > *)(arg1)->mutable_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__MapT_std__string___tensorflow__AttrValue_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_NodeDef_default_instance__set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NodeDef > *arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NodeDef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NodeDef_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeDef_default_instance__set" "', argument " "1"" of type '" "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NodeDef > *""'"); 
  }
  arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NodeDef > *)(argp1);
  tensorflow::NodeDef_default_instance_ = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_NodeDef_default_instance__get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NodeDef > *result = 0 ;
  
  result = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NodeDef > *)&tensorflow::NodeDef_default_instance_;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NodeDef_t, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2fvariable_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2fvariable_2eproto (should be 0)");
  
  tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fvariable_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fvariable_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fvariable_2eproto (should be 0)");
  
  tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fvariable_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fvariable_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fvariable_2eproto (should be 0)");
  
  tensorflow::protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fvariable_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fvariable_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fvariable_2eproto (should be 0)");
  
  tensorflow::protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fvariable_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_VariableDef__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::VariableDef *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_VariableDef__SWIG_0 (should be 0)");
  result = (tensorflow::VariableDef *)new tensorflow::VariableDef();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__VariableDef, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_VariableDef(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_VariableDef(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_VariableDef(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_VariableDef(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::VariableDef * arg1 = (tensorflow::VariableDef *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_VariableDef__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::VariableDef *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::VariableDef *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_VariableDef__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__VariableDef,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VariableDef" "', argument " "1"" of type '" "tensorflow::VariableDef const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VariableDef" "', argument " "1"" of type '" "tensorflow::VariableDef const &""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (tensorflow::VariableDef *)new tensorflow::VariableDef((tensorflow::VariableDef const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__VariableDef, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_VariableDef(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_VariableDef__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_VariableDef__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_VariableDef__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_VariableDef__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_VariableDef");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_GetArena" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::google::protobuf::Arena *)((tensorflow::VariableDef const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_GetMaybeArenaPointer" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (void *)((tensorflow::VariableDef const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_descriptor (should be 0)");
  
  result = (::google::protobuf::Descriptor *)tensorflow::VariableDef::descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_default_instance (should be 0)");
  
  result = (tensorflow::VariableDef *) &tensorflow::VariableDef::default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_internal_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_internal_default_instance (should be 0)");
  
  result = (tensorflow::VariableDef *)tensorflow::VariableDef::internal_default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_UnsafeArenaSwap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  tensorflow::VariableDef *arg2 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_UnsafeArenaSwap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_UnsafeArenaSwap" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_UnsafeArenaSwap" "', argument " "2"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg2 = (tensorflow::VariableDef *)(argp2);
  (arg1)->UnsafeArenaSwap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  tensorflow::VariableDef *arg2 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_Swap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_Swap" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_Swap" "', argument " "2"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg2 = (tensorflow::VariableDef *)(argp2);
  (arg1)->Swap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::VariableDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_New" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (tensorflow::VariableDef *)((tensorflow::VariableDef const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::VariableDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_New" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (tensorflow::VariableDef *)((tensorflow::VariableDef const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef__wrap_VariableDef_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_CopyFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_CopyFrom" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableDef_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_MergeFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_MergeFrom" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableDef_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_CopyFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  tensorflow::VariableDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_CopyFrom" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__VariableDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_CopyFrom" "', argument " "2"" of type '" "tensorflow::VariableDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableDef_CopyFrom" "', argument " "2"" of type '" "tensorflow::VariableDef const &""'"); 
  }
  arg2 = (tensorflow::VariableDef *)(argp2);
  (arg1)->CopyFrom((tensorflow::VariableDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef__wrap_VariableDef_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CopyFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_MergeFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  tensorflow::VariableDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_MergeFrom" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__VariableDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_MergeFrom" "', argument " "2"" of type '" "tensorflow::VariableDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableDef_MergeFrom" "', argument " "2"" of type '" "tensorflow::VariableDef const &""'"); 
  }
  arg2 = (tensorflow::VariableDef *)(argp2);
  (arg1)->MergeFrom((tensorflow::VariableDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef__wrap_VariableDef_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MergeFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_Clear" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_IsInitialized" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (bool)((tensorflow::VariableDef const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_ByteSizeLong" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = ((tensorflow::VariableDef const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::google::protobuf::io::CodedInputStream *arg2 = (::google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_MergePartialFromCodedStream" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_MergePartialFromCodedStream" "', argument " "2"" of type '" "::google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::google::protobuf::io::CodedOutputStream *arg2 = (::google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_SerializeWithCachedSizes" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_SerializeWithCachedSizes" "', argument " "2"" of type '" "::google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedOutputStream *)(argp2);
  ((tensorflow::VariableDef const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  bool arg2 ;
  ::google::protobuf::uint8 *arg3 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableDef_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableDef_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg3 = (::google::protobuf::uint8 *)(argp3);
  result = (::google::protobuf::uint8 *)((tensorflow::VariableDef const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::google::protobuf::uint8 *arg2 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg2 = (::google::protobuf::uint8 *)(argp2);
  result = (::google::protobuf::uint8 *)((tensorflow::VariableDef const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_GetCachedSize" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (int)((tensorflow::VariableDef const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_GetMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Metadata result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_GetMetadata (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_GetMetadata" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = ((tensorflow::VariableDef const *)arg1)->GetMetadata();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::Metadata((const ::google::protobuf::Metadata&)(result))), SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_clear_variable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_clear_variable_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_clear_variable_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  (arg1)->clear_variable_name();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_VariableDef_kVariableNameFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::VariableDef::kVariableNameFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_VariableDef_variable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_variable_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_variable_name" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::std::string *) &((tensorflow::VariableDef const *)arg1)->variable_name();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_variable_name__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_variable_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_variable_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableDef_set_variable_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_variable_name((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_variable_name__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_variable_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_variable_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_variable_name((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_variable_name__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_variable_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_variable_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableDef_set_variable_name" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_variable_name((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef__wrap_VariableDef_set_variable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_set_variable_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_set_variable_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_set_variable_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_set_variable_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_set_variable_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_set_variable_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_variable_name.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_mutable_variable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_mutable_variable_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_mutable_variable_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_variable_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_release_variable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_release_variable_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_release_variable_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::std::string *)(arg1)->release_variable_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_allocated_variable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_set_allocated_variable_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_allocated_variable_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_allocated_variable_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_variable_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_unsafe_arena_release_variable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_unsafe_arena_release_variable_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_unsafe_arena_release_variable_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_variable_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_unsafe_arena_set_allocated_variable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_unsafe_arena_set_allocated_variable_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_unsafe_arena_set_allocated_variable_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_unsafe_arena_set_allocated_variable_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_variable_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_clear_initializer_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_clear_initializer_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_clear_initializer_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  (arg1)->clear_initializer_name();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_VariableDef_kInitializerNameFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::VariableDef::kInitializerNameFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_VariableDef_initializer_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_initializer_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_initializer_name" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::std::string *) &((tensorflow::VariableDef const *)arg1)->initializer_name();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_initializer_name__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_initializer_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_initializer_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableDef_set_initializer_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_initializer_name((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_initializer_name__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_initializer_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_initializer_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_initializer_name((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_initializer_name__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_initializer_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_initializer_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableDef_set_initializer_name" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_initializer_name((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef__wrap_VariableDef_set_initializer_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_set_initializer_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_set_initializer_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_set_initializer_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_set_initializer_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_set_initializer_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_set_initializer_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_initializer_name.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_mutable_initializer_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_mutable_initializer_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_mutable_initializer_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_initializer_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_release_initializer_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_release_initializer_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_release_initializer_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::std::string *)(arg1)->release_initializer_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_allocated_initializer_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_set_allocated_initializer_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_allocated_initializer_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_allocated_initializer_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_initializer_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_unsafe_arena_release_initializer_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_unsafe_arena_release_initializer_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_unsafe_arena_release_initializer_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_initializer_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_unsafe_arena_set_allocated_initializer_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_unsafe_arena_set_allocated_initializer_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_unsafe_arena_set_allocated_initializer_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_unsafe_arena_set_allocated_initializer_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_initializer_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_clear_snapshot_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_clear_snapshot_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_clear_snapshot_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  (arg1)->clear_snapshot_name();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_VariableDef_kSnapshotNameFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::VariableDef::kSnapshotNameFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_VariableDef_snapshot_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_snapshot_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_snapshot_name" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::std::string *) &((tensorflow::VariableDef const *)arg1)->snapshot_name();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_snapshot_name__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_snapshot_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_snapshot_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VariableDef_set_snapshot_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_snapshot_name((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_snapshot_name__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_snapshot_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_snapshot_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_snapshot_name((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_snapshot_name__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_snapshot_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_snapshot_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableDef_set_snapshot_name" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_snapshot_name((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef__wrap_VariableDef_set_snapshot_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_set_snapshot_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_set_snapshot_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_set_snapshot_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_set_snapshot_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_VariableDef_set_snapshot_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_VariableDef_set_snapshot_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_snapshot_name.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_mutable_snapshot_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_mutable_snapshot_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_mutable_snapshot_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_snapshot_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_release_snapshot_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_release_snapshot_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_release_snapshot_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::std::string *)(arg1)->release_snapshot_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_allocated_snapshot_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_set_allocated_snapshot_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_allocated_snapshot_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_allocated_snapshot_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_snapshot_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_unsafe_arena_release_snapshot_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_unsafe_arena_release_snapshot_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_unsafe_arena_release_snapshot_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_snapshot_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_unsafe_arena_set_allocated_snapshot_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_unsafe_arena_set_allocated_snapshot_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_unsafe_arena_set_allocated_snapshot_name" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_unsafe_arena_set_allocated_snapshot_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_snapshot_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_has_save_slice_info_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_has_save_slice_info_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_has_save_slice_info_def" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (bool)((tensorflow::VariableDef const *)arg1)->has_save_slice_info_def();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_clear_save_slice_info_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_clear_save_slice_info_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_clear_save_slice_info_def" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  (arg1)->clear_save_slice_info_def();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_VariableDef_kSaveSliceInfoDefFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::VariableDef::kSaveSliceInfoDefFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_VariableDef_save_slice_info_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::SaveSliceInfoDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_save_slice_info_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_save_slice_info_def" "', argument " "1"" of type '" "tensorflow::VariableDef const *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::tensorflow::SaveSliceInfoDef *) &((tensorflow::VariableDef const *)arg1)->save_slice_info_def();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_mutable_save_slice_info_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::SaveSliceInfoDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_mutable_save_slice_info_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_mutable_save_slice_info_def" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::tensorflow::SaveSliceInfoDef *)(arg1)->mutable_save_slice_info_def();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_release_save_slice_info_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::SaveSliceInfoDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_release_save_slice_info_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_release_save_slice_info_def" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::tensorflow::SaveSliceInfoDef *)(arg1)->release_save_slice_info_def();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_set_allocated_save_slice_info_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::tensorflow::SaveSliceInfoDef *arg2 = (::tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_set_allocated_save_slice_info_def (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_set_allocated_save_slice_info_def" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_set_allocated_save_slice_info_def" "', argument " "2"" of type '" "::tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg2 = (::tensorflow::SaveSliceInfoDef *)(argp2);
  (arg1)->set_allocated_save_slice_info_def(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_unsafe_arena_release_save_slice_info_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::SaveSliceInfoDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_unsafe_arena_release_save_slice_info_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_unsafe_arena_release_save_slice_info_def" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  result = (::tensorflow::SaveSliceInfoDef *)(arg1)->unsafe_arena_release_save_slice_info_def();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VariableDef_unsafe_arena_set_allocated_save_slice_info_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::VariableDef *arg1 = (tensorflow::VariableDef *) 0 ;
  ::tensorflow::SaveSliceInfoDef *arg2 = (::tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VariableDef_unsafe_arena_set_allocated_save_slice_info_def (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__VariableDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_unsafe_arena_set_allocated_save_slice_info_def" "', argument " "1"" of type '" "tensorflow::VariableDef *""'"); 
  }
  arg1 = (tensorflow::VariableDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableDef_unsafe_arena_set_allocated_save_slice_info_def" "', argument " "2"" of type '" "::tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg2 = (::tensorflow::SaveSliceInfoDef *)(argp2);
  (arg1)->unsafe_arena_set_allocated_save_slice_info_def(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_VariableDef_default_instance__set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::VariableDef > *arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::VariableDef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__VariableDef_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableDef_default_instance__set" "', argument " "1"" of type '" "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::VariableDef > *""'"); 
  }
  arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::VariableDef > *)(argp1);
  tensorflow::VariableDef_default_instance_ = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_VariableDef_default_instance__get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::VariableDef > *result = 0 ;
  
  result = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::VariableDef > *)&tensorflow::VariableDef_default_instance_;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__VariableDef_t, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_SaveSliceInfoDef__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::SaveSliceInfoDef *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SaveSliceInfoDef__SWIG_0 (should be 0)");
  result = (tensorflow::SaveSliceInfoDef *)new tensorflow::SaveSliceInfoDef();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__SaveSliceInfoDef, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_SaveSliceInfoDef(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_SaveSliceInfoDef(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_SaveSliceInfoDef(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_SaveSliceInfoDef(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::SaveSliceInfoDef * arg1 = (tensorflow::SaveSliceInfoDef *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_SaveSliceInfoDef__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::SaveSliceInfoDef *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::SaveSliceInfoDef *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SaveSliceInfoDef__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__SaveSliceInfoDef,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SaveSliceInfoDef" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SaveSliceInfoDef" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const &""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (tensorflow::SaveSliceInfoDef *)new tensorflow::SaveSliceInfoDef((tensorflow::SaveSliceInfoDef const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__SaveSliceInfoDef, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_SaveSliceInfoDef(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SaveSliceInfoDef__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SaveSliceInfoDef__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_SaveSliceInfoDef__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_SaveSliceInfoDef__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_SaveSliceInfoDef");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_GetArena" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (::google::protobuf::Arena *)((tensorflow::SaveSliceInfoDef const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_GetMaybeArenaPointer" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (void *)((tensorflow::SaveSliceInfoDef const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_descriptor (should be 0)");
  
  result = (::google::protobuf::Descriptor *)tensorflow::SaveSliceInfoDef::descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_default_instance (should be 0)");
  
  result = (tensorflow::SaveSliceInfoDef *) &tensorflow::SaveSliceInfoDef::default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_internal_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_internal_default_instance (should be 0)");
  
  result = (tensorflow::SaveSliceInfoDef *)tensorflow::SaveSliceInfoDef::internal_default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_UnsafeArenaSwap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  tensorflow::SaveSliceInfoDef *arg2 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_UnsafeArenaSwap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_UnsafeArenaSwap" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_UnsafeArenaSwap" "', argument " "2"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg2 = (tensorflow::SaveSliceInfoDef *)(argp2);
  (arg1)->UnsafeArenaSwap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  tensorflow::SaveSliceInfoDef *arg2 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_Swap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_Swap" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_Swap" "', argument " "2"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg2 = (tensorflow::SaveSliceInfoDef *)(argp2);
  (arg1)->Swap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::SaveSliceInfoDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_New" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (tensorflow::SaveSliceInfoDef *)((tensorflow::SaveSliceInfoDef const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::SaveSliceInfoDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_New" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (tensorflow::SaveSliceInfoDef *)((tensorflow::SaveSliceInfoDef const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_CopyFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_CopyFrom" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveSliceInfoDef_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_MergeFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_MergeFrom" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveSliceInfoDef_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_CopyFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  tensorflow::SaveSliceInfoDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_CopyFrom" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__SaveSliceInfoDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_CopyFrom" "', argument " "2"" of type '" "tensorflow::SaveSliceInfoDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveSliceInfoDef_CopyFrom" "', argument " "2"" of type '" "tensorflow::SaveSliceInfoDef const &""'"); 
  }
  arg2 = (tensorflow::SaveSliceInfoDef *)(argp2);
  (arg1)->CopyFrom((tensorflow::SaveSliceInfoDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CopyFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_MergeFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  tensorflow::SaveSliceInfoDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_MergeFrom" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__SaveSliceInfoDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_MergeFrom" "', argument " "2"" of type '" "tensorflow::SaveSliceInfoDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveSliceInfoDef_MergeFrom" "', argument " "2"" of type '" "tensorflow::SaveSliceInfoDef const &""'"); 
  }
  arg2 = (tensorflow::SaveSliceInfoDef *)(argp2);
  (arg1)->MergeFrom((tensorflow::SaveSliceInfoDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MergeFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_Clear" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_IsInitialized" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (bool)((tensorflow::SaveSliceInfoDef const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_ByteSizeLong" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = ((tensorflow::SaveSliceInfoDef const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  ::google::protobuf::io::CodedInputStream *arg2 = (::google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_MergePartialFromCodedStream" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_MergePartialFromCodedStream" "', argument " "2"" of type '" "::google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  ::google::protobuf::io::CodedOutputStream *arg2 = (::google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_SerializeWithCachedSizes" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_SerializeWithCachedSizes" "', argument " "2"" of type '" "::google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedOutputStream *)(argp2);
  ((tensorflow::SaveSliceInfoDef const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  bool arg2 ;
  ::google::protobuf::uint8 *arg3 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SaveSliceInfoDef_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SaveSliceInfoDef_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg3 = (::google::protobuf::uint8 *)(argp3);
  result = (::google::protobuf::uint8 *)((tensorflow::SaveSliceInfoDef const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  ::google::protobuf::uint8 *arg2 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg2 = (::google::protobuf::uint8 *)(argp2);
  result = (::google::protobuf::uint8 *)((tensorflow::SaveSliceInfoDef const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_GetCachedSize" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (int)((tensorflow::SaveSliceInfoDef const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_GetMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Metadata result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_GetMetadata (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_GetMetadata" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = ((tensorflow::SaveSliceInfoDef const *)arg1)->GetMetadata();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::Metadata((const ::google::protobuf::Metadata&)(result))), SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_clear_full_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_clear_full_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_clear_full_name" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  (arg1)->clear_full_name();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_SaveSliceInfoDef_kFullNameFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::SaveSliceInfoDef::kFullNameFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_full_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_full_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_full_name" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (::std::string *) &((tensorflow::SaveSliceInfoDef const *)arg1)->full_name();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_set_full_name__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_set_full_name" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_set_full_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveSliceInfoDef_set_full_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_full_name((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_set_full_name__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_set_full_name" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_set_full_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_full_name((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_set_full_name__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_set_full_name" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_set_full_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SaveSliceInfoDef_set_full_name" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_full_name((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_set_full_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_set_full_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_set_full_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_set_full_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_set_full_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_set_full_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_set_full_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_full_name.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_mutable_full_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_mutable_full_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_mutable_full_name" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_full_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_release_full_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_release_full_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_release_full_name" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (::std::string *)(arg1)->release_full_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_set_allocated_full_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_set_allocated_full_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_set_allocated_full_name" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_set_allocated_full_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_full_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_unsafe_arena_release_full_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_unsafe_arena_release_full_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_unsafe_arena_release_full_name" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_full_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_unsafe_arena_set_allocated_full_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_unsafe_arena_set_allocated_full_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_unsafe_arena_set_allocated_full_name" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_unsafe_arena_set_allocated_full_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_full_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_full_shape_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_full_shape_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_full_shape_size" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (int)((tensorflow::SaveSliceInfoDef const *)arg1)->full_shape_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_clear_full_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_clear_full_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_clear_full_shape" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  (arg1)->clear_full_shape();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_SaveSliceInfoDef_kFullShapeFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::SaveSliceInfoDef::kFullShapeFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_full_shape__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::google::protobuf::int64 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_full_shape" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SaveSliceInfoDef_full_shape" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((tensorflow::SaveSliceInfoDef const *)arg1)->full_shape(arg2);
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::int64((const ::google::protobuf::int64&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_set_full_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  int arg2 ;
  ::google::protobuf::int64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_set_full_shape (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_set_full_shape" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SaveSliceInfoDef_set_full_shape" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SaveSliceInfoDef_set_full_shape" "', argument " "3"" of type '" "::google::protobuf::int64""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveSliceInfoDef_set_full_shape" "', argument " "3"" of type '" "::google::protobuf::int64""'");
    } else {
      arg3 = *((::google::protobuf::int64 *)(argp3));
    }
  }
  (arg1)->set_full_shape(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_add_full_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  ::google::protobuf::int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_add_full_shape (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_add_full_shape" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_add_full_shape" "', argument " "2"" of type '" "::google::protobuf::int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveSliceInfoDef_add_full_shape" "', argument " "2"" of type '" "::google::protobuf::int64""'");
    } else {
      arg2 = *((::google::protobuf::int64 *)(argp2));
    }
  }
  (arg1)->add_full_shape(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_full_shape__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_full_shape" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int64 > *) &((tensorflow::SaveSliceInfoDef const *)arg1)->full_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int64_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_full_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_full_shape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_full_shape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_full_shape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_full_shape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function full_shape.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_mutable_full_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_mutable_full_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_mutable_full_shape" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int64 > *)(arg1)->mutable_full_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int64_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_var_offset_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_var_offset_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_var_offset_size" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (int)((tensorflow::SaveSliceInfoDef const *)arg1)->var_offset_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_clear_var_offset(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_clear_var_offset (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_clear_var_offset" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  (arg1)->clear_var_offset();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_SaveSliceInfoDef_kVarOffsetFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::SaveSliceInfoDef::kVarOffsetFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_var_offset__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::google::protobuf::int64 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_var_offset" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SaveSliceInfoDef_var_offset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((tensorflow::SaveSliceInfoDef const *)arg1)->var_offset(arg2);
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::int64((const ::google::protobuf::int64&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_set_var_offset(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  int arg2 ;
  ::google::protobuf::int64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_set_var_offset (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_set_var_offset" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SaveSliceInfoDef_set_var_offset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SaveSliceInfoDef_set_var_offset" "', argument " "3"" of type '" "::google::protobuf::int64""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveSliceInfoDef_set_var_offset" "', argument " "3"" of type '" "::google::protobuf::int64""'");
    } else {
      arg3 = *((::google::protobuf::int64 *)(argp3));
    }
  }
  (arg1)->set_var_offset(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_add_var_offset(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  ::google::protobuf::int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_add_var_offset (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_add_var_offset" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_add_var_offset" "', argument " "2"" of type '" "::google::protobuf::int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveSliceInfoDef_add_var_offset" "', argument " "2"" of type '" "::google::protobuf::int64""'");
    } else {
      arg2 = *((::google::protobuf::int64 *)(argp2));
    }
  }
  (arg1)->add_var_offset(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_var_offset__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_var_offset" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int64 > *) &((tensorflow::SaveSliceInfoDef const *)arg1)->var_offset();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int64_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_var_offset(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_var_offset__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_var_offset__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_var_offset__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_var_offset__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function var_offset.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_mutable_var_offset(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_mutable_var_offset (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_mutable_var_offset" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int64 > *)(arg1)->mutable_var_offset();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int64_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_var_shape_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_var_shape_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_var_shape_size" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (int)((tensorflow::SaveSliceInfoDef const *)arg1)->var_shape_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_clear_var_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_clear_var_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_clear_var_shape" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  (arg1)->clear_var_shape();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_SaveSliceInfoDef_kVarShapeFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::SaveSliceInfoDef::kVarShapeFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_var_shape__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::google::protobuf::int64 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_var_shape" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SaveSliceInfoDef_var_shape" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((tensorflow::SaveSliceInfoDef const *)arg1)->var_shape(arg2);
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::int64((const ::google::protobuf::int64&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_set_var_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  int arg2 ;
  ::google::protobuf::int64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_set_var_shape (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_set_var_shape" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SaveSliceInfoDef_set_var_shape" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SaveSliceInfoDef_set_var_shape" "', argument " "3"" of type '" "::google::protobuf::int64""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveSliceInfoDef_set_var_shape" "', argument " "3"" of type '" "::google::protobuf::int64""'");
    } else {
      arg3 = *((::google::protobuf::int64 *)(argp3));
    }
  }
  (arg1)->set_var_shape(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_add_var_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  ::google::protobuf::int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_add_var_shape (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_add_var_shape" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveSliceInfoDef_add_var_shape" "', argument " "2"" of type '" "::google::protobuf::int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SaveSliceInfoDef_add_var_shape" "', argument " "2"" of type '" "::google::protobuf::int64""'");
    } else {
      arg2 = *((::google::protobuf::int64 *)(argp2));
    }
  }
  (arg1)->add_var_shape(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_var_shape__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_var_shape" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef const *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int64 > *) &((tensorflow::SaveSliceInfoDef const *)arg1)->var_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int64_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_var_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_var_shape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_var_shape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SaveSliceInfoDef_var_shape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SaveSliceInfoDef_var_shape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function var_shape.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_mutable_var_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SaveSliceInfoDef *arg1 = (tensorflow::SaveSliceInfoDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SaveSliceInfoDef_mutable_var_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__SaveSliceInfoDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_mutable_var_shape" "', argument " "1"" of type '" "tensorflow::SaveSliceInfoDef *""'"); 
  }
  arg1 = (tensorflow::SaveSliceInfoDef *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int64 > *)(arg1)->mutable_var_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int64_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_SaveSliceInfoDef_default_instance__set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::SaveSliceInfoDef > *arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::SaveSliceInfoDef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__SaveSliceInfoDef_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveSliceInfoDef_default_instance__set" "', argument " "1"" of type '" "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::SaveSliceInfoDef > *""'"); 
  }
  arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::SaveSliceInfoDef > *)(argp1);
  tensorflow::SaveSliceInfoDef_default_instance_ = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_SaveSliceInfoDef_default_instance__get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::SaveSliceInfoDef > *result = 0 ;
  
  result = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::SaveSliceInfoDef > *)&tensorflow::SaveSliceInfoDef_default_instance_;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__SaveSliceInfoDef_t, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto (should be 0)");
  
  tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto (should be 0)");
  
  tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto (should be 0)");
  
  tensorflow::protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto (should be 0)");
  
  tensorflow::protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_AttrValue_ListValue__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::AttrValue_ListValue *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AttrValue_ListValue__SWIG_0 (should be 0)");
  result = (tensorflow::AttrValue_ListValue *)new tensorflow::AttrValue_ListValue();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__AttrValue_ListValue, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AttrValue_ListValue(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AttrValue_ListValue(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AttrValue_ListValue(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AttrValue_ListValue(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::AttrValue_ListValue * arg1 = (tensorflow::AttrValue_ListValue *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_AttrValue_ListValue__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::AttrValue_ListValue *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::AttrValue_ListValue *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AttrValue_ListValue__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__AttrValue_ListValue,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AttrValue_ListValue" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AttrValue_ListValue" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const &""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (tensorflow::AttrValue_ListValue *)new tensorflow::AttrValue_ListValue((tensorflow::AttrValue_ListValue const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__AttrValue_ListValue, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_AttrValue_ListValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_AttrValue_ListValue__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_AttrValue_ListValue__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_AttrValue_ListValue__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_AttrValue_ListValue__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_AttrValue_ListValue");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_GetArena" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::Arena *)((tensorflow::AttrValue_ListValue const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_GetMaybeArenaPointer" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (void *)((tensorflow::AttrValue_ListValue const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_descriptor (should be 0)");
  
  result = (::google::protobuf::Descriptor *)tensorflow::AttrValue_ListValue::descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_default_instance (should be 0)");
  
  result = (tensorflow::AttrValue_ListValue *) &tensorflow::AttrValue_ListValue::default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_internal_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_internal_default_instance (should be 0)");
  
  result = (tensorflow::AttrValue_ListValue *)tensorflow::AttrValue_ListValue::internal_default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_UnsafeArenaSwap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  tensorflow::AttrValue_ListValue *arg2 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_UnsafeArenaSwap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_UnsafeArenaSwap" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_UnsafeArenaSwap" "', argument " "2"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg2 = (tensorflow::AttrValue_ListValue *)(argp2);
  (arg1)->UnsafeArenaSwap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  tensorflow::AttrValue_ListValue *arg2 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_Swap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_Swap" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_Swap" "', argument " "2"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg2 = (tensorflow::AttrValue_ListValue *)(argp2);
  (arg1)->Swap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::AttrValue_ListValue *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_New" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (tensorflow::AttrValue_ListValue *)((tensorflow::AttrValue_ListValue const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::AttrValue_ListValue *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_New" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (tensorflow::AttrValue_ListValue *)((tensorflow::AttrValue_ListValue const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_CopyFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_CopyFrom" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_ListValue_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_MergeFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_MergeFrom" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_ListValue_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_CopyFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  tensorflow::AttrValue_ListValue *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_CopyFrom" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__AttrValue_ListValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_CopyFrom" "', argument " "2"" of type '" "tensorflow::AttrValue_ListValue const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_ListValue_CopyFrom" "', argument " "2"" of type '" "tensorflow::AttrValue_ListValue const &""'"); 
  }
  arg2 = (tensorflow::AttrValue_ListValue *)(argp2);
  (arg1)->CopyFrom((tensorflow::AttrValue_ListValue const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CopyFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_MergeFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  tensorflow::AttrValue_ListValue *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_MergeFrom" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__AttrValue_ListValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_MergeFrom" "', argument " "2"" of type '" "tensorflow::AttrValue_ListValue const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_ListValue_MergeFrom" "', argument " "2"" of type '" "tensorflow::AttrValue_ListValue const &""'"); 
  }
  arg2 = (tensorflow::AttrValue_ListValue *)(argp2);
  (arg1)->MergeFrom((tensorflow::AttrValue_ListValue const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MergeFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_Clear" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_IsInitialized" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (bool)((tensorflow::AttrValue_ListValue const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_ByteSizeLong" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = ((tensorflow::AttrValue_ListValue const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  ::google::protobuf::io::CodedInputStream *arg2 = (::google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_MergePartialFromCodedStream" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_MergePartialFromCodedStream" "', argument " "2"" of type '" "::google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  ::google::protobuf::io::CodedOutputStream *arg2 = (::google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_SerializeWithCachedSizes" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_SerializeWithCachedSizes" "', argument " "2"" of type '" "::google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedOutputStream *)(argp2);
  ((tensorflow::AttrValue_ListValue const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  bool arg2 ;
  ::google::protobuf::uint8 *arg3 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AttrValue_ListValue_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg3 = (::google::protobuf::uint8 *)(argp3);
  result = (::google::protobuf::uint8 *)((tensorflow::AttrValue_ListValue const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  ::google::protobuf::uint8 *arg2 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg2 = (::google::protobuf::uint8 *)(argp2);
  result = (::google::protobuf::uint8 *)((tensorflow::AttrValue_ListValue const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_GetCachedSize" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (int)((tensorflow::AttrValue_ListValue const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_GetMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Metadata result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_GetMetadata (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_GetMetadata" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = ((tensorflow::AttrValue_ListValue const *)arg1)->GetMetadata();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::Metadata((const ::google::protobuf::Metadata&)(result))), SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_s_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_s_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_s_size" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (int)((tensorflow::AttrValue_ListValue const *)arg1)->s_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_clear_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_clear_s (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_clear_s" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  (arg1)->clear_s();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_ListValue_kSFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue_ListValue::kSFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_s__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_s" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::std::string *) &((tensorflow::AttrValue_ListValue const *)arg1)->s(arg2);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_mutable_s__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_mutable_s" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_mutable_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::std::string *)(arg1)->mutable_s(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_set_s__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  ::std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_set_s" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_set_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AttrValue_ListValue_set_s" "', argument " "3"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_ListValue_set_s" "', argument " "3"" of type '" "::std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->set_s(arg2,(::std::string const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_set_s__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_set_s" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_set_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_AsCharPtrAndSize(args[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AttrValue_ListValue_set_s" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  (arg1)->set_s(arg2,(char const *)arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_set_s__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_set_s" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_set_s" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg3), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AttrValue_ListValue_set_s" "', argument " "3"" of type '" "void const *""'"); 
  }
  ecode4 = SWIG_AsVal_size_t(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AttrValue_ListValue_set_s" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  (arg1)->set_s(arg2,(void const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_set_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_set_s__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_set_s__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_set_s__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_set_s__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_set_s__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_set_s__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_s.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_add_s__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_add_s" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::std::string *)(arg1)->add_s();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_add_s__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_add_s" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_add_s" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_ListValue_add_s" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->add_s((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_add_s__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_add_s" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_add_s" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->add_s((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_add_s__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_add_s" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_add_s" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AttrValue_ListValue_add_s" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->add_s((void const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_add_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_add_s__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_add_s__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_add_s__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_add_s__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_add_s__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_add_s__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_add_s__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_add_s__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add_s.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_s__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::std::string > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_s" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::std::string > *) &((tensorflow::AttrValue_ListValue const *)arg1)->s();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_s__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_s__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_s__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_s__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function s.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_mutable_s__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::std::string > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_mutable_s" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::std::string > *)(arg1)->mutable_s();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_mutable_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_mutable_s__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_mutable_s__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_mutable_s__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_mutable_s__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mutable_s.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_i_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_i_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_i_size" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (int)((tensorflow::AttrValue_ListValue const *)arg1)->i_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_clear_i(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_clear_i (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_clear_i" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  (arg1)->clear_i();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_ListValue_kIFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue_ListValue::kIFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_i__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::google::protobuf::int64 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_i" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_i" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((tensorflow::AttrValue_ListValue const *)arg1)->i(arg2);
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::int64((const ::google::protobuf::int64&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_set_i(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  ::google::protobuf::int64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_set_i (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_set_i" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_set_i" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AttrValue_ListValue_set_i" "', argument " "3"" of type '" "::google::protobuf::int64""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_ListValue_set_i" "', argument " "3"" of type '" "::google::protobuf::int64""'");
    } else {
      arg3 = *((::google::protobuf::int64 *)(argp3));
    }
  }
  (arg1)->set_i(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_add_i(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  ::google::protobuf::int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_add_i (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_add_i" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_ListValue_add_i" "', argument " "2"" of type '" "::google::protobuf::int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_ListValue_add_i" "', argument " "2"" of type '" "::google::protobuf::int64""'");
    } else {
      arg2 = *((::google::protobuf::int64 *)(argp2));
    }
  }
  (arg1)->add_i(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_i__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_i" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int64 > *) &((tensorflow::AttrValue_ListValue const *)arg1)->i();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int64_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_i(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_i__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_i__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_i__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_i__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function i.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_mutable_i(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_mutable_i (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_mutable_i" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int64 > *)(arg1)->mutable_i();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int64_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_f_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_f_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_f_size" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (int)((tensorflow::AttrValue_ListValue const *)arg1)->f_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_clear_f(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_clear_f (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_clear_f" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  (arg1)->clear_f();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_ListValue_kFFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue_ListValue::kFFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_f__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_f" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_f" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (float)((tensorflow::AttrValue_ListValue const *)arg1)->f(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_set_f(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_set_f (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_set_f" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_set_f" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AttrValue_ListValue_set_f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->set_f(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_add_f(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_add_f (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_add_f" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_add_f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->add_f(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_f__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< float > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_f" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedField< float > *) &((tensorflow::AttrValue_ListValue const *)arg1)->f();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_float_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_f(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_f__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_f__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_f__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_f__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function f.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_mutable_f(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< float > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_mutable_f (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_mutable_f" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedField< float > *)(arg1)->mutable_f();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_float_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_b_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_b_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_b_size" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (int)((tensorflow::AttrValue_ListValue const *)arg1)->b_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_clear_b(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_clear_b (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_clear_b" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  (arg1)->clear_b();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_ListValue_kBFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue_ListValue::kBFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_b__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_b" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_b" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)((tensorflow::AttrValue_ListValue const *)arg1)->b(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_set_b(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_set_b (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_set_b" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_set_b" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AttrValue_ListValue_set_b" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->set_b(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_add_b(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_add_b (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_add_b" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_add_b" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->add_b(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_b__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< bool > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_b" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedField< bool > *) &((tensorflow::AttrValue_ListValue const *)arg1)->b();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_bool_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_b(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_b__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_b__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_b__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_b__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function b.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_mutable_b(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< bool > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_mutable_b (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_mutable_b" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedField< bool > *)(arg1)->mutable_b();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_bool_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_type_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_type_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_type_size" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (int)((tensorflow::AttrValue_ListValue const *)arg1)->type_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_clear_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_clear_type (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_clear_type" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  (arg1)->clear_type();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_ListValue_kTypeFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue_ListValue::kTypeFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_type__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::DataType result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_type" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_type" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::DataType)((tensorflow::AttrValue_ListValue const *)arg1)->type(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_set_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  ::tensorflow::DataType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_set_type (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_set_type" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_set_type" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AttrValue_ListValue_set_type" "', argument " "3"" of type '" "::tensorflow::DataType""'");
  } 
  arg3 = (::tensorflow::DataType)(val3);
  (arg1)->set_type(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_add_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  ::tensorflow::DataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_add_type (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_add_type" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_add_type" "', argument " "2"" of type '" "::tensorflow::DataType""'");
  } 
  arg2 = (::tensorflow::DataType)(val2);
  (arg1)->add_type(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_type__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< int > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_type" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedField< int > *) &((tensorflow::AttrValue_ListValue const *)arg1)->type();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_type__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_type__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_type__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_type__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function type.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_mutable_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< int > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_mutable_type (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_mutable_type" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedField< int > *)(arg1)->mutable_type();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_shape_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_shape_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_shape_size" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (int)((tensorflow::AttrValue_ListValue const *)arg1)->shape_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_clear_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_clear_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_clear_shape" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  (arg1)->clear_shape();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_ListValue_kShapeFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue_ListValue::kShapeFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_shape__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::TensorShapeProto *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_shape" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_shape" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::TensorShapeProto *) &((tensorflow::AttrValue_ListValue const *)arg1)->shape(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_mutable_shape__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::TensorShapeProto *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_mutable_shape" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_mutable_shape" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::TensorShapeProto *)(arg1)->mutable_shape(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_add_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorShapeProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_add_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_add_shape" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::tensorflow::TensorShapeProto *)(arg1)->add_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_mutable_shape__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_mutable_shape" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto > *)(arg1)->mutable_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorShapeProto_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_mutable_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_mutable_shape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_mutable_shape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_mutable_shape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_mutable_shape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mutable_shape.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_shape__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_shape" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto > *) &((tensorflow::AttrValue_ListValue const *)arg1)->shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorShapeProto_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_shape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_shape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_shape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_shape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function shape.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_tensor_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_tensor_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_tensor_size" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (int)((tensorflow::AttrValue_ListValue const *)arg1)->tensor_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_clear_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_clear_tensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_clear_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  (arg1)->clear_tensor();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_ListValue_kTensorFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue_ListValue::kTensorFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_tensor__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::TensorProto *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_tensor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::TensorProto *) &((tensorflow::AttrValue_ListValue const *)arg1)->tensor(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_mutable_tensor__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::TensorProto *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_mutable_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_ListValue_mutable_tensor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::TensorProto *)(arg1)->mutable_tensor(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_add_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ListValue_add_tensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_add_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::tensorflow::TensorProto *)(arg1)->add_tensor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_mutable_tensor__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_mutable_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto > *)(arg1)->mutable_tensor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorProto_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_mutable_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_mutable_tensor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_mutable_tensor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_mutable_tensor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_mutable_tensor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mutable_tensor.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_tensor__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue_ListValue *arg1 = (tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue_ListValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue_ListValue *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto > *) &((tensorflow::AttrValue_ListValue const *)arg1)->tensor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorProto_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_tensor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_tensor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_ListValue_tensor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_ListValue_tensor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function tensor.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_AttrValue_ListValue_default_instance__set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue_ListValue > *arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue_ListValue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_ListValue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ListValue_default_instance__set" "', argument " "1"" of type '" "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue_ListValue > *""'"); 
  }
  arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue_ListValue > *)(argp1);
  tensorflow::AttrValue_ListValue_default_instance_ = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AttrValue_ListValue_default_instance__get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue_ListValue > *result = 0 ;
  
  result = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue_ListValue > *)&tensorflow::AttrValue_ListValue_default_instance_;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_ListValue_t, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_AttrValue__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::AttrValue *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AttrValue__SWIG_0 (should be 0)");
  result = (tensorflow::AttrValue *)new tensorflow::AttrValue();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__AttrValue, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_AttrValue(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_AttrValue(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_AttrValue(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_AttrValue(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::AttrValue * arg1 = (tensorflow::AttrValue *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_AttrValue__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::AttrValue *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::AttrValue *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_AttrValue__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__AttrValue,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AttrValue" "', argument " "1"" of type '" "tensorflow::AttrValue const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AttrValue" "', argument " "1"" of type '" "tensorflow::AttrValue const &""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (tensorflow::AttrValue *)new tensorflow::AttrValue((tensorflow::AttrValue const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__AttrValue, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_AttrValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_AttrValue__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_AttrValue__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_AttrValue__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_AttrValue__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_AttrValue");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_GetArena" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::google::protobuf::Arena *)((tensorflow::AttrValue const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_GetMaybeArenaPointer" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (void *)((tensorflow::AttrValue const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_descriptor (should be 0)");
  
  result = (::google::protobuf::Descriptor *)tensorflow::AttrValue::descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_default_instance (should be 0)");
  
  result = (tensorflow::AttrValue *) &tensorflow::AttrValue::default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kI(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kI));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kF));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kB(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kB));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kType(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kType));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kShape(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kShape));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kTensor(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kTensor));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kList(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kList));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kFunc(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kFunc));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kPlaceholder(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kPlaceholder));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_VALUE_NOT_SET(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::VALUE_NOT_SET));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_internal_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_internal_default_instance (should be 0)");
  
  result = (tensorflow::AttrValue *)tensorflow::AttrValue::internal_default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_UnsafeArenaSwap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  tensorflow::AttrValue *arg2 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_UnsafeArenaSwap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_UnsafeArenaSwap" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_UnsafeArenaSwap" "', argument " "2"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg2 = (tensorflow::AttrValue *)(argp2);
  (arg1)->UnsafeArenaSwap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  tensorflow::AttrValue *arg2 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_Swap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_Swap" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_Swap" "', argument " "2"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg2 = (tensorflow::AttrValue *)(argp2);
  (arg1)->Swap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::AttrValue *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_New" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (tensorflow::AttrValue *)((tensorflow::AttrValue const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::AttrValue *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_New" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (tensorflow::AttrValue *)((tensorflow::AttrValue const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue__wrap_AttrValue_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_CopyFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_CopyFrom" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_MergeFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_MergeFrom" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_CopyFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  tensorflow::AttrValue *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_CopyFrom" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__AttrValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_CopyFrom" "', argument " "2"" of type '" "tensorflow::AttrValue const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_CopyFrom" "', argument " "2"" of type '" "tensorflow::AttrValue const &""'"); 
  }
  arg2 = (tensorflow::AttrValue *)(argp2);
  (arg1)->CopyFrom((tensorflow::AttrValue const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue__wrap_AttrValue_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CopyFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_MergeFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  tensorflow::AttrValue *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_MergeFrom" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__AttrValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_MergeFrom" "', argument " "2"" of type '" "tensorflow::AttrValue const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_MergeFrom" "', argument " "2"" of type '" "tensorflow::AttrValue const &""'"); 
  }
  arg2 = (tensorflow::AttrValue *)(argp2);
  (arg1)->MergeFrom((tensorflow::AttrValue const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue__wrap_AttrValue_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MergeFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_Clear" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_IsInitialized" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (bool)((tensorflow::AttrValue const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_ByteSizeLong" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = ((tensorflow::AttrValue const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::google::protobuf::io::CodedInputStream *arg2 = (::google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_MergePartialFromCodedStream" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_MergePartialFromCodedStream" "', argument " "2"" of type '" "::google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::google::protobuf::io::CodedOutputStream *arg2 = (::google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_SerializeWithCachedSizes" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_SerializeWithCachedSizes" "', argument " "2"" of type '" "::google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedOutputStream *)(argp2);
  ((tensorflow::AttrValue const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  bool arg2 ;
  ::google::protobuf::uint8 *arg3 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AttrValue_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg3 = (::google::protobuf::uint8 *)(argp3);
  result = (::google::protobuf::uint8 *)((tensorflow::AttrValue const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::google::protobuf::uint8 *arg2 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg2 = (::google::protobuf::uint8 *)(argp2);
  result = (::google::protobuf::uint8 *)((tensorflow::AttrValue const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_GetCachedSize" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (int)((tensorflow::AttrValue const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_GetMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Metadata result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_GetMetadata (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_GetMetadata" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = ((tensorflow::AttrValue const *)arg1)->GetMetadata();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::Metadata((const ::google::protobuf::Metadata&)(result))), SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_clear_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_clear_s (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_clear_s" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  (arg1)->clear_s();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kSFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kSFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_s (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_s" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::std::string *) &((tensorflow::AttrValue const *)arg1)->s();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_s__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_s" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_s" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_set_s" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_s((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_s__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_s" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_s" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_s((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_s__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_s" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_s" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AttrValue_set_s" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_s((void const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue__wrap_AttrValue_set_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_set_s__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_set_s__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_set_s__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_set_s__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_set_s__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_set_s__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_s.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_mutable_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_mutable_s (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_mutable_s" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::std::string *)(arg1)->mutable_s();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_release_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_release_s (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_release_s" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::std::string *)(arg1)->release_s();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_allocated_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_set_allocated_s (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_allocated_s" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_allocated_s" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_s(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_unsafe_arena_release_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_unsafe_arena_release_s (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_unsafe_arena_release_s" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_s();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_unsafe_arena_set_allocated_s(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_unsafe_arena_set_allocated_s (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_unsafe_arena_set_allocated_s" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_unsafe_arena_set_allocated_s" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_s(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_clear_i(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_clear_i (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_clear_i" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  (arg1)->clear_i();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kIFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kIFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_i(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::int64 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_i (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_i" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = ((tensorflow::AttrValue const *)arg1)->i();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::int64((const ::google::protobuf::int64&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_i(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::google::protobuf::int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_set_i (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_i" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_i" "', argument " "2"" of type '" "::google::protobuf::int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_set_i" "', argument " "2"" of type '" "::google::protobuf::int64""'");
    } else {
      arg2 = *((::google::protobuf::int64 *)(argp2));
    }
  }
  (arg1)->set_i(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_clear_f(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_clear_f (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_clear_f" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  (arg1)->clear_f();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kFFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kFFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_f(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_f (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_f" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (float)((tensorflow::AttrValue const *)arg1)->f();
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_f(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_set_f (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_f" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_set_f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->set_f(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_clear_b(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_clear_b (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_clear_b" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  (arg1)->clear_b();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kBFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kBFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_b(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_b (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_b" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (bool)((tensorflow::AttrValue const *)arg1)->b();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_b(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_set_b (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_b" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_set_b" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->set_b(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_clear_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_clear_type (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_clear_type" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  (arg1)->clear_type();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kTypeFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kTypeFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::DataType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_type (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_type" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::DataType)((tensorflow::AttrValue const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::tensorflow::DataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_set_type (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_type" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AttrValue_set_type" "', argument " "2"" of type '" "::tensorflow::DataType""'");
  } 
  arg2 = (::tensorflow::DataType)(val2);
  (arg1)->set_type(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_has_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_has_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_has_shape" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (bool)((tensorflow::AttrValue const *)arg1)->has_shape();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_clear_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_clear_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_clear_shape" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  (arg1)->clear_shape();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kShapeFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kShapeFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorShapeProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_shape" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::TensorShapeProto *) &((tensorflow::AttrValue const *)arg1)->shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_mutable_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorShapeProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_mutable_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_mutable_shape" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::TensorShapeProto *)(arg1)->mutable_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_release_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorShapeProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_release_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_release_shape" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::TensorShapeProto *)(arg1)->release_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_allocated_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::tensorflow::TensorShapeProto *arg2 = (::tensorflow::TensorShapeProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_set_allocated_shape (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_allocated_shape" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_allocated_shape" "', argument " "2"" of type '" "::tensorflow::TensorShapeProto *""'"); 
  }
  arg2 = (::tensorflow::TensorShapeProto *)(argp2);
  (arg1)->set_allocated_shape(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_unsafe_arena_release_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorShapeProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_unsafe_arena_release_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_unsafe_arena_release_shape" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::TensorShapeProto *)(arg1)->unsafe_arena_release_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_unsafe_arena_set_allocated_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::tensorflow::TensorShapeProto *arg2 = (::tensorflow::TensorShapeProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_unsafe_arena_set_allocated_shape (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_unsafe_arena_set_allocated_shape" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_unsafe_arena_set_allocated_shape" "', argument " "2"" of type '" "::tensorflow::TensorShapeProto *""'"); 
  }
  arg2 = (::tensorflow::TensorShapeProto *)(argp2);
  (arg1)->unsafe_arena_set_allocated_shape(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_has_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_has_tensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_has_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (bool)((tensorflow::AttrValue const *)arg1)->has_tensor();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_clear_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_clear_tensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_clear_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  (arg1)->clear_tensor();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kTensorFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kTensorFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_tensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::TensorProto *) &((tensorflow::AttrValue const *)arg1)->tensor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_mutable_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_mutable_tensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_mutable_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::TensorProto *)(arg1)->mutable_tensor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_release_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_release_tensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_release_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::TensorProto *)(arg1)->release_tensor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_allocated_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::tensorflow::TensorProto *arg2 = (::tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_set_allocated_tensor (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_allocated_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_allocated_tensor" "', argument " "2"" of type '" "::tensorflow::TensorProto *""'"); 
  }
  arg2 = (::tensorflow::TensorProto *)(argp2);
  (arg1)->set_allocated_tensor(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_unsafe_arena_release_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_unsafe_arena_release_tensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_unsafe_arena_release_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::TensorProto *)(arg1)->unsafe_arena_release_tensor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_unsafe_arena_set_allocated_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::tensorflow::TensorProto *arg2 = (::tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_unsafe_arena_set_allocated_tensor (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_unsafe_arena_set_allocated_tensor" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_unsafe_arena_set_allocated_tensor" "', argument " "2"" of type '" "::tensorflow::TensorProto *""'"); 
  }
  arg2 = (::tensorflow::TensorProto *)(argp2);
  (arg1)->unsafe_arena_set_allocated_tensor(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_has_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_has_list (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_has_list" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (bool)((tensorflow::AttrValue const *)arg1)->has_list();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_clear_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_clear_list (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_clear_list" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  (arg1)->clear_list();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kListFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kListFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::AttrValue_ListValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_list (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_list" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::AttrValue_ListValue *) &((tensorflow::AttrValue const *)arg1)->list();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_mutable_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::AttrValue_ListValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_mutable_list (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_mutable_list" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::AttrValue_ListValue *)(arg1)->mutable_list();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_release_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::AttrValue_ListValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_release_list (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_release_list" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::AttrValue_ListValue *)(arg1)->release_list();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_allocated_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::tensorflow::AttrValue_ListValue *arg2 = (::tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_set_allocated_list (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_allocated_list" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_allocated_list" "', argument " "2"" of type '" "::tensorflow::AttrValue_ListValue *""'"); 
  }
  arg2 = (::tensorflow::AttrValue_ListValue *)(argp2);
  (arg1)->set_allocated_list(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_unsafe_arena_release_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::AttrValue_ListValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_unsafe_arena_release_list (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_unsafe_arena_release_list" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::AttrValue_ListValue *)(arg1)->unsafe_arena_release_list();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_unsafe_arena_set_allocated_list(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::tensorflow::AttrValue_ListValue *arg2 = (::tensorflow::AttrValue_ListValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_unsafe_arena_set_allocated_list (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_unsafe_arena_set_allocated_list" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__AttrValue_ListValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_unsafe_arena_set_allocated_list" "', argument " "2"" of type '" "::tensorflow::AttrValue_ListValue *""'"); 
  }
  arg2 = (::tensorflow::AttrValue_ListValue *)(argp2);
  (arg1)->unsafe_arena_set_allocated_list(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_has_func(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_has_func (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_has_func" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (bool)((tensorflow::AttrValue const *)arg1)->has_func();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_clear_func(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_clear_func (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_clear_func" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  (arg1)->clear_func();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kFuncFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kFuncFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_func(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::NameAttrList *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_func (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_func" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::NameAttrList *) &((tensorflow::AttrValue const *)arg1)->func();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_mutable_func(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::NameAttrList *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_mutable_func (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_mutable_func" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::NameAttrList *)(arg1)->mutable_func();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_release_func(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::NameAttrList *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_release_func (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_release_func" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::NameAttrList *)(arg1)->release_func();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_allocated_func(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::tensorflow::NameAttrList *arg2 = (::tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_set_allocated_func (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_allocated_func" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_allocated_func" "', argument " "2"" of type '" "::tensorflow::NameAttrList *""'"); 
  }
  arg2 = (::tensorflow::NameAttrList *)(argp2);
  (arg1)->set_allocated_func(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_unsafe_arena_release_func(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::NameAttrList *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_unsafe_arena_release_func (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_unsafe_arena_release_func" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::tensorflow::NameAttrList *)(arg1)->unsafe_arena_release_func();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_unsafe_arena_set_allocated_func(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::tensorflow::NameAttrList *arg2 = (::tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_unsafe_arena_set_allocated_func (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_unsafe_arena_set_allocated_func" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_unsafe_arena_set_allocated_func" "', argument " "2"" of type '" "::tensorflow::NameAttrList *""'"); 
  }
  arg2 = (::tensorflow::NameAttrList *)(argp2);
  (arg1)->unsafe_arena_set_allocated_func(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_clear_placeholder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_clear_placeholder (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_clear_placeholder" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  (arg1)->clear_placeholder();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_AttrValue_kPlaceholderFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::AttrValue::kPlaceholderFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_AttrValue_placeholder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_placeholder (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_placeholder" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::std::string *) &((tensorflow::AttrValue const *)arg1)->placeholder();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_placeholder__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_placeholder" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_placeholder" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AttrValue_set_placeholder" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_placeholder((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_placeholder__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_placeholder" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_placeholder" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_placeholder((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_placeholder__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_placeholder" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_placeholder" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AttrValue_set_placeholder" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_placeholder((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue__wrap_AttrValue_set_placeholder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_set_placeholder__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_set_placeholder__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_set_placeholder__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_set_placeholder__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_AttrValue_set_placeholder__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_AttrValue_set_placeholder__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_placeholder.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_mutable_placeholder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_mutable_placeholder (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_mutable_placeholder" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::std::string *)(arg1)->mutable_placeholder();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_release_placeholder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_release_placeholder (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_release_placeholder" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::std::string *)(arg1)->release_placeholder();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_set_allocated_placeholder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_set_allocated_placeholder (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_set_allocated_placeholder" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_set_allocated_placeholder" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_placeholder(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_unsafe_arena_release_placeholder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_unsafe_arena_release_placeholder (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_unsafe_arena_release_placeholder" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_placeholder();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_unsafe_arena_set_allocated_placeholder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_unsafe_arena_set_allocated_placeholder (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_unsafe_arena_set_allocated_placeholder" "', argument " "1"" of type '" "tensorflow::AttrValue *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AttrValue_unsafe_arena_set_allocated_placeholder" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_placeholder(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AttrValue_value_case(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::AttrValue *arg1 = (tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::AttrValue::ValueCase result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AttrValue_value_case (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_value_case" "', argument " "1"" of type '" "tensorflow::AttrValue const *""'"); 
  }
  arg1 = (tensorflow::AttrValue *)(argp1);
  result = (tensorflow::AttrValue::ValueCase)((tensorflow::AttrValue const *)arg1)->value_case();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_AttrValue_default_instance__set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue > *arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AttrValue_default_instance__set" "', argument " "1"" of type '" "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue > *""'"); 
  }
  arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue > *)(argp1);
  tensorflow::AttrValue_default_instance_ = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_AttrValue_default_instance__get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue > *result = 0 ;
  
  result = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue > *)&tensorflow::AttrValue_default_instance_;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_t, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_NameAttrList__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::NameAttrList *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_NameAttrList__SWIG_0 (should be 0)");
  result = (tensorflow::NameAttrList *)new tensorflow::NameAttrList();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__NameAttrList, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_NameAttrList(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_NameAttrList(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_NameAttrList(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_NameAttrList(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::NameAttrList * arg1 = (tensorflow::NameAttrList *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_NameAttrList__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::NameAttrList *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::NameAttrList *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_NameAttrList__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__NameAttrList,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NameAttrList" "', argument " "1"" of type '" "tensorflow::NameAttrList const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NameAttrList" "', argument " "1"" of type '" "tensorflow::NameAttrList const &""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (tensorflow::NameAttrList *)new tensorflow::NameAttrList((tensorflow::NameAttrList const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__NameAttrList, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_NameAttrList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_NameAttrList__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_NameAttrList__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_NameAttrList__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_NameAttrList__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_NameAttrList");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_GetArena" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (::google::protobuf::Arena *)((tensorflow::NameAttrList const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_GetMaybeArenaPointer" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (void *)((tensorflow::NameAttrList const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_descriptor (should be 0)");
  
  result = (::google::protobuf::Descriptor *)tensorflow::NameAttrList::descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_default_instance (should be 0)");
  
  result = (tensorflow::NameAttrList *) &tensorflow::NameAttrList::default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_internal_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_internal_default_instance (should be 0)");
  
  result = (tensorflow::NameAttrList *)tensorflow::NameAttrList::internal_default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_UnsafeArenaSwap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  tensorflow::NameAttrList *arg2 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_UnsafeArenaSwap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_UnsafeArenaSwap" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_UnsafeArenaSwap" "', argument " "2"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg2 = (tensorflow::NameAttrList *)(argp2);
  (arg1)->UnsafeArenaSwap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  tensorflow::NameAttrList *arg2 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_Swap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_Swap" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_Swap" "', argument " "2"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg2 = (tensorflow::NameAttrList *)(argp2);
  (arg1)->Swap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::NameAttrList *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_New" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (tensorflow::NameAttrList *)((tensorflow::NameAttrList const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::NameAttrList *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_New" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (tensorflow::NameAttrList *)((tensorflow::NameAttrList const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList__wrap_NameAttrList_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NameAttrList_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NameAttrList_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NameAttrList_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NameAttrList_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_CopyFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_CopyFrom" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NameAttrList_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_MergeFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_MergeFrom" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NameAttrList_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_CopyFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  tensorflow::NameAttrList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_CopyFrom" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__NameAttrList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_CopyFrom" "', argument " "2"" of type '" "tensorflow::NameAttrList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NameAttrList_CopyFrom" "', argument " "2"" of type '" "tensorflow::NameAttrList const &""'"); 
  }
  arg2 = (tensorflow::NameAttrList *)(argp2);
  (arg1)->CopyFrom((tensorflow::NameAttrList const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList__wrap_NameAttrList_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NameAttrList_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NameAttrList_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NameAttrList_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NameAttrList_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CopyFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_MergeFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  tensorflow::NameAttrList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_MergeFrom" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__NameAttrList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_MergeFrom" "', argument " "2"" of type '" "tensorflow::NameAttrList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NameAttrList_MergeFrom" "', argument " "2"" of type '" "tensorflow::NameAttrList const &""'"); 
  }
  arg2 = (tensorflow::NameAttrList *)(argp2);
  (arg1)->MergeFrom((tensorflow::NameAttrList const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList__wrap_NameAttrList_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NameAttrList_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NameAttrList_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NameAttrList_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NameAttrList_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MergeFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_Clear" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_IsInitialized" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (bool)((tensorflow::NameAttrList const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_ByteSizeLong" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = ((tensorflow::NameAttrList const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  ::google::protobuf::io::CodedInputStream *arg2 = (::google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_MergePartialFromCodedStream" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_MergePartialFromCodedStream" "', argument " "2"" of type '" "::google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  ::google::protobuf::io::CodedOutputStream *arg2 = (::google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_SerializeWithCachedSizes" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_SerializeWithCachedSizes" "', argument " "2"" of type '" "::google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedOutputStream *)(argp2);
  ((tensorflow::NameAttrList const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  bool arg2 ;
  ::google::protobuf::uint8 *arg3 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NameAttrList_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NameAttrList_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg3 = (::google::protobuf::uint8 *)(argp3);
  result = (::google::protobuf::uint8 *)((tensorflow::NameAttrList const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  ::google::protobuf::uint8 *arg2 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg2 = (::google::protobuf::uint8 *)(argp2);
  result = (::google::protobuf::uint8 *)((tensorflow::NameAttrList const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_GetCachedSize" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (int)((tensorflow::NameAttrList const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_GetMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Metadata result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_GetMetadata (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_GetMetadata" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = ((tensorflow::NameAttrList const *)arg1)->GetMetadata();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::Metadata((const ::google::protobuf::Metadata&)(result))), SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_clear_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_clear_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_clear_name" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  (arg1)->clear_name();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_NameAttrList_kNameFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::NameAttrList::kNameFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_NameAttrList_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_name" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (::std::string *) &((tensorflow::NameAttrList const *)arg1)->name();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_set_name__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_set_name" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_set_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NameAttrList_set_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_name((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_set_name__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_set_name" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_set_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_name((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_set_name__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_set_name" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_set_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NameAttrList_set_name" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_name((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList__wrap_NameAttrList_set_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NameAttrList_set_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NameAttrList_set_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NameAttrList_set_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NameAttrList_set_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NameAttrList_set_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NameAttrList_set_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_name.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_mutable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_mutable_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_mutable_name" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (::std::string *)(arg1)->mutable_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_release_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_release_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_release_name" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (::std::string *)(arg1)->release_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_set_allocated_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_set_allocated_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_set_allocated_name" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_set_allocated_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_unsafe_arena_release_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_unsafe_arena_release_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_unsafe_arena_release_name" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_unsafe_arena_set_allocated_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_unsafe_arena_set_allocated_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_unsafe_arena_set_allocated_name" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NameAttrList_unsafe_arena_set_allocated_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_attr_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_attr_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_attr_size" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (int)((tensorflow::NameAttrList const *)arg1)->attr_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_clear_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_clear_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_clear_attr" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  (arg1)->clear_attr();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_NameAttrList_kAttrFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::NameAttrList::kAttrFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_NameAttrList_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Map< ::std::string,::tensorflow::AttrValue > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_attr" "', argument " "1"" of type '" "tensorflow::NameAttrList const *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (::google::protobuf::Map< ::std::string,::tensorflow::AttrValue > *) &((tensorflow::NameAttrList const *)arg1)->attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__MapT_std__string___tensorflow__AttrValue_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NameAttrList_mutable_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NameAttrList *arg1 = (tensorflow::NameAttrList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Map< ::std::string,::tensorflow::AttrValue > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NameAttrList_mutable_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NameAttrList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_mutable_attr" "', argument " "1"" of type '" "tensorflow::NameAttrList *""'"); 
  }
  arg1 = (tensorflow::NameAttrList *)(argp1);
  result = (::google::protobuf::Map< ::std::string,::tensorflow::AttrValue > *)(arg1)->mutable_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__MapT_std__string___tensorflow__AttrValue_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_NameAttrList_default_instance__set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NameAttrList > *arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NameAttrList > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NameAttrList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NameAttrList_default_instance__set" "', argument " "1"" of type '" "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NameAttrList > *""'"); 
  }
  arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NameAttrList > *)(argp1);
  tensorflow::NameAttrList_default_instance_ = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_NameAttrList_default_instance__get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NameAttrList > *result = 0 ;
  
  result = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NameAttrList > *)&tensorflow::NameAttrList_default_instance_;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NameAttrList_t, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto (should be 0)");
  
  tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_2eproto (should be 0)");
  
  tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto (should be 0)");
  
  tensorflow::protobuf_AssignDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2ftensor_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2ftensor_2eproto (should be 0)");
  
  tensorflow::protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TensorProto__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::TensorProto *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TensorProto__SWIG_0 (should be 0)");
  result = (tensorflow::TensorProto *)new tensorflow::TensorProto();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__TensorProto, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TensorProto(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TensorProto(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TensorProto(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TensorProto(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::TensorProto * arg1 = (tensorflow::TensorProto *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_TensorProto__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::TensorProto *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::TensorProto *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TensorProto__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__TensorProto,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TensorProto" "', argument " "1"" of type '" "tensorflow::TensorProto const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TensorProto" "', argument " "1"" of type '" "tensorflow::TensorProto const &""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (tensorflow::TensorProto *)new tensorflow::TensorProto((tensorflow::TensorProto const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__TensorProto, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TensorProto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TensorProto__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TensorProto__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TensorProto__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TensorProto__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_TensorProto");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_GetArena" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::Arena *)((tensorflow::TensorProto const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_GetMaybeArenaPointer" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (void *)((tensorflow::TensorProto const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_descriptor (should be 0)");
  
  result = (::google::protobuf::Descriptor *)tensorflow::TensorProto::descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_default_instance (should be 0)");
  
  result = (tensorflow::TensorProto *) &tensorflow::TensorProto::default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_internal_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_internal_default_instance (should be 0)");
  
  result = (tensorflow::TensorProto *)tensorflow::TensorProto::internal_default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_UnsafeArenaSwap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  tensorflow::TensorProto *arg2 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_UnsafeArenaSwap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_UnsafeArenaSwap" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_UnsafeArenaSwap" "', argument " "2"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg2 = (tensorflow::TensorProto *)(argp2);
  (arg1)->UnsafeArenaSwap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  tensorflow::TensorProto *arg2 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_Swap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_Swap" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_Swap" "', argument " "2"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg2 = (tensorflow::TensorProto *)(argp2);
  (arg1)->Swap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::TensorProto *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_New" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (tensorflow::TensorProto *)((tensorflow::TensorProto const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::TensorProto *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_New" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (tensorflow::TensorProto *)((tensorflow::TensorProto const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_CopyFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_CopyFrom" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_MergeFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_MergeFrom" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_CopyFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  tensorflow::TensorProto *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_CopyFrom" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__TensorProto,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_CopyFrom" "', argument " "2"" of type '" "tensorflow::TensorProto const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_CopyFrom" "', argument " "2"" of type '" "tensorflow::TensorProto const &""'"); 
  }
  arg2 = (tensorflow::TensorProto *)(argp2);
  (arg1)->CopyFrom((tensorflow::TensorProto const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CopyFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_MergeFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  tensorflow::TensorProto *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_MergeFrom" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__TensorProto,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_MergeFrom" "', argument " "2"" of type '" "tensorflow::TensorProto const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_MergeFrom" "', argument " "2"" of type '" "tensorflow::TensorProto const &""'"); 
  }
  arg2 = (tensorflow::TensorProto *)(argp2);
  (arg1)->MergeFrom((tensorflow::TensorProto const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MergeFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_Clear" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_IsInitialized" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (bool)((tensorflow::TensorProto const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_ByteSizeLong" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = ((tensorflow::TensorProto const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::google::protobuf::io::CodedInputStream *arg2 = (::google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_MergePartialFromCodedStream" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_MergePartialFromCodedStream" "', argument " "2"" of type '" "::google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::google::protobuf::io::CodedOutputStream *arg2 = (::google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_SerializeWithCachedSizes" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_SerializeWithCachedSizes" "', argument " "2"" of type '" "::google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedOutputStream *)(argp2);
  ((tensorflow::TensorProto const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  bool arg2 ;
  ::google::protobuf::uint8 *arg3 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TensorProto_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg3 = (::google::protobuf::uint8 *)(argp3);
  result = (::google::protobuf::uint8 *)((tensorflow::TensorProto const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::google::protobuf::uint8 *arg2 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg2 = (::google::protobuf::uint8 *)(argp2);
  result = (::google::protobuf::uint8 *)((tensorflow::TensorProto const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_GetCachedSize" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (int)((tensorflow::TensorProto const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_GetMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Metadata result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_GetMetadata (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_GetMetadata" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = ((tensorflow::TensorProto const *)arg1)->GetMetadata();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::Metadata((const ::google::protobuf::Metadata&)(result))), SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_dtype(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_dtype (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_dtype" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_dtype();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kDtypeFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kDtypeFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_dtype(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::DataType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_dtype (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_dtype" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::tensorflow::DataType)((tensorflow::TensorProto const *)arg1)->dtype();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_dtype(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::tensorflow::DataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_set_dtype (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_dtype" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_set_dtype" "', argument " "2"" of type '" "::tensorflow::DataType""'");
  } 
  arg2 = (::tensorflow::DataType)(val2);
  (arg1)->set_dtype(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_has_tensor_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_has_tensor_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_has_tensor_shape" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (bool)((tensorflow::TensorProto const *)arg1)->has_tensor_shape();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_tensor_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_tensor_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_tensor_shape" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_tensor_shape();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kTensorShapeFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kTensorShapeFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_tensor_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorShapeProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_tensor_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_tensor_shape" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::tensorflow::TensorShapeProto *) &((tensorflow::TensorProto const *)arg1)->tensor_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_tensor_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorShapeProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_mutable_tensor_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_tensor_shape" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::tensorflow::TensorShapeProto *)(arg1)->mutable_tensor_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_release_tensor_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorShapeProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_release_tensor_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_release_tensor_shape" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::tensorflow::TensorShapeProto *)(arg1)->release_tensor_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_allocated_tensor_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::tensorflow::TensorShapeProto *arg2 = (::tensorflow::TensorShapeProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_set_allocated_tensor_shape (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_allocated_tensor_shape" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_set_allocated_tensor_shape" "', argument " "2"" of type '" "::tensorflow::TensorShapeProto *""'"); 
  }
  arg2 = (::tensorflow::TensorShapeProto *)(argp2);
  (arg1)->set_allocated_tensor_shape(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_unsafe_arena_release_tensor_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::TensorShapeProto *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_unsafe_arena_release_tensor_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_unsafe_arena_release_tensor_shape" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::tensorflow::TensorShapeProto *)(arg1)->unsafe_arena_release_tensor_shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_unsafe_arena_set_allocated_tensor_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::tensorflow::TensorShapeProto *arg2 = (::tensorflow::TensorShapeProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_unsafe_arena_set_allocated_tensor_shape (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_unsafe_arena_set_allocated_tensor_shape" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__TensorShapeProto, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_unsafe_arena_set_allocated_tensor_shape" "', argument " "2"" of type '" "::tensorflow::TensorShapeProto *""'"); 
  }
  arg2 = (::tensorflow::TensorShapeProto *)(argp2);
  (arg1)->unsafe_arena_set_allocated_tensor_shape(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_version_number(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_version_number (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_version_number" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_version_number();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kVersionNumberFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kVersionNumberFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_version_number(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::int32 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_version_number (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_version_number" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = ((tensorflow::TensorProto const *)arg1)->version_number();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::int32((const ::google::protobuf::int32&)(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_version_number(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::google::protobuf::int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_set_version_number (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_version_number" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_set_version_number" "', argument " "2"" of type '" "::google::protobuf::int32""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_set_version_number" "', argument " "2"" of type '" "::google::protobuf::int32""'");
    } else {
      arg2 = *((::google::protobuf::int32 *)(argp2));
    }
  }
  (arg1)->set_version_number(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_tensor_content(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_tensor_content (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_tensor_content" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_tensor_content();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kTensorContentFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kTensorContentFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_tensor_content(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_tensor_content (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_tensor_content" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::std::string *) &((tensorflow::TensorProto const *)arg1)->tensor_content();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_tensor_content__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_tensor_content" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_set_tensor_content" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_set_tensor_content" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_tensor_content((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_tensor_content__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_tensor_content" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_set_tensor_content" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_tensor_content((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_tensor_content__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_tensor_content" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_set_tensor_content" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TensorProto_set_tensor_content" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_tensor_content((void const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_set_tensor_content(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_set_tensor_content__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_set_tensor_content__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_set_tensor_content__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_set_tensor_content__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_set_tensor_content__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_set_tensor_content__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_tensor_content.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_tensor_content(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_mutable_tensor_content (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_tensor_content" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::std::string *)(arg1)->mutable_tensor_content();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_release_tensor_content(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_release_tensor_content (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_release_tensor_content" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::std::string *)(arg1)->release_tensor_content();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_allocated_tensor_content(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_set_allocated_tensor_content (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_allocated_tensor_content" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_set_allocated_tensor_content" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_tensor_content(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_unsafe_arena_release_tensor_content(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_unsafe_arena_release_tensor_content (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_unsafe_arena_release_tensor_content" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_tensor_content();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_unsafe_arena_set_allocated_tensor_content(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_unsafe_arena_set_allocated_tensor_content (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_unsafe_arena_set_allocated_tensor_content" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_unsafe_arena_set_allocated_tensor_content" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_tensor_content(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_half_val_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_half_val_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_half_val_size" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (int)((tensorflow::TensorProto const *)arg1)->half_val_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_half_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_half_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_half_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_half_val();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kHalfValFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kHalfValFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_half_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::google::protobuf::int32 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_half_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_half_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((tensorflow::TensorProto const *)arg1)->half_val(arg2);
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::int32((const ::google::protobuf::int32&)(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_half_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  ::google::protobuf::int32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_set_half_val (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_half_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_set_half_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TensorProto_set_half_val" "', argument " "3"" of type '" "::google::protobuf::int32""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_set_half_val" "', argument " "3"" of type '" "::google::protobuf::int32""'");
    } else {
      arg3 = *((::google::protobuf::int32 *)(argp3));
    }
  }
  (arg1)->set_half_val(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_half_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::google::protobuf::int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_add_half_val (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_half_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_add_half_val" "', argument " "2"" of type '" "::google::protobuf::int32""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_add_half_val" "', argument " "2"" of type '" "::google::protobuf::int32""'");
    } else {
      arg2 = *((::google::protobuf::int32 *)(argp2));
    }
  }
  (arg1)->add_half_val(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_half_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_half_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int32 > *) &((tensorflow::TensorProto const *)arg1)->half_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int32_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_half_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_half_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_half_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_half_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_half_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function half_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_half_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_mutable_half_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_half_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int32 > *)(arg1)->mutable_half_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int32_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_float_val_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_float_val_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_float_val_size" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (int)((tensorflow::TensorProto const *)arg1)->float_val_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_float_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_float_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_float_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_float_val();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kFloatValFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kFloatValFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_float_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_float_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_float_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (float)((tensorflow::TensorProto const *)arg1)->float_val(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_float_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_set_float_val (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_float_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_set_float_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TensorProto_set_float_val" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->set_float_val(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_float_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_add_float_val (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_float_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_add_float_val" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->add_float_val(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_float_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< float > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_float_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< float > *) &((tensorflow::TensorProto const *)arg1)->float_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_float_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_float_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_float_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_float_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_float_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_float_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function float_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_float_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< float > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_mutable_float_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_float_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< float > *)(arg1)->mutable_float_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_float_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_double_val_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_double_val_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_double_val_size" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (int)((tensorflow::TensorProto const *)arg1)->double_val_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_double_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_double_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_double_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_double_val();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kDoubleValFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kDoubleValFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_double_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_double_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_double_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (double)((tensorflow::TensorProto const *)arg1)->double_val(arg2);
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_double_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_set_double_val (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_double_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_set_double_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TensorProto_set_double_val" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  (arg1)->set_double_val(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_double_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_add_double_val (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_double_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_add_double_val" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  (arg1)->add_double_val(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_double_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< double > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_double_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< double > *) &((tensorflow::TensorProto const *)arg1)->double_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_double_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_double_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_double_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_double_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_double_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_double_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function double_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_double_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< double > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_mutable_double_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_double_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< double > *)(arg1)->mutable_double_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_double_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_int_val_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_int_val_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_int_val_size" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (int)((tensorflow::TensorProto const *)arg1)->int_val_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_int_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_int_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_int_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_int_val();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kIntValFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kIntValFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_int_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::google::protobuf::int32 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_int_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_int_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((tensorflow::TensorProto const *)arg1)->int_val(arg2);
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::int32((const ::google::protobuf::int32&)(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_int_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  ::google::protobuf::int32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_set_int_val (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_int_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_set_int_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TensorProto_set_int_val" "', argument " "3"" of type '" "::google::protobuf::int32""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_set_int_val" "', argument " "3"" of type '" "::google::protobuf::int32""'");
    } else {
      arg3 = *((::google::protobuf::int32 *)(argp3));
    }
  }
  (arg1)->set_int_val(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_int_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::google::protobuf::int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_add_int_val (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_int_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_add_int_val" "', argument " "2"" of type '" "::google::protobuf::int32""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_add_int_val" "', argument " "2"" of type '" "::google::protobuf::int32""'");
    } else {
      arg2 = *((::google::protobuf::int32 *)(argp2));
    }
  }
  (arg1)->add_int_val(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_int_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_int_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int32 > *) &((tensorflow::TensorProto const *)arg1)->int_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int32_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_int_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_int_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_int_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_int_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_int_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function int_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_int_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_mutable_int_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_int_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int32 > *)(arg1)->mutable_int_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int32_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_string_val_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_string_val_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_string_val_size" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (int)((tensorflow::TensorProto const *)arg1)->string_val_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_string_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_string_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_string_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_string_val();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kStringValFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kStringValFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_string_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_string_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_string_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::std::string *) &((tensorflow::TensorProto const *)arg1)->string_val(arg2);
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_string_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_string_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_mutable_string_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::std::string *)(arg1)->mutable_string_val(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_string_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  ::std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_string_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_set_string_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TensorProto_set_string_val" "', argument " "3"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_set_string_val" "', argument " "3"" of type '" "::std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->set_string_val(arg2,(::std::string const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_string_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_string_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_set_string_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_AsCharPtrAndSize(args[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TensorProto_set_string_val" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  (arg1)->set_string_val(arg2,(char const *)arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_string_val__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_string_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_set_string_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg3), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TensorProto_set_string_val" "', argument " "3"" of type '" "void const *""'"); 
  }
  ecode4 = SWIG_AsVal_size_t(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TensorProto_set_string_val" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  (arg1)->set_string_val(arg2,(void const *)arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_set_string_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_set_string_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_set_string_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_set_string_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_set_string_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_set_string_val__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_set_string_val__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_string_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_string_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_string_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::std::string *)(arg1)->add_string_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_string_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_string_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_add_string_val" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_add_string_val" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->add_string_val((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_string_val__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_string_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_add_string_val" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->add_string_val((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_string_val__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_string_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  res2 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_add_string_val" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TensorProto_add_string_val" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->add_string_val((void const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_add_string_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_add_string_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_add_string_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_add_string_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_add_string_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_add_string_val__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_add_string_val__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_add_string_val__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_add_string_val__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add_string_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_string_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::std::string > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_string_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::std::string > *) &((tensorflow::TensorProto const *)arg1)->string_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_string_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_string_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_string_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_string_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_string_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function string_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_string_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::std::string > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_string_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::std::string > *)(arg1)->mutable_string_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_mutable_string_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_mutable_string_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_mutable_string_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_mutable_string_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_mutable_string_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mutable_string_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_scomplex_val_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_scomplex_val_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_scomplex_val_size" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (int)((tensorflow::TensorProto const *)arg1)->scomplex_val_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_scomplex_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_scomplex_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_scomplex_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_scomplex_val();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kScomplexValFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kScomplexValFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_scomplex_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_scomplex_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_scomplex_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (float)((tensorflow::TensorProto const *)arg1)->scomplex_val(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_scomplex_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_set_scomplex_val (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_scomplex_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_set_scomplex_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TensorProto_set_scomplex_val" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->set_scomplex_val(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_scomplex_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_add_scomplex_val (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_scomplex_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_add_scomplex_val" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->add_scomplex_val(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_scomplex_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< float > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_scomplex_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< float > *) &((tensorflow::TensorProto const *)arg1)->scomplex_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_float_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_scomplex_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_scomplex_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_scomplex_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_scomplex_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_scomplex_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function scomplex_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_scomplex_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< float > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_mutable_scomplex_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_scomplex_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< float > *)(arg1)->mutable_scomplex_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_float_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_int64_val_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_int64_val_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_int64_val_size" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (int)((tensorflow::TensorProto const *)arg1)->int64_val_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_int64_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_int64_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_int64_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_int64_val();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kInt64ValFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kInt64ValFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_int64_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::google::protobuf::int64 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_int64_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_int64_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((tensorflow::TensorProto const *)arg1)->int64_val(arg2);
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::int64((const ::google::protobuf::int64&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_int64_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  ::google::protobuf::int64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_set_int64_val (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_int64_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_set_int64_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TensorProto_set_int64_val" "', argument " "3"" of type '" "::google::protobuf::int64""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_set_int64_val" "', argument " "3"" of type '" "::google::protobuf::int64""'");
    } else {
      arg3 = *((::google::protobuf::int64 *)(argp3));
    }
  }
  (arg1)->set_int64_val(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_int64_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  ::google::protobuf::int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_add_int64_val (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_int64_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorProto_add_int64_val" "', argument " "2"" of type '" "::google::protobuf::int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorProto_add_int64_val" "', argument " "2"" of type '" "::google::protobuf::int64""'");
    } else {
      arg2 = *((::google::protobuf::int64 *)(argp2));
    }
  }
  (arg1)->add_int64_val(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_int64_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_int64_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int64 > *) &((tensorflow::TensorProto const *)arg1)->int64_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int64_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_int64_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_int64_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_int64_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_int64_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_int64_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function int64_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_int64_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_mutable_int64_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_int64_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< ::google::protobuf::int64 > *)(arg1)->mutable_int64_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_int64_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_bool_val_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_bool_val_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_bool_val_size" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (int)((tensorflow::TensorProto const *)arg1)->bool_val_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_bool_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_bool_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_bool_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_bool_val();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kBoolValFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kBoolValFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_bool_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_bool_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_bool_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)((tensorflow::TensorProto const *)arg1)->bool_val(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_bool_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_set_bool_val (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_bool_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_set_bool_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TensorProto_set_bool_val" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->set_bool_val(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_bool_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_add_bool_val (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_bool_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_add_bool_val" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->add_bool_val(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_bool_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< bool > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_bool_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< bool > *) &((tensorflow::TensorProto const *)arg1)->bool_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_bool_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_bool_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_bool_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_bool_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_bool_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_bool_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function bool_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_bool_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< bool > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_mutable_bool_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_bool_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< bool > *)(arg1)->mutable_bool_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_bool_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_dcomplex_val_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_dcomplex_val_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_dcomplex_val_size" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (int)((tensorflow::TensorProto const *)arg1)->dcomplex_val_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_dcomplex_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_dcomplex_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_dcomplex_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_dcomplex_val();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kDcomplexValFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kDcomplexValFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_dcomplex_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_dcomplex_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_dcomplex_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (double)((tensorflow::TensorProto const *)arg1)->dcomplex_val(arg2);
  jsresult = SWIG_From_double((double)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_set_dcomplex_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_set_dcomplex_val (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_set_dcomplex_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_set_dcomplex_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TensorProto_set_dcomplex_val" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  (arg1)->set_dcomplex_val(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_dcomplex_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_add_dcomplex_val (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_dcomplex_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_add_dcomplex_val" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  (arg1)->add_dcomplex_val(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_dcomplex_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< double > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_dcomplex_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< double > *) &((tensorflow::TensorProto const *)arg1)->dcomplex_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_double_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_dcomplex_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_dcomplex_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_dcomplex_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_dcomplex_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_dcomplex_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function dcomplex_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_dcomplex_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedField< double > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_mutable_dcomplex_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_dcomplex_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedField< double > *)(arg1)->mutable_dcomplex_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedFieldT_double_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_resource_handle_val_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_resource_handle_val_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_resource_handle_val_size" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (int)((tensorflow::TensorProto const *)arg1)->resource_handle_val_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_clear_resource_handle_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_clear_resource_handle_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_clear_resource_handle_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  (arg1)->clear_resource_handle_val();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_TensorProto_kResourceHandleValFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::TensorProto::kResourceHandleValFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TensorProto_resource_handle_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::ResourceHandle *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_resource_handle_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_resource_handle_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::ResourceHandle *) &((tensorflow::TensorProto const *)arg1)->resource_handle_val(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__ResourceHandle, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_resource_handle_val__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::ResourceHandle *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_resource_handle_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorProto_mutable_resource_handle_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::ResourceHandle *)(arg1)->mutable_resource_handle_val(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__ResourceHandle, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_add_resource_handle_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::ResourceHandle *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorProto_add_resource_handle_val (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_add_resource_handle_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::tensorflow::ResourceHandle *)(arg1)->add_resource_handle_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__ResourceHandle, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_mutable_resource_handle_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::ResourceHandle > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_mutable_resource_handle_val" "', argument " "1"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::ResourceHandle > *)(arg1)->mutable_resource_handle_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__ResourceHandle_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_mutable_resource_handle_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_mutable_resource_handle_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_mutable_resource_handle_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_mutable_resource_handle_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_mutable_resource_handle_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mutable_resource_handle_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto_resource_handle_val__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorProto *arg1 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::ResourceHandle > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_resource_handle_val" "', argument " "1"" of type '" "tensorflow::TensorProto const *""'"); 
  }
  arg1 = (tensorflow::TensorProto *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::ResourceHandle > *) &((tensorflow::TensorProto const *)arg1)->resource_handle_val();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__ResourceHandle_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorProto__wrap_TensorProto_resource_handle_val(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_resource_handle_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_resource_handle_val__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorProto_resource_handle_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorProto_resource_handle_val__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function resource_handle_val.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_TensorProto_default_instance__set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::TensorProto > *arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::TensorProto > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__TensorProto_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorProto_default_instance__set" "', argument " "1"" of type '" "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::TensorProto > *""'"); 
  }
  arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::TensorProto > *)(argp1);
  tensorflow::TensorProto_default_instance_ = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TensorProto_default_instance__get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::TensorProto > *result = 0 ;
  
  result = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::TensorProto > *)&tensorflow::TensorProto_default_instance_;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__TensorProto_t, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto (should be 0)");
  
  tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto (should be 0)");
  
  tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto (should be 0)");
  
  tensorflow::protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto (should be 0)");
  
  tensorflow::protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_OpDef_ArgDef__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::OpDef_ArgDef *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpDef_ArgDef__SWIG_0 (should be 0)");
  result = (tensorflow::OpDef_ArgDef *)new tensorflow::OpDef_ArgDef();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__OpDef_ArgDef, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_OpDef_ArgDef(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_OpDef_ArgDef(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_OpDef_ArgDef(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_OpDef_ArgDef(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::OpDef_ArgDef * arg1 = (tensorflow::OpDef_ArgDef *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_OpDef_ArgDef__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::OpDef_ArgDef *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::OpDef_ArgDef *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpDef_ArgDef__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__OpDef_ArgDef,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpDef_ArgDef" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OpDef_ArgDef" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const &""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (tensorflow::OpDef_ArgDef *)new tensorflow::OpDef_ArgDef((tensorflow::OpDef_ArgDef const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__OpDef_ArgDef, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_OpDef_ArgDef(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_OpDef_ArgDef__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_OpDef_ArgDef__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_OpDef_ArgDef__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_OpDef_ArgDef__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_OpDef_ArgDef");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_GetArena" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::google::protobuf::Arena *)((tensorflow::OpDef_ArgDef const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_GetMaybeArenaPointer" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (void *)((tensorflow::OpDef_ArgDef const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_descriptor (should be 0)");
  
  result = (::google::protobuf::Descriptor *)tensorflow::OpDef_ArgDef::descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_default_instance (should be 0)");
  
  result = (tensorflow::OpDef_ArgDef *) &tensorflow::OpDef_ArgDef::default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_internal_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_internal_default_instance (should be 0)");
  
  result = (tensorflow::OpDef_ArgDef *)tensorflow::OpDef_ArgDef::internal_default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_UnsafeArenaSwap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  tensorflow::OpDef_ArgDef *arg2 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_UnsafeArenaSwap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_UnsafeArenaSwap" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_UnsafeArenaSwap" "', argument " "2"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg2 = (tensorflow::OpDef_ArgDef *)(argp2);
  (arg1)->UnsafeArenaSwap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  tensorflow::OpDef_ArgDef *arg2 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_Swap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_Swap" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_Swap" "', argument " "2"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg2 = (tensorflow::OpDef_ArgDef *)(argp2);
  (arg1)->Swap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::OpDef_ArgDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_New" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (tensorflow::OpDef_ArgDef *)((tensorflow::OpDef_ArgDef const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::OpDef_ArgDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_New" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (tensorflow::OpDef_ArgDef *)((tensorflow::OpDef_ArgDef const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_CopyFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_CopyFrom" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_ArgDef_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_MergeFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_MergeFrom" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_ArgDef_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_CopyFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  tensorflow::OpDef_ArgDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_CopyFrom" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__OpDef_ArgDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_CopyFrom" "', argument " "2"" of type '" "tensorflow::OpDef_ArgDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_ArgDef_CopyFrom" "', argument " "2"" of type '" "tensorflow::OpDef_ArgDef const &""'"); 
  }
  arg2 = (tensorflow::OpDef_ArgDef *)(argp2);
  (arg1)->CopyFrom((tensorflow::OpDef_ArgDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CopyFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_MergeFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  tensorflow::OpDef_ArgDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_MergeFrom" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__OpDef_ArgDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_MergeFrom" "', argument " "2"" of type '" "tensorflow::OpDef_ArgDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_ArgDef_MergeFrom" "', argument " "2"" of type '" "tensorflow::OpDef_ArgDef const &""'"); 
  }
  arg2 = (tensorflow::OpDef_ArgDef *)(argp2);
  (arg1)->MergeFrom((tensorflow::OpDef_ArgDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MergeFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_Clear" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_IsInitialized" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (bool)((tensorflow::OpDef_ArgDef const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_ByteSizeLong" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = ((tensorflow::OpDef_ArgDef const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::google::protobuf::io::CodedInputStream *arg2 = (::google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_MergePartialFromCodedStream" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_MergePartialFromCodedStream" "', argument " "2"" of type '" "::google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::google::protobuf::io::CodedOutputStream *arg2 = (::google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_SerializeWithCachedSizes" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_SerializeWithCachedSizes" "', argument " "2"" of type '" "::google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedOutputStream *)(argp2);
  ((tensorflow::OpDef_ArgDef const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  bool arg2 ;
  ::google::protobuf::uint8 *arg3 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_ArgDef_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OpDef_ArgDef_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg3 = (::google::protobuf::uint8 *)(argp3);
  result = (::google::protobuf::uint8 *)((tensorflow::OpDef_ArgDef const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::google::protobuf::uint8 *arg2 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg2 = (::google::protobuf::uint8 *)(argp2);
  result = (::google::protobuf::uint8 *)((tensorflow::OpDef_ArgDef const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_GetCachedSize" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (int)((tensorflow::OpDef_ArgDef const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_GetMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Metadata result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_GetMetadata (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_GetMetadata" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = ((tensorflow::OpDef_ArgDef const *)arg1)->GetMetadata();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::Metadata((const ::google::protobuf::Metadata&)(result))), SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_clear_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_clear_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_clear_name" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  (arg1)->clear_name();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_ArgDef_kNameFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_ArgDef::kNameFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_name" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *) &((tensorflow::OpDef_ArgDef const *)arg1)->name();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_name__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_name" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_ArgDef_set_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_name((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_name__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_name" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_name((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_name__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_name" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpDef_ArgDef_set_name" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_name((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_set_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_name.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_mutable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_mutable_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_mutable_name" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_release_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_release_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_release_name" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->release_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_allocated_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_set_allocated_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_allocated_name" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_allocated_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_unsafe_arena_release_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_unsafe_arena_release_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_unsafe_arena_release_name" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_unsafe_arena_set_allocated_name" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_unsafe_arena_set_allocated_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_clear_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_clear_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_clear_description" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  (arg1)->clear_description();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_ArgDef_kDescriptionFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_ArgDef::kDescriptionFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_description" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *) &((tensorflow::OpDef_ArgDef const *)arg1)->description();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_description__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_description" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_description" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_ArgDef_set_description" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_description((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_description__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_description" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_description" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_description((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_description__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_description" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_description" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpDef_ArgDef_set_description" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_description((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_set_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_description__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_description__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_description__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_description__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_description__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_description__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_description.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_mutable_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_mutable_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_mutable_description" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_description();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_release_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_release_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_release_description" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->release_description();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_allocated_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_set_allocated_description (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_allocated_description" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_allocated_description" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_description(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_unsafe_arena_release_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_unsafe_arena_release_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_unsafe_arena_release_description" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_description();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_description (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_unsafe_arena_set_allocated_description" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_unsafe_arena_set_allocated_description" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_description(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_clear_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_clear_type (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_clear_type" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  (arg1)->clear_type();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_ArgDef_kTypeFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_ArgDef::kTypeFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::DataType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_type (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_type" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::tensorflow::DataType)((tensorflow::OpDef_ArgDef const *)arg1)->type();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::tensorflow::DataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_set_type (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_type" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_ArgDef_set_type" "', argument " "2"" of type '" "::tensorflow::DataType""'");
  } 
  arg2 = (::tensorflow::DataType)(val2);
  (arg1)->set_type(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_clear_type_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_clear_type_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_clear_type_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  (arg1)->clear_type_attr();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_ArgDef_kTypeAttrFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_ArgDef::kTypeAttrFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_type_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_type_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_type_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *) &((tensorflow::OpDef_ArgDef const *)arg1)->type_attr();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_type_attr__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_type_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_type_attr" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_ArgDef_set_type_attr" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_type_attr((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_type_attr__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_type_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_type_attr" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_type_attr((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_type_attr__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_type_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_type_attr" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpDef_ArgDef_set_type_attr" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_type_attr((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_set_type_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_type_attr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_type_attr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_type_attr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_type_attr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_type_attr__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_type_attr__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_type_attr.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_mutable_type_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_mutable_type_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_mutable_type_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_type_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_release_type_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_release_type_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_release_type_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->release_type_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_allocated_type_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_set_allocated_type_attr (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_allocated_type_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_allocated_type_attr" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_type_attr(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_unsafe_arena_release_type_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_unsafe_arena_release_type_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_unsafe_arena_release_type_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_type_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_type_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_type_attr (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_unsafe_arena_set_allocated_type_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_unsafe_arena_set_allocated_type_attr" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_type_attr(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_clear_number_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_clear_number_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_clear_number_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  (arg1)->clear_number_attr();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_ArgDef_kNumberAttrFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_ArgDef::kNumberAttrFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_number_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_number_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_number_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *) &((tensorflow::OpDef_ArgDef const *)arg1)->number_attr();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_number_attr__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_number_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_number_attr" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_ArgDef_set_number_attr" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_number_attr((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_number_attr__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_number_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_number_attr" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_number_attr((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_number_attr__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_number_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_number_attr" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpDef_ArgDef_set_number_attr" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_number_attr((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_set_number_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_number_attr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_number_attr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_number_attr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_number_attr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_number_attr__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_number_attr__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_number_attr.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_mutable_number_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_mutable_number_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_mutable_number_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_number_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_release_number_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_release_number_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_release_number_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->release_number_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_allocated_number_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_set_allocated_number_attr (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_allocated_number_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_allocated_number_attr" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_number_attr(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_unsafe_arena_release_number_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_unsafe_arena_release_number_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_unsafe_arena_release_number_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_number_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_number_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_number_attr (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_unsafe_arena_set_allocated_number_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_unsafe_arena_set_allocated_number_attr" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_number_attr(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_clear_type_list_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_clear_type_list_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_clear_type_list_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  (arg1)->clear_type_list_attr();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_ArgDef_kTypeListAttrFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_ArgDef::kTypeListAttrFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_type_list_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_type_list_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_type_list_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *) &((tensorflow::OpDef_ArgDef const *)arg1)->type_list_attr();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_type_list_attr__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_type_list_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_type_list_attr" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_ArgDef_set_type_list_attr" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_type_list_attr((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_type_list_attr__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_type_list_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_type_list_attr" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_type_list_attr((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_type_list_attr__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_type_list_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_type_list_attr" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpDef_ArgDef_set_type_list_attr" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_type_list_attr((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_set_type_list_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_type_list_attr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_type_list_attr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_type_list_attr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_type_list_attr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_ArgDef_set_type_list_attr__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_ArgDef_set_type_list_attr__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_type_list_attr.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_mutable_type_list_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_mutable_type_list_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_mutable_type_list_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_type_list_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_release_type_list_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_release_type_list_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_release_type_list_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->release_type_list_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_allocated_type_list_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_set_allocated_type_list_attr (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_allocated_type_list_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_set_allocated_type_list_attr" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_type_list_attr(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_unsafe_arena_release_type_list_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_unsafe_arena_release_type_list_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_unsafe_arena_release_type_list_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_type_list_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_type_list_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_type_list_attr (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_unsafe_arena_set_allocated_type_list_attr" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_ArgDef_unsafe_arena_set_allocated_type_list_attr" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_type_list_attr(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_clear_is_ref(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_clear_is_ref (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_clear_is_ref" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  (arg1)->clear_is_ref();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_ArgDef_kIsRefFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_ArgDef::kIsRefFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_is_ref(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_is_ref (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_is_ref" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  result = (bool)((tensorflow::OpDef_ArgDef const *)arg1)->is_ref();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_set_is_ref(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_ArgDef *arg1 = (tensorflow::OpDef_ArgDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ArgDef_set_is_ref (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_set_is_ref" "', argument " "1"" of type '" "tensorflow::OpDef_ArgDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_ArgDef *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_ArgDef_set_is_ref" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->set_is_ref(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_OpDef_ArgDef_default_instance__set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_ArgDef > *arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_ArgDef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_ArgDef_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ArgDef_default_instance__set" "', argument " "1"" of type '" "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_ArgDef > *""'"); 
  }
  arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_ArgDef > *)(argp1);
  tensorflow::OpDef_ArgDef_default_instance_ = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_OpDef_ArgDef_default_instance__get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_ArgDef > *result = 0 ;
  
  result = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_ArgDef > *)&tensorflow::OpDef_ArgDef_default_instance_;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_ArgDef_t, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_OpDef_AttrDef__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::OpDef_AttrDef *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpDef_AttrDef__SWIG_0 (should be 0)");
  result = (tensorflow::OpDef_AttrDef *)new tensorflow::OpDef_AttrDef();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__OpDef_AttrDef, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_OpDef_AttrDef(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_OpDef_AttrDef(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_OpDef_AttrDef(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_OpDef_AttrDef(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::OpDef_AttrDef * arg1 = (tensorflow::OpDef_AttrDef *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_OpDef_AttrDef__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::OpDef_AttrDef *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::OpDef_AttrDef *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpDef_AttrDef__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__OpDef_AttrDef,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpDef_AttrDef" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OpDef_AttrDef" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const &""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (tensorflow::OpDef_AttrDef *)new tensorflow::OpDef_AttrDef((tensorflow::OpDef_AttrDef const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__OpDef_AttrDef, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_OpDef_AttrDef(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_OpDef_AttrDef__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_OpDef_AttrDef__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_OpDef_AttrDef__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_OpDef_AttrDef__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_OpDef_AttrDef");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_GetArena" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::google::protobuf::Arena *)((tensorflow::OpDef_AttrDef const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_GetMaybeArenaPointer" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (void *)((tensorflow::OpDef_AttrDef const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_descriptor (should be 0)");
  
  result = (::google::protobuf::Descriptor *)tensorflow::OpDef_AttrDef::descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_default_instance (should be 0)");
  
  result = (tensorflow::OpDef_AttrDef *) &tensorflow::OpDef_AttrDef::default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_internal_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_internal_default_instance (should be 0)");
  
  result = (tensorflow::OpDef_AttrDef *)tensorflow::OpDef_AttrDef::internal_default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_UnsafeArenaSwap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  tensorflow::OpDef_AttrDef *arg2 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_UnsafeArenaSwap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_UnsafeArenaSwap" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_UnsafeArenaSwap" "', argument " "2"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg2 = (tensorflow::OpDef_AttrDef *)(argp2);
  (arg1)->UnsafeArenaSwap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  tensorflow::OpDef_AttrDef *arg2 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_Swap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_Swap" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_Swap" "', argument " "2"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg2 = (tensorflow::OpDef_AttrDef *)(argp2);
  (arg1)->Swap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::OpDef_AttrDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_New" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (tensorflow::OpDef_AttrDef *)((tensorflow::OpDef_AttrDef const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::OpDef_AttrDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_New" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (tensorflow::OpDef_AttrDef *)((tensorflow::OpDef_AttrDef const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef__wrap_OpDef_AttrDef_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_CopyFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_CopyFrom" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_AttrDef_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_MergeFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_MergeFrom" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_AttrDef_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_CopyFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  tensorflow::OpDef_AttrDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_CopyFrom" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__OpDef_AttrDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_CopyFrom" "', argument " "2"" of type '" "tensorflow::OpDef_AttrDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_AttrDef_CopyFrom" "', argument " "2"" of type '" "tensorflow::OpDef_AttrDef const &""'"); 
  }
  arg2 = (tensorflow::OpDef_AttrDef *)(argp2);
  (arg1)->CopyFrom((tensorflow::OpDef_AttrDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef__wrap_OpDef_AttrDef_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CopyFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_MergeFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  tensorflow::OpDef_AttrDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_MergeFrom" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__OpDef_AttrDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_MergeFrom" "', argument " "2"" of type '" "tensorflow::OpDef_AttrDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_AttrDef_MergeFrom" "', argument " "2"" of type '" "tensorflow::OpDef_AttrDef const &""'"); 
  }
  arg2 = (tensorflow::OpDef_AttrDef *)(argp2);
  (arg1)->MergeFrom((tensorflow::OpDef_AttrDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef__wrap_OpDef_AttrDef_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MergeFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_Clear" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_IsInitialized" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (bool)((tensorflow::OpDef_AttrDef const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_ByteSizeLong" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = ((tensorflow::OpDef_AttrDef const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::google::protobuf::io::CodedInputStream *arg2 = (::google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_MergePartialFromCodedStream" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_MergePartialFromCodedStream" "', argument " "2"" of type '" "::google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::google::protobuf::io::CodedOutputStream *arg2 = (::google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_SerializeWithCachedSizes" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_SerializeWithCachedSizes" "', argument " "2"" of type '" "::google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedOutputStream *)(argp2);
  ((tensorflow::OpDef_AttrDef const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  bool arg2 ;
  ::google::protobuf::uint8 *arg3 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_AttrDef_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OpDef_AttrDef_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg3 = (::google::protobuf::uint8 *)(argp3);
  result = (::google::protobuf::uint8 *)((tensorflow::OpDef_AttrDef const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::google::protobuf::uint8 *arg2 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg2 = (::google::protobuf::uint8 *)(argp2);
  result = (::google::protobuf::uint8 *)((tensorflow::OpDef_AttrDef const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_GetCachedSize" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (int)((tensorflow::OpDef_AttrDef const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_GetMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Metadata result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_GetMetadata (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_GetMetadata" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = ((tensorflow::OpDef_AttrDef const *)arg1)->GetMetadata();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::Metadata((const ::google::protobuf::Metadata&)(result))), SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_clear_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_clear_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_clear_name" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  (arg1)->clear_name();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_AttrDef_kNameFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_AttrDef::kNameFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_name" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::std::string *) &((tensorflow::OpDef_AttrDef const *)arg1)->name();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_name__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_name" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_AttrDef_set_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_name((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_name__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_name" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_name((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_name__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_name" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpDef_AttrDef_set_name" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_name((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef__wrap_OpDef_AttrDef_set_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_set_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_set_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_set_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_set_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_set_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_set_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_name.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_mutable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_mutable_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_mutable_name" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_release_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_release_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_release_name" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::std::string *)(arg1)->release_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_allocated_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_set_allocated_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_allocated_name" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_allocated_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_unsafe_arena_release_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_unsafe_arena_release_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_unsafe_arena_release_name" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_unsafe_arena_set_allocated_name" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_unsafe_arena_set_allocated_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_clear_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_clear_type (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_clear_type" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  (arg1)->clear_type();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_AttrDef_kTypeFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_AttrDef::kTypeFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_type (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_type" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::std::string *) &((tensorflow::OpDef_AttrDef const *)arg1)->type();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_type__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_type" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_type" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_AttrDef_set_type" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_type((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_type__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_type" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_type" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_type((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_type__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_type" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_type" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpDef_AttrDef_set_type" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_type((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef__wrap_OpDef_AttrDef_set_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_set_type__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_set_type__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_set_type__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_set_type__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_set_type__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_set_type__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_type.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_mutable_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_mutable_type (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_mutable_type" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_type();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_release_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_release_type (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_release_type" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::std::string *)(arg1)->release_type();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_allocated_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_set_allocated_type (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_allocated_type" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_allocated_type" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_type(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_unsafe_arena_release_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_unsafe_arena_release_type (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_unsafe_arena_release_type" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_type();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_type (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_unsafe_arena_set_allocated_type" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_unsafe_arena_set_allocated_type" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_type(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_has_default_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_has_default_value (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_has_default_value" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (bool)((tensorflow::OpDef_AttrDef const *)arg1)->has_default_value();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_clear_default_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_clear_default_value (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_clear_default_value" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  (arg1)->clear_default_value();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_AttrDef_kDefaultValueFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_AttrDef::kDefaultValueFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_default_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::AttrValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_default_value (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_default_value" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::tensorflow::AttrValue *) &((tensorflow::OpDef_AttrDef const *)arg1)->default_value();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_mutable_default_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::AttrValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_mutable_default_value (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_mutable_default_value" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::tensorflow::AttrValue *)(arg1)->mutable_default_value();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_release_default_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::AttrValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_release_default_value (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_release_default_value" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::tensorflow::AttrValue *)(arg1)->release_default_value();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_allocated_default_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::tensorflow::AttrValue *arg2 = (::tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_set_allocated_default_value (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_allocated_default_value" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_allocated_default_value" "', argument " "2"" of type '" "::tensorflow::AttrValue *""'"); 
  }
  arg2 = (::tensorflow::AttrValue *)(argp2);
  (arg1)->set_allocated_default_value(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_unsafe_arena_release_default_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::AttrValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_unsafe_arena_release_default_value (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_unsafe_arena_release_default_value" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::tensorflow::AttrValue *)(arg1)->unsafe_arena_release_default_value();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_default_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::tensorflow::AttrValue *arg2 = (::tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_default_value (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_unsafe_arena_set_allocated_default_value" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_unsafe_arena_set_allocated_default_value" "', argument " "2"" of type '" "::tensorflow::AttrValue *""'"); 
  }
  arg2 = (::tensorflow::AttrValue *)(argp2);
  (arg1)->unsafe_arena_set_allocated_default_value(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_clear_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_clear_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_clear_description" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  (arg1)->clear_description();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_AttrDef_kDescriptionFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_AttrDef::kDescriptionFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_description" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::std::string *) &((tensorflow::OpDef_AttrDef const *)arg1)->description();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_description__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_description" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_description" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_AttrDef_set_description" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_description((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_description__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_description" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_description" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_description((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_description__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_description" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_description" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpDef_AttrDef_set_description" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_description((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef__wrap_OpDef_AttrDef_set_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_set_description__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_set_description__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_set_description__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_set_description__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_AttrDef_set_description__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_AttrDef_set_description__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_description.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_mutable_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_mutable_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_mutable_description" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_description();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_release_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_release_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_release_description" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::std::string *)(arg1)->release_description();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_allocated_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_set_allocated_description (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_allocated_description" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_allocated_description" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_description(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_unsafe_arena_release_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_unsafe_arena_release_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_unsafe_arena_release_description" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_description();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_description (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_unsafe_arena_set_allocated_description" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_unsafe_arena_set_allocated_description" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_description(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_clear_has_minimum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_clear_has_minimum (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_clear_has_minimum" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  (arg1)->clear_has_minimum();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_AttrDef_kHasMinimumFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_AttrDef::kHasMinimumFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_has_minimum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_has_minimum (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_has_minimum" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (bool)((tensorflow::OpDef_AttrDef const *)arg1)->has_minimum();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_has_minimum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_set_has_minimum (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_has_minimum" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_AttrDef_set_has_minimum" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->set_has_minimum(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_clear_minimum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_clear_minimum (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_clear_minimum" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  (arg1)->clear_minimum();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_AttrDef_kMinimumFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_AttrDef::kMinimumFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_minimum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::int64 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_minimum (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_minimum" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = ((tensorflow::OpDef_AttrDef const *)arg1)->minimum();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::int64((const ::google::protobuf::int64&)(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_minimum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::google::protobuf::int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_set_minimum (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_minimum" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_minimum" "', argument " "2"" of type '" "::google::protobuf::int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_AttrDef_set_minimum" "', argument " "2"" of type '" "::google::protobuf::int64""'");
    } else {
      arg2 = *((::google::protobuf::int64 *)(argp2));
    }
  }
  (arg1)->set_minimum(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_has_allowed_values(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_has_allowed_values (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_has_allowed_values" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (bool)((tensorflow::OpDef_AttrDef const *)arg1)->has_allowed_values();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_clear_allowed_values(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_clear_allowed_values (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_clear_allowed_values" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  (arg1)->clear_allowed_values();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_AttrDef_kAllowedValuesFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef_AttrDef::kAllowedValuesFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_allowed_values(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::AttrValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_allowed_values (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_allowed_values" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::tensorflow::AttrValue *) &((tensorflow::OpDef_AttrDef const *)arg1)->allowed_values();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_mutable_allowed_values(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::AttrValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_mutable_allowed_values (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_mutable_allowed_values" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::tensorflow::AttrValue *)(arg1)->mutable_allowed_values();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_release_allowed_values(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::AttrValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_release_allowed_values (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_release_allowed_values" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::tensorflow::AttrValue *)(arg1)->release_allowed_values();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_set_allocated_allowed_values(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::tensorflow::AttrValue *arg2 = (::tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_set_allocated_allowed_values (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_set_allocated_allowed_values" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_set_allocated_allowed_values" "', argument " "2"" of type '" "::tensorflow::AttrValue *""'"); 
  }
  arg2 = (::tensorflow::AttrValue *)(argp2);
  (arg1)->set_allocated_allowed_values(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_unsafe_arena_release_allowed_values(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::AttrValue *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_unsafe_arena_release_allowed_values (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_unsafe_arena_release_allowed_values" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  result = (::tensorflow::AttrValue *)(arg1)->unsafe_arena_release_allowed_values();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_allowed_values(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef_AttrDef *arg1 = (tensorflow::OpDef_AttrDef *) 0 ;
  ::tensorflow::AttrValue *arg2 = (::tensorflow::AttrValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_allowed_values (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_unsafe_arena_set_allocated_allowed_values" "', argument " "1"" of type '" "tensorflow::OpDef_AttrDef *""'"); 
  }
  arg1 = (tensorflow::OpDef_AttrDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__AttrValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_AttrDef_unsafe_arena_set_allocated_allowed_values" "', argument " "2"" of type '" "::tensorflow::AttrValue *""'"); 
  }
  arg2 = (::tensorflow::AttrValue *)(argp2);
  (arg1)->unsafe_arena_set_allocated_allowed_values(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_OpDef_AttrDef_default_instance__set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_AttrDef > *arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_AttrDef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_AttrDef_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_AttrDef_default_instance__set" "', argument " "1"" of type '" "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_AttrDef > *""'"); 
  }
  arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_AttrDef > *)(argp1);
  tensorflow::OpDef_AttrDef_default_instance_ = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_OpDef_AttrDef_default_instance__get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_AttrDef > *result = 0 ;
  
  result = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_AttrDef > *)&tensorflow::OpDef_AttrDef_default_instance_;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_AttrDef_t, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_OpDef__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::OpDef *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpDef__SWIG_0 (should be 0)");
  result = (tensorflow::OpDef *)new tensorflow::OpDef();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__OpDef, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_OpDef(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_OpDef(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_OpDef(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_OpDef(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::OpDef * arg1 = (tensorflow::OpDef *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_OpDef__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::OpDef *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::OpDef *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpDef__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__OpDef,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpDef" "', argument " "1"" of type '" "tensorflow::OpDef const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OpDef" "', argument " "1"" of type '" "tensorflow::OpDef const &""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (tensorflow::OpDef *)new tensorflow::OpDef((tensorflow::OpDef const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__OpDef, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_OpDef(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_OpDef__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_OpDef__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_OpDef__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_OpDef__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_OpDef");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_GetArena" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::google::protobuf::Arena *)((tensorflow::OpDef const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_GetMaybeArenaPointer" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (void *)((tensorflow::OpDef const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_descriptor (should be 0)");
  
  result = (::google::protobuf::Descriptor *)tensorflow::OpDef::descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_default_instance (should be 0)");
  
  result = (tensorflow::OpDef *) &tensorflow::OpDef::default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_internal_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_internal_default_instance (should be 0)");
  
  result = (tensorflow::OpDef *)tensorflow::OpDef::internal_default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_UnsafeArenaSwap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  tensorflow::OpDef *arg2 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_UnsafeArenaSwap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_UnsafeArenaSwap" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_UnsafeArenaSwap" "', argument " "2"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg2 = (tensorflow::OpDef *)(argp2);
  (arg1)->UnsafeArenaSwap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  tensorflow::OpDef *arg2 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_Swap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_Swap" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_Swap" "', argument " "2"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg2 = (tensorflow::OpDef *)(argp2);
  (arg1)->Swap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::OpDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_New" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (tensorflow::OpDef *)((tensorflow::OpDef const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::OpDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_New" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (tensorflow::OpDef *)((tensorflow::OpDef const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef__wrap_OpDef_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_CopyFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_CopyFrom" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_MergeFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_MergeFrom" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_CopyFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  tensorflow::OpDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_CopyFrom" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__OpDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_CopyFrom" "', argument " "2"" of type '" "tensorflow::OpDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_CopyFrom" "', argument " "2"" of type '" "tensorflow::OpDef const &""'"); 
  }
  arg2 = (tensorflow::OpDef *)(argp2);
  (arg1)->CopyFrom((tensorflow::OpDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef__wrap_OpDef_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CopyFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_MergeFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  tensorflow::OpDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_MergeFrom" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__OpDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_MergeFrom" "', argument " "2"" of type '" "tensorflow::OpDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_MergeFrom" "', argument " "2"" of type '" "tensorflow::OpDef const &""'"); 
  }
  arg2 = (tensorflow::OpDef *)(argp2);
  (arg1)->MergeFrom((tensorflow::OpDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef__wrap_OpDef_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MergeFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_Clear" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_IsInitialized" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (bool)((tensorflow::OpDef const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_ByteSizeLong" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = ((tensorflow::OpDef const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::google::protobuf::io::CodedInputStream *arg2 = (::google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_MergePartialFromCodedStream" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_MergePartialFromCodedStream" "', argument " "2"" of type '" "::google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::google::protobuf::io::CodedOutputStream *arg2 = (::google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_SerializeWithCachedSizes" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_SerializeWithCachedSizes" "', argument " "2"" of type '" "::google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedOutputStream *)(argp2);
  ((tensorflow::OpDef const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  bool arg2 ;
  ::google::protobuf::uint8 *arg3 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OpDef_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg3 = (::google::protobuf::uint8 *)(argp3);
  result = (::google::protobuf::uint8 *)((tensorflow::OpDef const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::google::protobuf::uint8 *arg2 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg2 = (::google::protobuf::uint8 *)(argp2);
  result = (::google::protobuf::uint8 *)((tensorflow::OpDef const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_GetCachedSize" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (int)((tensorflow::OpDef const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_GetMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Metadata result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_GetMetadata (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_GetMetadata" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = ((tensorflow::OpDef const *)arg1)->GetMetadata();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::Metadata((const ::google::protobuf::Metadata&)(result))), SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_clear_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_clear_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_clear_name" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  (arg1)->clear_name();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_kNameFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef::kNameFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_name" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::std::string *) &((tensorflow::OpDef const *)arg1)->name();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_name__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_name" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_set_name" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_name((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_name__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_name" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_name((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_name__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_name" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpDef_set_name" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_name((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef__wrap_OpDef_set_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_set_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_set_name__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_set_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_set_name__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_set_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_set_name__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_name.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_mutable_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_mutable_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_mutable_name" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_release_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_release_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_release_name" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::std::string *)(arg1)->release_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_allocated_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_set_allocated_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_allocated_name" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_allocated_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_unsafe_arena_release_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_unsafe_arena_release_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_unsafe_arena_release_name" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_unsafe_arena_set_allocated_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_unsafe_arena_set_allocated_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_unsafe_arena_set_allocated_name" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_unsafe_arena_set_allocated_name" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_name(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_input_arg_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_input_arg_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_input_arg_size" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (int)((tensorflow::OpDef const *)arg1)->input_arg_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_clear_input_arg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_clear_input_arg (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_clear_input_arg" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  (arg1)->clear_input_arg();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_kInputArgFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef::kInputArgFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_input_arg__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::OpDef_ArgDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_input_arg" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_input_arg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::OpDef_ArgDef *) &((tensorflow::OpDef const *)arg1)->input_arg(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_mutable_input_arg__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::OpDef_ArgDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_mutable_input_arg" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_mutable_input_arg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::OpDef_ArgDef *)(arg1)->mutable_input_arg(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_add_input_arg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::OpDef_ArgDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_add_input_arg (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_add_input_arg" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::tensorflow::OpDef_ArgDef *)(arg1)->add_input_arg();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_mutable_input_arg__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_ArgDef > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_mutable_input_arg" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_ArgDef > *)(arg1)->mutable_input_arg();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_ArgDef_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef__wrap_OpDef_mutable_input_arg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_mutable_input_arg__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_mutable_input_arg__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_mutable_input_arg__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_mutable_input_arg__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mutable_input_arg.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_input_arg__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_ArgDef > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_input_arg" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_ArgDef > *) &((tensorflow::OpDef const *)arg1)->input_arg();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_ArgDef_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef__wrap_OpDef_input_arg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_input_arg__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_input_arg__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_input_arg__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_input_arg__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function input_arg.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_output_arg_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_output_arg_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_output_arg_size" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (int)((tensorflow::OpDef const *)arg1)->output_arg_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_clear_output_arg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_clear_output_arg (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_clear_output_arg" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  (arg1)->clear_output_arg();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_kOutputArgFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef::kOutputArgFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_output_arg__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::OpDef_ArgDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_output_arg" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_output_arg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::OpDef_ArgDef *) &((tensorflow::OpDef const *)arg1)->output_arg(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_mutable_output_arg__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::OpDef_ArgDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_mutable_output_arg" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_mutable_output_arg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::OpDef_ArgDef *)(arg1)->mutable_output_arg(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_add_output_arg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::OpDef_ArgDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_add_output_arg (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_add_output_arg" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::tensorflow::OpDef_ArgDef *)(arg1)->add_output_arg();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_ArgDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_mutable_output_arg__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_ArgDef > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_mutable_output_arg" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_ArgDef > *)(arg1)->mutable_output_arg();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_ArgDef_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef__wrap_OpDef_mutable_output_arg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_mutable_output_arg__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_mutable_output_arg__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_mutable_output_arg__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_mutable_output_arg__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mutable_output_arg.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_output_arg__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_ArgDef > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_output_arg" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_ArgDef > *) &((tensorflow::OpDef const *)arg1)->output_arg();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_ArgDef_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef__wrap_OpDef_output_arg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_output_arg__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_output_arg__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_output_arg__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_output_arg__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function output_arg.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_attr_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_attr_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_attr_size" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (int)((tensorflow::OpDef const *)arg1)->attr_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_clear_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_clear_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_clear_attr" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  (arg1)->clear_attr();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_kAttrFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef::kAttrFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_attr__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::OpDef_AttrDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_attr" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_attr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::OpDef_AttrDef *) &((tensorflow::OpDef const *)arg1)->attr(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_mutable_attr__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::OpDef_AttrDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_mutable_attr" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_mutable_attr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::OpDef_AttrDef *)(arg1)->mutable_attr(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_add_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::OpDef_AttrDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_add_attr (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_add_attr" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::tensorflow::OpDef_AttrDef *)(arg1)->add_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef_AttrDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_mutable_attr__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_AttrDef > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_mutable_attr" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_AttrDef > *)(arg1)->mutable_attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_AttrDef_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef__wrap_OpDef_mutable_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_mutable_attr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_mutable_attr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_mutable_attr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_mutable_attr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mutable_attr.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_attr__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_AttrDef > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_attr" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_AttrDef > *) &((tensorflow::OpDef const *)arg1)->attr();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_AttrDef_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef__wrap_OpDef_attr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_attr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_attr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_attr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_attr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function attr.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_has_deprecation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_has_deprecation (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_has_deprecation" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (bool)((tensorflow::OpDef const *)arg1)->has_deprecation();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_clear_deprecation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_clear_deprecation (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_clear_deprecation" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  (arg1)->clear_deprecation();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_kDeprecationFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef::kDeprecationFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_deprecation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::OpDeprecation *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_deprecation (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_deprecation" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::tensorflow::OpDeprecation *) &((tensorflow::OpDef const *)arg1)->deprecation();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_mutable_deprecation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::OpDeprecation *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_mutable_deprecation (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_mutable_deprecation" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::tensorflow::OpDeprecation *)(arg1)->mutable_deprecation();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_release_deprecation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::OpDeprecation *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_release_deprecation (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_release_deprecation" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::tensorflow::OpDeprecation *)(arg1)->release_deprecation();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_allocated_deprecation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::tensorflow::OpDeprecation *arg2 = (::tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_set_allocated_deprecation (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_allocated_deprecation" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_allocated_deprecation" "', argument " "2"" of type '" "::tensorflow::OpDeprecation *""'"); 
  }
  arg2 = (::tensorflow::OpDeprecation *)(argp2);
  (arg1)->set_allocated_deprecation(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_unsafe_arena_release_deprecation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::OpDeprecation *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_unsafe_arena_release_deprecation (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_unsafe_arena_release_deprecation" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::tensorflow::OpDeprecation *)(arg1)->unsafe_arena_release_deprecation();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_unsafe_arena_set_allocated_deprecation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::tensorflow::OpDeprecation *arg2 = (::tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_unsafe_arena_set_allocated_deprecation (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_unsafe_arena_set_allocated_deprecation" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_unsafe_arena_set_allocated_deprecation" "', argument " "2"" of type '" "::tensorflow::OpDeprecation *""'"); 
  }
  arg2 = (::tensorflow::OpDeprecation *)(argp2);
  (arg1)->unsafe_arena_set_allocated_deprecation(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_clear_summary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_clear_summary (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_clear_summary" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  (arg1)->clear_summary();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_kSummaryFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef::kSummaryFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_summary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_summary (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_summary" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::std::string *) &((tensorflow::OpDef const *)arg1)->summary();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_summary__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_summary" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_summary" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_set_summary" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_summary((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_summary__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_summary" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_summary" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_summary((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_summary__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_summary" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_summary" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpDef_set_summary" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_summary((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef__wrap_OpDef_set_summary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_set_summary__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_set_summary__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_set_summary__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_set_summary__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_set_summary__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_set_summary__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_summary.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_mutable_summary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_mutable_summary (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_mutable_summary" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_summary();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_release_summary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_release_summary (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_release_summary" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::std::string *)(arg1)->release_summary();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_allocated_summary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_set_allocated_summary (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_allocated_summary" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_allocated_summary" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_summary(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_unsafe_arena_release_summary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_unsafe_arena_release_summary (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_unsafe_arena_release_summary" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_summary();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_unsafe_arena_set_allocated_summary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_unsafe_arena_set_allocated_summary (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_unsafe_arena_set_allocated_summary" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_unsafe_arena_set_allocated_summary" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_summary(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_clear_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_clear_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_clear_description" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  (arg1)->clear_description();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_kDescriptionFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef::kDescriptionFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_description" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::std::string *) &((tensorflow::OpDef const *)arg1)->description();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_description__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_description" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_description" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDef_set_description" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_description((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_description__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_description" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_description" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_description((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_description__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_description" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_description" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpDef_set_description" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_description((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef__wrap_OpDef_set_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_set_description__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_set_description__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_set_description__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_set_description__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDef_set_description__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDef_set_description__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_description.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_mutable_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_mutable_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_mutable_description" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::std::string *)(arg1)->mutable_description();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_release_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_release_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_release_description" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::std::string *)(arg1)->release_description();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_allocated_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_set_allocated_description (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_allocated_description" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_set_allocated_description" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_description(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_unsafe_arena_release_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_unsafe_arena_release_description (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_unsafe_arena_release_description" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_description();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_unsafe_arena_set_allocated_description(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_unsafe_arena_set_allocated_description (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_unsafe_arena_set_allocated_description" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDef_unsafe_arena_set_allocated_description" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_description(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_clear_is_commutative(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_clear_is_commutative (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_clear_is_commutative" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  (arg1)->clear_is_commutative();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_kIsCommutativeFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef::kIsCommutativeFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_is_commutative(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_is_commutative (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_is_commutative" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (bool)((tensorflow::OpDef const *)arg1)->is_commutative();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_is_commutative(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_set_is_commutative (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_is_commutative" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_set_is_commutative" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->set_is_commutative(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_clear_is_aggregate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_clear_is_aggregate (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_clear_is_aggregate" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  (arg1)->clear_is_aggregate();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_kIsAggregateFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef::kIsAggregateFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_is_aggregate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_is_aggregate (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_is_aggregate" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (bool)((tensorflow::OpDef const *)arg1)->is_aggregate();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_is_aggregate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_set_is_aggregate (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_is_aggregate" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_set_is_aggregate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->set_is_aggregate(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_clear_is_stateful(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_clear_is_stateful (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_clear_is_stateful" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  (arg1)->clear_is_stateful();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_kIsStatefulFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef::kIsStatefulFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_is_stateful(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_is_stateful (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_is_stateful" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (bool)((tensorflow::OpDef const *)arg1)->is_stateful();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_is_stateful(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_set_is_stateful (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_is_stateful" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_set_is_stateful" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->set_is_stateful(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_clear_allows_uninitialized_input(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_clear_allows_uninitialized_input (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_clear_allows_uninitialized_input" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  (arg1)->clear_allows_uninitialized_input();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDef_kAllowsUninitializedInputFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDef::kAllowsUninitializedInputFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDef_allows_uninitialized_input(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_allows_uninitialized_input (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_allows_uninitialized_input" "', argument " "1"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  result = (bool)((tensorflow::OpDef const *)arg1)->allows_uninitialized_input();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDef_set_allows_uninitialized_input(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDef *arg1 = (tensorflow::OpDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDef_set_allows_uninitialized_input (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_set_allows_uninitialized_input" "', argument " "1"" of type '" "tensorflow::OpDef *""'"); 
  }
  arg1 = (tensorflow::OpDef *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDef_set_allows_uninitialized_input" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  (arg1)->set_allows_uninitialized_input(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_OpDef_default_instance__set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef > *arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDef_default_instance__set" "', argument " "1"" of type '" "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef > *""'"); 
  }
  arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef > *)(argp1);
  tensorflow::OpDef_default_instance_ = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_OpDef_default_instance__get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef > *result = 0 ;
  
  result = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef > *)&tensorflow::OpDef_default_instance_;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_t, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_OpDeprecation__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::OpDeprecation *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpDeprecation__SWIG_0 (should be 0)");
  result = (tensorflow::OpDeprecation *)new tensorflow::OpDeprecation();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__OpDeprecation, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_OpDeprecation(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_OpDeprecation(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_OpDeprecation(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_OpDeprecation(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::OpDeprecation * arg1 = (tensorflow::OpDeprecation *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_OpDeprecation__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::OpDeprecation *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::OpDeprecation *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpDeprecation__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__OpDeprecation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpDeprecation" "', argument " "1"" of type '" "tensorflow::OpDeprecation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OpDeprecation" "', argument " "1"" of type '" "tensorflow::OpDeprecation const &""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = (tensorflow::OpDeprecation *)new tensorflow::OpDeprecation((tensorflow::OpDeprecation const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__OpDeprecation, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_OpDeprecation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_OpDeprecation__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_OpDeprecation__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_OpDeprecation__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_OpDeprecation__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_OpDeprecation");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_GetArena" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = (::google::protobuf::Arena *)((tensorflow::OpDeprecation const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_GetMaybeArenaPointer" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = (void *)((tensorflow::OpDeprecation const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_descriptor (should be 0)");
  
  result = (::google::protobuf::Descriptor *)tensorflow::OpDeprecation::descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_default_instance (should be 0)");
  
  result = (tensorflow::OpDeprecation *) &tensorflow::OpDeprecation::default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_internal_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_internal_default_instance (should be 0)");
  
  result = (tensorflow::OpDeprecation *)tensorflow::OpDeprecation::internal_default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_UnsafeArenaSwap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  tensorflow::OpDeprecation *arg2 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_UnsafeArenaSwap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_UnsafeArenaSwap" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_UnsafeArenaSwap" "', argument " "2"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg2 = (tensorflow::OpDeprecation *)(argp2);
  (arg1)->UnsafeArenaSwap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  tensorflow::OpDeprecation *arg2 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_Swap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_Swap" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_Swap" "', argument " "2"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg2 = (tensorflow::OpDeprecation *)(argp2);
  (arg1)->Swap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::OpDeprecation *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_New" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = (tensorflow::OpDeprecation *)((tensorflow::OpDeprecation const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::OpDeprecation *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_New" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (tensorflow::OpDeprecation *)((tensorflow::OpDeprecation const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation__wrap_OpDeprecation_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDeprecation_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDeprecation_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDeprecation_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDeprecation_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_CopyFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_CopyFrom" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDeprecation_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_MergeFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_MergeFrom" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDeprecation_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_CopyFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  tensorflow::OpDeprecation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_CopyFrom" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__OpDeprecation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_CopyFrom" "', argument " "2"" of type '" "tensorflow::OpDeprecation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDeprecation_CopyFrom" "', argument " "2"" of type '" "tensorflow::OpDeprecation const &""'"); 
  }
  arg2 = (tensorflow::OpDeprecation *)(argp2);
  (arg1)->CopyFrom((tensorflow::OpDeprecation const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation__wrap_OpDeprecation_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDeprecation_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDeprecation_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDeprecation_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDeprecation_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CopyFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_MergeFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  tensorflow::OpDeprecation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_MergeFrom" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__OpDeprecation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_MergeFrom" "', argument " "2"" of type '" "tensorflow::OpDeprecation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDeprecation_MergeFrom" "', argument " "2"" of type '" "tensorflow::OpDeprecation const &""'"); 
  }
  arg2 = (tensorflow::OpDeprecation *)(argp2);
  (arg1)->MergeFrom((tensorflow::OpDeprecation const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation__wrap_OpDeprecation_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDeprecation_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDeprecation_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDeprecation_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDeprecation_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MergeFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_Clear" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_IsInitialized" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = (bool)((tensorflow::OpDeprecation const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_ByteSizeLong" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = ((tensorflow::OpDeprecation const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  ::google::protobuf::io::CodedInputStream *arg2 = (::google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_MergePartialFromCodedStream" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_MergePartialFromCodedStream" "', argument " "2"" of type '" "::google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  ::google::protobuf::io::CodedOutputStream *arg2 = (::google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_SerializeWithCachedSizes" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_SerializeWithCachedSizes" "', argument " "2"" of type '" "::google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedOutputStream *)(argp2);
  ((tensorflow::OpDeprecation const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  bool arg2 ;
  ::google::protobuf::uint8 *arg3 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpDeprecation_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OpDeprecation_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg3 = (::google::protobuf::uint8 *)(argp3);
  result = (::google::protobuf::uint8 *)((tensorflow::OpDeprecation const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  ::google::protobuf::uint8 *arg2 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg2 = (::google::protobuf::uint8 *)(argp2);
  result = (::google::protobuf::uint8 *)((tensorflow::OpDeprecation const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_GetCachedSize" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = (int)((tensorflow::OpDeprecation const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_GetMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Metadata result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_GetMetadata (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_GetMetadata" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = ((tensorflow::OpDeprecation const *)arg1)->GetMetadata();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::Metadata((const ::google::protobuf::Metadata&)(result))), SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_clear_version(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_clear_version (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_clear_version" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  (arg1)->clear_version();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDeprecation_kVersionFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDeprecation::kVersionFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDeprecation_version(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::int32 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_version (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_version" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = ((tensorflow::OpDeprecation const *)arg1)->version();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::int32((const ::google::protobuf::int32&)(result))), SWIGTYPE_p_int32_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_set_version(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  ::google::protobuf::int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_set_version (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_set_version" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_set_version" "', argument " "2"" of type '" "::google::protobuf::int32""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDeprecation_set_version" "', argument " "2"" of type '" "::google::protobuf::int32""'");
    } else {
      arg2 = *((::google::protobuf::int32 *)(argp2));
    }
  }
  (arg1)->set_version(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_clear_explanation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_clear_explanation (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_clear_explanation" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  (arg1)->clear_explanation();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpDeprecation_kExplanationFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpDeprecation::kExplanationFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpDeprecation_explanation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_explanation (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_explanation" "', argument " "1"" of type '" "tensorflow::OpDeprecation const *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = (::std::string *) &((tensorflow::OpDeprecation const *)arg1)->explanation();
  jsresult = SWIG_From_std_string((std::string)(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_set_explanation__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  ::std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_set_explanation" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_set_explanation" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpDeprecation_set_explanation" "', argument " "2"" of type '" "::std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_explanation((::std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_set_explanation__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_set_explanation" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_set_explanation" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  (arg1)->set_explanation((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_set_explanation__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_set_explanation" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_set_explanation" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpDeprecation_set_explanation" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set_explanation((char const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation__wrap_OpDeprecation_set_explanation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDeprecation_set_explanation__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDeprecation_set_explanation__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDeprecation_set_explanation__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDeprecation_set_explanation__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpDeprecation_set_explanation__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpDeprecation_set_explanation__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_explanation.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_mutable_explanation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_mutable_explanation (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_mutable_explanation" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = (::std::string *)(arg1)->mutable_explanation();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_release_explanation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_release_explanation (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_release_explanation" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = (::std::string *)(arg1)->release_explanation();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_set_allocated_explanation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_set_allocated_explanation (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_set_allocated_explanation" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_set_allocated_explanation" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->set_allocated_explanation(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_unsafe_arena_release_explanation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_unsafe_arena_release_explanation (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_unsafe_arena_release_explanation" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  result = (::std::string *)(arg1)->unsafe_arena_release_explanation();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpDeprecation_unsafe_arena_set_allocated_explanation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpDeprecation *arg1 = (tensorflow::OpDeprecation *) 0 ;
  ::std::string *arg2 = (::std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpDeprecation_unsafe_arena_set_allocated_explanation (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpDeprecation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_unsafe_arena_set_allocated_explanation" "', argument " "1"" of type '" "tensorflow::OpDeprecation *""'"); 
  }
  arg1 = (tensorflow::OpDeprecation *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpDeprecation_unsafe_arena_set_allocated_explanation" "', argument " "2"" of type '" "::std::string *""'"); 
  }
  arg2 = (::std::string *)(argp2);
  (arg1)->unsafe_arena_set_allocated_explanation(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_OpDeprecation_default_instance__set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDeprecation > *arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDeprecation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDeprecation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpDeprecation_default_instance__set" "', argument " "1"" of type '" "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDeprecation > *""'"); 
  }
  arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDeprecation > *)(argp1);
  tensorflow::OpDeprecation_default_instance_ = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_OpDeprecation_default_instance__get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDeprecation > *result = 0 ;
  
  result = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDeprecation > *)&tensorflow::OpDeprecation_default_instance_;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDeprecation_t, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_OpList__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::OpList *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpList__SWIG_0 (should be 0)");
  result = (tensorflow::OpList *)new tensorflow::OpList();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__OpList, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_OpList(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_OpList(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_OpList(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_OpList(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::OpList * arg1 = (tensorflow::OpList *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_OpList__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::OpList *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::OpList *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpList__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__OpList,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpList" "', argument " "1"" of type '" "tensorflow::OpList const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OpList" "', argument " "1"" of type '" "tensorflow::OpList const &""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = (tensorflow::OpList *)new tensorflow::OpList((tensorflow::OpList const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__OpList, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_OpList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_OpList__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_OpList__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_OpList__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_OpList__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_OpList");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_GetArena(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Arena *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_GetArena (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_GetArena" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = (::google::protobuf::Arena *)((tensorflow::OpList const *)arg1)->GetArena();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_GetMaybeArenaPointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_GetMaybeArenaPointer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_GetMaybeArenaPointer" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = (void *)((tensorflow::OpList const *)arg1)->GetMaybeArenaPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_descriptor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::Descriptor *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_descriptor (should be 0)");
  
  result = (::google::protobuf::Descriptor *)tensorflow::OpList::descriptor();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__Descriptor, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_default_instance (should be 0)");
  
  result = (tensorflow::OpList *) &tensorflow::OpList::default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_internal_default_instance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_internal_default_instance (should be 0)");
  
  result = (tensorflow::OpList *)tensorflow::OpList::internal_default_instance();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_UnsafeArenaSwap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  tensorflow::OpList *arg2 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_UnsafeArenaSwap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_UnsafeArenaSwap" "', argument " "1"" of type '" "tensorflow::OpList *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpList_UnsafeArenaSwap" "', argument " "2"" of type '" "tensorflow::OpList *""'"); 
  }
  arg2 = (tensorflow::OpList *)(argp2);
  (arg1)->UnsafeArenaSwap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_Swap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  tensorflow::OpList *arg2 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_Swap (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_Swap" "', argument " "1"" of type '" "tensorflow::OpList *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpList_Swap" "', argument " "2"" of type '" "tensorflow::OpList *""'"); 
  }
  arg2 = (tensorflow::OpList *)(argp2);
  (arg1)->Swap(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_New__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::OpList *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_New" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = (tensorflow::OpList *)((tensorflow::OpList const *)arg1)->New();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_New__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  ::google::protobuf::Arena *arg2 = (::google::protobuf::Arena *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::OpList *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_New" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__Arena, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpList_New" "', argument " "2"" of type '" "::google::protobuf::Arena *""'"); 
  }
  arg2 = (::google::protobuf::Arena *)(argp2);
  result = (tensorflow::OpList *)((tensorflow::OpList const *)arg1)->New(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList__wrap_OpList_New(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpList_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpList_New__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpList_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpList_New__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function New.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_CopyFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_CopyFrom" "', argument " "1"" of type '" "tensorflow::OpList *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpList_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpList_CopyFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->CopyFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_MergeFrom__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  ::google::protobuf::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_MergeFrom" "', argument " "1"" of type '" "tensorflow::OpList *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_google__protobuf__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpList_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpList_MergeFrom" "', argument " "2"" of type '" "::google::protobuf::Message const &""'"); 
  }
  arg2 = (::google::protobuf::Message *)(argp2);
  (arg1)->MergeFrom((::google::protobuf::Message const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_CopyFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  tensorflow::OpList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_CopyFrom" "', argument " "1"" of type '" "tensorflow::OpList *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__OpList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpList_CopyFrom" "', argument " "2"" of type '" "tensorflow::OpList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpList_CopyFrom" "', argument " "2"" of type '" "tensorflow::OpList const &""'"); 
  }
  arg2 = (tensorflow::OpList *)(argp2);
  (arg1)->CopyFrom((tensorflow::OpList const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList__wrap_OpList_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpList_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpList_CopyFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpList_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpList_CopyFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CopyFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_MergeFrom__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  tensorflow::OpList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_MergeFrom" "', argument " "1"" of type '" "tensorflow::OpList *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__OpList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpList_MergeFrom" "', argument " "2"" of type '" "tensorflow::OpList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpList_MergeFrom" "', argument " "2"" of type '" "tensorflow::OpList const &""'"); 
  }
  arg2 = (tensorflow::OpList *)(argp2);
  (arg1)->MergeFrom((tensorflow::OpList const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList__wrap_OpList_MergeFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpList_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpList_MergeFrom__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpList_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpList_MergeFrom__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MergeFrom.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_Clear" "', argument " "1"" of type '" "tensorflow::OpList *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_IsInitialized" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = (bool)((tensorflow::OpList const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_ByteSizeLong(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_ByteSizeLong (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_ByteSizeLong" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = ((tensorflow::OpList const *)arg1)->ByteSizeLong();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_MergePartialFromCodedStream(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  ::google::protobuf::io::CodedInputStream *arg2 = (::google::protobuf::io::CodedInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_MergePartialFromCodedStream (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_MergePartialFromCodedStream" "', argument " "1"" of type '" "tensorflow::OpList *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpList_MergePartialFromCodedStream" "', argument " "2"" of type '" "::google::protobuf::io::CodedInputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedInputStream *)(argp2);
  result = (bool)(arg1)->MergePartialFromCodedStream(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_SerializeWithCachedSizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  ::google::protobuf::io::CodedOutputStream *arg2 = (::google::protobuf::io::CodedOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_SerializeWithCachedSizes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_SerializeWithCachedSizes" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_google__protobuf__io__CodedOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpList_SerializeWithCachedSizes" "', argument " "2"" of type '" "::google::protobuf::io::CodedOutputStream *""'"); 
  }
  arg2 = (::google::protobuf::io::CodedOutputStream *)(argp2);
  ((tensorflow::OpList const *)arg1)->SerializeWithCachedSizes(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_InternalSerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  bool arg2 ;
  ::google::protobuf::uint8 *arg3 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_InternalSerializeWithCachedSizesToArray (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_InternalSerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpList_InternalSerializeWithCachedSizesToArray" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OpList_InternalSerializeWithCachedSizesToArray" "', argument " "3"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg3 = (::google::protobuf::uint8 *)(argp3);
  result = (::google::protobuf::uint8 *)((tensorflow::OpList const *)arg1)->InternalSerializeWithCachedSizesToArray(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_SerializeWithCachedSizesToArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  ::google::protobuf::uint8 *arg2 = (::google::protobuf::uint8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ::google::protobuf::uint8 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_SerializeWithCachedSizesToArray (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_SerializeWithCachedSizesToArray" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpList_SerializeWithCachedSizesToArray" "', argument " "2"" of type '" "::google::protobuf::uint8 *""'"); 
  }
  arg2 = (::google::protobuf::uint8 *)(argp2);
  result = (::google::protobuf::uint8 *)((tensorflow::OpList const *)arg1)->SerializeWithCachedSizesToArray(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_GetCachedSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_GetCachedSize (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_GetCachedSize" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = (int)((tensorflow::OpList const *)arg1)->GetCachedSize();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_GetMetadata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::Metadata result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_GetMetadata (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_GetMetadata" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = ((tensorflow::OpList const *)arg1)->GetMetadata();
  jsresult = SWIG_NewPointerObj((new ::google::protobuf::Metadata((const ::google::protobuf::Metadata&)(result))), SWIGTYPE_p_google__protobuf__Metadata, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_op_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_op_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_op_size" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = (int)((tensorflow::OpList const *)arg1)->op_size();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_clear_op(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_clear_op (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_clear_op" "', argument " "1"" of type '" "tensorflow::OpList *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  (arg1)->clear_op();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_OpList_kOpFieldNumber(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::OpList::kOpFieldNumber));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_OpList_op__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::OpDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_op" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpList_op" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::OpDef *) &((tensorflow::OpList const *)arg1)->op(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_mutable_op__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::tensorflow::OpDef *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_mutable_op" "', argument " "1"" of type '" "tensorflow::OpList *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpList_mutable_op" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (::tensorflow::OpDef *)(arg1)->mutable_op(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_add_op(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::tensorflow::OpDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpList_add_op (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_add_op" "', argument " "1"" of type '" "tensorflow::OpList *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = (::tensorflow::OpDef *)(arg1)->add_op();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_mutable_op__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_mutable_op" "', argument " "1"" of type '" "tensorflow::OpList *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef > *)(arg1)->mutable_op();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList__wrap_OpList_mutable_op(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpList_mutable_op__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpList_mutable_op__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpList_mutable_op__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpList_mutable_op__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mutable_op.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList_op__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_op" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = (::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef > *) &((tensorflow::OpList const *)arg1)->op();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpList__wrap_OpList_op(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpList_op__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpList_op__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_OpList_op__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_OpList_op__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function op.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_OpList_default_instance__set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpList > *arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpList > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpList_default_instance__set" "', argument " "1"" of type '" "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpList > *""'"); 
  }
  arg1 = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpList > *)(argp1);
  tensorflow::OpList_default_instance_ = *arg1;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_OpList_default_instance__get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  ::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpList > *result = 0 ;
  
  result = (::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpList > *)&tensorflow::OpList_default_instance_;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpList_t, 0 |  0 );
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_StringPiece__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::StringPiece *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_StringPiece__SWIG_0 (should be 0)");
  result = (tensorflow::StringPiece *)new tensorflow::StringPiece();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__StringPiece, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_StringPiece__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  tensorflow::StringPiece *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_StringPiece__SWIG_1 (should be 2)");
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringPiece" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StringPiece" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (tensorflow::StringPiece *)new tensorflow::StringPiece((char const *)arg1,arg2);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__StringPiece, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_StringPiece__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  string *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::StringPiece *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_StringPiece__SWIG_2 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringPiece" "', argument " "1"" of type '" "string const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringPiece" "', argument " "1"" of type '" "string const &""'"); 
  }
  arg1 = (string *)(argp1);
  result = (tensorflow::StringPiece *)new tensorflow::StringPiece((string const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__StringPiece, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_StringPiece__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  tensorflow::StringPiece *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_StringPiece__SWIG_3 (should be 1)");
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringPiece" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = (tensorflow::StringPiece *)new tensorflow::StringPiece((char const *)arg1);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__StringPiece, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_StringPiece(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_StringPiece__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_StringPiece__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_StringPiece__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_StringPiece__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_StringPiece__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_StringPiece__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_StringPiece__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_StringPiece__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_StringPiece");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_set (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_set" "', argument " "1"" of type '" "tensorflow::StringPiece *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  res2 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPiece_set" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringPiece_set" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->set((void const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_data(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_data (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_data" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  result = (char *)((tensorflow::StringPiece const *)arg1)->data();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_size" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  result = ((tensorflow::StringPiece const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_empty (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_empty" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  result = (bool)((tensorflow::StringPiece const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_begin(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::StringPiece::iterator result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_begin (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_begin" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  result = (tensorflow::StringPiece::iterator)((tensorflow::StringPiece const *)arg1)->begin();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_end(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::StringPiece::iterator result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_end (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_end" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  result = (tensorflow::StringPiece::iterator)((tensorflow::StringPiece const *)arg1)->end();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_npos_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t result;
  
  result = (size_t)tensorflow::StringPiece::npos;
  jsresult = SWIG_From_size_t((size_t)(result));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_StringPiece_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_clear" "', argument " "1"" of type '" "tensorflow::StringPiece *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_remove_prefix(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_remove_prefix (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_remove_prefix" "', argument " "1"" of type '" "tensorflow::StringPiece *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPiece_remove_prefix" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  (arg1)->remove_prefix(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_remove_suffix(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_remove_suffix (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_remove_suffix" "', argument " "1"" of type '" "tensorflow::StringPiece *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPiece_remove_suffix" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  (arg1)->remove_suffix(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_find__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  char arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_find" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  ecode2 = SWIG_AsVal_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPiece_find" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = (char)(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringPiece_find" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = ((tensorflow::StringPiece const *)arg1)->find(arg2,arg3);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_find__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_find" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  ecode2 = SWIG_AsVal_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPiece_find" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = (char)(val2);
  result = ((tensorflow::StringPiece const *)arg1)->find(arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece__wrap_StringPiece_find(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_StringPiece_find__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_StringPiece_find__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_StringPiece_find__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_StringPiece_find__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function find.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_rfind__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  char arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_rfind" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  ecode2 = SWIG_AsVal_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPiece_rfind" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = (char)(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringPiece_rfind" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = ((tensorflow::StringPiece const *)arg1)->rfind(arg2,arg3);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_rfind__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_rfind" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  ecode2 = SWIG_AsVal_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPiece_rfind" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = (char)(val2);
  result = ((tensorflow::StringPiece const *)arg1)->rfind(arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece__wrap_StringPiece_rfind(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_StringPiece_rfind__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_StringPiece_rfind__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_StringPiece_rfind__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_StringPiece_rfind__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function rfind.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_contains(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  tensorflow::StringPiece arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_contains (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_contains" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPiece_contains" "', argument " "2"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPiece_contains" "', argument " "2"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg2 = *((tensorflow::StringPiece *)(argp2));
    }
  }
  result = (bool)((tensorflow::StringPiece const *)arg1)->contains(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_Consume(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  tensorflow::StringPiece arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_Consume (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_Consume" "', argument " "1"" of type '" "tensorflow::StringPiece *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPiece_Consume" "', argument " "2"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPiece_Consume" "', argument " "2"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg2 = *((tensorflow::StringPiece *)(argp2));
    }
  }
  result = (bool)(arg1)->Consume(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_substr__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  tensorflow::StringPiece result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_substr" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPiece_substr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringPiece_substr" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = ((tensorflow::StringPiece const *)arg1)->substr(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new tensorflow::StringPiece((const tensorflow::StringPiece&)(result))), SWIGTYPE_p_tensorflow__StringPiece, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_substr__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  tensorflow::StringPiece result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_substr" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPiece_substr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((tensorflow::StringPiece const *)arg1)->substr(arg2);
  jsresult = SWIG_NewPointerObj((new tensorflow::StringPiece((const tensorflow::StringPiece&)(result))), SWIGTYPE_p_tensorflow__StringPiece, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece__wrap_StringPiece_substr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_StringPiece_substr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_StringPiece_substr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_StringPiece_substr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_StringPiece_substr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function substr.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_ToString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_ToString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_ToString" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  result = ((tensorflow::StringPiece const *)arg1)->ToString();
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_compare(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  tensorflow::StringPiece arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_compare (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_compare" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPiece_compare" "', argument " "2"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPiece_compare" "', argument " "2"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg2 = *((tensorflow::StringPiece *)(argp2));
    }
  }
  result = (int)((tensorflow::StringPiece const *)arg1)->compare(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_starts_with(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  tensorflow::StringPiece arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_starts_with (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_starts_with" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPiece_starts_with" "', argument " "2"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPiece_starts_with" "', argument " "2"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg2 = *((tensorflow::StringPiece *)(argp2));
    }
  }
  result = (bool)((tensorflow::StringPiece const *)arg1)->starts_with(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringPiece_ends_with(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::StringPiece *arg1 = (tensorflow::StringPiece *) 0 ;
  tensorflow::StringPiece arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringPiece_ends_with (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__StringPiece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPiece_ends_with" "', argument " "1"" of type '" "tensorflow::StringPiece const *""'"); 
  }
  arg1 = (tensorflow::StringPiece *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPiece_ends_with" "', argument " "2"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPiece_ends_with" "', argument " "2"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg2 = *((tensorflow::StringPiece *)(argp2));
    }
  }
  result = (bool)((tensorflow::StringPiece const *)arg1)->ends_with(arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_StringPiece(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_StringPiece(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_StringPiece(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_StringPiece(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::StringPiece * arg1 = (tensorflow::StringPiece *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Env(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Env(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Env(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Env(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::Env * arg1 = (tensorflow::Env *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Env_Default(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_Default (should be 0)");
  
  result = (tensorflow::Env *)tensorflow::Env::Default();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_GetFileSystemForFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  FileSystem **arg3 = (FileSystem **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_GetFileSystemForFile (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_GetFileSystemForFile" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_GetFileSystemForFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_GetFileSystemForFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_FileSystem, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_GetFileSystemForFile" "', argument " "3"" of type '" "FileSystem **""'"); 
  }
  arg3 = (FileSystem **)(argp3);
  result = (arg1)->GetFileSystemForFile((string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_GetRegisteredFileSystemSchemes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_GetRegisteredFileSystemSchemes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_GetRegisteredFileSystemSchemes" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_GetRegisteredFileSystemSchemes" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = (std::vector< std::string > *)(argp2);
  result = (arg1)->GetRegisteredFileSystemSchemes(arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_RegisterFileSystem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  FileSystemRegistry::Factory arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_RegisterFileSystem (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_RegisterFileSystem" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_RegisterFileSystem" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_RegisterFileSystem" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_FileSystemRegistry__Factory,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_RegisterFileSystem" "', argument " "3"" of type '" "FileSystemRegistry::Factory""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_RegisterFileSystem" "', argument " "3"" of type '" "FileSystemRegistry::Factory""'");
    } else {
      arg3 = *((FileSystemRegistry::Factory *)(argp3));
    }
  }
  result = (arg1)->RegisterFileSystem((string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_NewRandomAccessFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  std::unique_ptr< RandomAccessFile > *arg3 = (std::unique_ptr< RandomAccessFile > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_NewRandomAccessFile (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_NewRandomAccessFile" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_NewRandomAccessFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_NewRandomAccessFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_std__unique_ptrT_RandomAccessFile_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_NewRandomAccessFile" "', argument " "3"" of type '" "std::unique_ptr< RandomAccessFile > *""'"); 
  }
  arg3 = (std::unique_ptr< RandomAccessFile > *)(argp3);
  result = (arg1)->NewRandomAccessFile((string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_NewWritableFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  std::unique_ptr< WritableFile > *arg3 = (std::unique_ptr< WritableFile > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_NewWritableFile (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_NewWritableFile" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_NewWritableFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_NewWritableFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_std__unique_ptrT_WritableFile_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_NewWritableFile" "', argument " "3"" of type '" "std::unique_ptr< WritableFile > *""'"); 
  }
  arg3 = (std::unique_ptr< WritableFile > *)(argp3);
  result = (arg1)->NewWritableFile((string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_NewAppendableFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  std::unique_ptr< WritableFile > *arg3 = (std::unique_ptr< WritableFile > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_NewAppendableFile (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_NewAppendableFile" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_NewAppendableFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_NewAppendableFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_std__unique_ptrT_WritableFile_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_NewAppendableFile" "', argument " "3"" of type '" "std::unique_ptr< WritableFile > *""'"); 
  }
  arg3 = (std::unique_ptr< WritableFile > *)(argp3);
  result = (arg1)->NewAppendableFile((string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_NewReadOnlyMemoryRegionFromFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  std::unique_ptr< ReadOnlyMemoryRegion > *arg3 = (std::unique_ptr< ReadOnlyMemoryRegion > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_NewReadOnlyMemoryRegionFromFile (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_NewReadOnlyMemoryRegionFromFile" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_NewReadOnlyMemoryRegionFromFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_NewReadOnlyMemoryRegionFromFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_std__unique_ptrT_ReadOnlyMemoryRegion_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_NewReadOnlyMemoryRegionFromFile" "', argument " "3"" of type '" "std::unique_ptr< ReadOnlyMemoryRegion > *""'"); 
  }
  arg3 = (std::unique_ptr< ReadOnlyMemoryRegion > *)(argp3);
  result = (arg1)->NewReadOnlyMemoryRegionFromFile((string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_FileExists(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_FileExists (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_FileExists" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_FileExists" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_FileExists" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  result = (arg1)->FileExists((string const &)*arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_GetChildren(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_GetChildren (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_GetChildren" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_GetChildren" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_GetChildren" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_GetChildren" "', argument " "3"" of type '" "std::vector< std::string > *""'"); 
  }
  arg3 = (std::vector< std::string > *)(argp3);
  result = (arg1)->GetChildren((string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_MatchPath(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_MatchPath (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_MatchPath" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_MatchPath" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_MatchPath" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_MatchPath" "', argument " "3"" of type '" "string const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_MatchPath" "', argument " "3"" of type '" "string const &""'"); 
  }
  arg3 = (string *)(argp3);
  result = (bool)(arg1)->MatchPath((string const &)*arg2,(string const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_GetMatchingPaths(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_GetMatchingPaths (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_GetMatchingPaths" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_GetMatchingPaths" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_GetMatchingPaths" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_GetMatchingPaths" "', argument " "3"" of type '" "std::vector< std::string > *""'"); 
  }
  arg3 = (std::vector< std::string > *)(argp3);
  result = (arg1)->GetMatchingPaths((string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_DeleteFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_DeleteFile (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_DeleteFile" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_DeleteFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_DeleteFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  result = (arg1)->DeleteFile((string const &)*arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_DeleteRecursively(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  int64 *arg3 = (int64 *) 0 ;
  int64 *arg4 = (int64 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_DeleteRecursively (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_DeleteRecursively" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_DeleteRecursively" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_DeleteRecursively" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_int64, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_DeleteRecursively" "', argument " "3"" of type '" "int64 *""'"); 
  }
  arg3 = (int64 *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_int64, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Env_DeleteRecursively" "', argument " "4"" of type '" "int64 *""'"); 
  }
  arg4 = (int64 *)(argp4);
  result = (arg1)->DeleteRecursively((string const &)*arg2,arg3,arg4);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_RecursivelyCreateDir(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_RecursivelyCreateDir (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_RecursivelyCreateDir" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_RecursivelyCreateDir" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_RecursivelyCreateDir" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  result = (arg1)->RecursivelyCreateDir((string const &)*arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_CreateDir(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_CreateDir (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_CreateDir" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_CreateDir" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_CreateDir" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  result = (arg1)->CreateDir((string const &)*arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_DeleteDir(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_DeleteDir (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_DeleteDir" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_DeleteDir" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_DeleteDir" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  result = (arg1)->DeleteDir((string const &)*arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_Stat(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  FileStatistics *arg3 = (FileStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_Stat (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_Stat" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_Stat" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_Stat" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_FileStatistics, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_Stat" "', argument " "3"" of type '" "FileStatistics *""'"); 
  }
  arg3 = (FileStatistics *)(argp3);
  result = (arg1)->Stat((string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_IsDirectory(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_IsDirectory (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_IsDirectory" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_IsDirectory" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_IsDirectory" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  result = (arg1)->IsDirectory((string const &)*arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_GetFileSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  uint64 *arg3 = (uint64 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_GetFileSize (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_GetFileSize" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_GetFileSize" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_GetFileSize" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_uint64, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_GetFileSize" "', argument " "3"" of type '" "uint64 *""'"); 
  }
  arg3 = (uint64 *)(argp3);
  result = (arg1)->GetFileSize((string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_RenameFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_RenameFile (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_RenameFile" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_RenameFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_RenameFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_RenameFile" "', argument " "3"" of type '" "string const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_RenameFile" "', argument " "3"" of type '" "string const &""'"); 
  }
  arg3 = (string *)(argp3);
  result = (arg1)->RenameFile((string const &)*arg2,(string const &)*arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_NowMicros(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_NowMicros (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_NowMicros" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  result = (arg1)->NowMicros();
  jsresult = SWIG_NewPointerObj((new uint64((const uint64&)(result))), SWIGTYPE_p_uint64, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_NowSeconds(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_NowSeconds (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_NowSeconds" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  result = (arg1)->NowSeconds();
  jsresult = SWIG_NewPointerObj((new uint64((const uint64&)(result))), SWIGTYPE_p_uint64, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_SleepForMicroseconds(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_SleepForMicroseconds (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_SleepForMicroseconds" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_SleepForMicroseconds" "', argument " "2"" of type '" "int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_SleepForMicroseconds" "', argument " "2"" of type '" "int64""'");
    } else {
      arg2 = *((int64 *)(argp2));
    }
  }
  (arg1)->SleepForMicroseconds(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_StartThread(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  tensorflow::ThreadOptions *arg2 = 0 ;
  string *arg3 = 0 ;
  std::function< void () > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  tensorflow::Thread *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_StartThread (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_StartThread" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__ThreadOptions,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_StartThread" "', argument " "2"" of type '" "tensorflow::ThreadOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_StartThread" "', argument " "2"" of type '" "tensorflow::ThreadOptions const &""'"); 
  }
  arg2 = (tensorflow::ThreadOptions *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_StartThread" "', argument " "3"" of type '" "string const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_StartThread" "', argument " "3"" of type '" "string const &""'"); 
  }
  arg3 = (string *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__functionT_void_fF_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Env_StartThread" "', argument " "4"" of type '" "std::function< void () >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_StartThread" "', argument " "4"" of type '" "std::function< void () >""'");
    } else {
      arg4 = *((std::function< void () > *)(argp4));
    }
  }
  result = (tensorflow::Thread *)(arg1)->StartThread((tensorflow::ThreadOptions const &)*arg2,(string const &)*arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Thread, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_SchedClosure(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  std::function< void () > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_SchedClosure (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_SchedClosure" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__functionT_void_fF_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_SchedClosure" "', argument " "2"" of type '" "std::function< void () >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_SchedClosure" "', argument " "2"" of type '" "std::function< void () >""'");
    } else {
      arg2 = *((std::function< void () > *)(argp2));
    }
  }
  (arg1)->SchedClosure(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_SchedClosureAfter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  int64 arg2 ;
  std::function< void () > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_SchedClosureAfter (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_SchedClosureAfter" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_SchedClosureAfter" "', argument " "2"" of type '" "int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_SchedClosureAfter" "', argument " "2"" of type '" "int64""'");
    } else {
      arg2 = *((int64 *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__functionT_void_fF_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_SchedClosureAfter" "', argument " "3"" of type '" "std::function< void () >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_SchedClosureAfter" "', argument " "3"" of type '" "std::function< void () >""'");
    } else {
      arg3 = *((std::function< void () > *)(argp3));
    }
  }
  (arg1)->SchedClosureAfter(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_LoadLibrary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  char *arg2 = (char *) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_LoadLibrary (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_LoadLibrary" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_LoadLibrary" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_LoadLibrary" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = (void **)(argp3);
  result = (arg1)->LoadLibrary((char const *)arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_GetSymbolFromLibrary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  void **arg4 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_GetSymbolFromLibrary (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_GetSymbolFromLibrary" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_GetSymbolFromLibrary" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_AsCharPtrAndSize(args[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_GetSymbolFromLibrary" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Env_GetSymbolFromLibrary" "', argument " "4"" of type '" "void **""'"); 
  }
  arg4 = (void **)(argp4);
  result = (arg1)->GetSymbolFromLibrary(arg2,(char const *)arg3,arg4);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Env_FormatLibraryFileName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  string result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Env_FormatLibraryFileName (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Env_FormatLibraryFileName" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Env_FormatLibraryFileName" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_FormatLibraryFileName" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Env_FormatLibraryFileName" "', argument " "3"" of type '" "string const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Env_FormatLibraryFileName" "', argument " "3"" of type '" "string const &""'"); 
  }
  arg3 = (string *)(argp3);
  result = (arg1)->FormatLibraryFileName((string const &)*arg2,(string const &)*arg3);
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_Env(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Env can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_EnvWrapper(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::EnvWrapper *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_EnvWrapper (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EnvWrapper" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  result = (tensorflow::EnvWrapper *)new tensorflow::EnvWrapper(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__EnvWrapper, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_EnvWrapper(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_EnvWrapper(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_EnvWrapper(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_EnvWrapper(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::EnvWrapper * arg1 = (tensorflow::EnvWrapper *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_EnvWrapper_target(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Env *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_target (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_target" "', argument " "1"" of type '" "tensorflow::EnvWrapper const *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  result = (tensorflow::Env *)((tensorflow::EnvWrapper const *)arg1)->target();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EnvWrapper_GetFileSystemForFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  string *arg2 = 0 ;
  FileSystem **arg3 = (FileSystem **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_GetFileSystemForFile (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_GetFileSystemForFile" "', argument " "1"" of type '" "tensorflow::EnvWrapper *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnvWrapper_GetFileSystemForFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_GetFileSystemForFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_FileSystem, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EnvWrapper_GetFileSystemForFile" "', argument " "3"" of type '" "FileSystem **""'"); 
  }
  arg3 = (FileSystem **)(argp3);
  result = (arg1)->GetFileSystemForFile((string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EnvWrapper_GetRegisteredFileSystemSchemes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_GetRegisteredFileSystemSchemes (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_GetRegisteredFileSystemSchemes" "', argument " "1"" of type '" "tensorflow::EnvWrapper *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnvWrapper_GetRegisteredFileSystemSchemes" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = (std::vector< std::string > *)(argp2);
  result = (arg1)->GetRegisteredFileSystemSchemes(arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EnvWrapper_RegisterFileSystem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  string *arg2 = 0 ;
  FileSystemRegistry::Factory arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_RegisterFileSystem (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_RegisterFileSystem" "', argument " "1"" of type '" "tensorflow::EnvWrapper *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnvWrapper_RegisterFileSystem" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_RegisterFileSystem" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_FileSystemRegistry__Factory,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EnvWrapper_RegisterFileSystem" "', argument " "3"" of type '" "FileSystemRegistry::Factory""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_RegisterFileSystem" "', argument " "3"" of type '" "FileSystemRegistry::Factory""'");
    } else {
      arg3 = *((FileSystemRegistry::Factory *)(argp3));
    }
  }
  result = (arg1)->RegisterFileSystem((string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EnvWrapper_MatchPath(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  string *arg2 = 0 ;
  string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_MatchPath (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_MatchPath" "', argument " "1"" of type '" "tensorflow::EnvWrapper *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnvWrapper_MatchPath" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_MatchPath" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EnvWrapper_MatchPath" "', argument " "3"" of type '" "string const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_MatchPath" "', argument " "3"" of type '" "string const &""'"); 
  }
  arg3 = (string *)(argp3);
  result = (bool)(arg1)->MatchPath((string const &)*arg2,(string const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EnvWrapper_NowMicros(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_NowMicros (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_NowMicros" "', argument " "1"" of type '" "tensorflow::EnvWrapper *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  result = (arg1)->NowMicros();
  jsresult = SWIG_NewPointerObj((new uint64((const uint64&)(result))), SWIGTYPE_p_uint64, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EnvWrapper_SleepForMicroseconds(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_SleepForMicroseconds (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_SleepForMicroseconds" "', argument " "1"" of type '" "tensorflow::EnvWrapper *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnvWrapper_SleepForMicroseconds" "', argument " "2"" of type '" "int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_SleepForMicroseconds" "', argument " "2"" of type '" "int64""'");
    } else {
      arg2 = *((int64 *)(argp2));
    }
  }
  (arg1)->SleepForMicroseconds(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EnvWrapper_StartThread(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  tensorflow::ThreadOptions *arg2 = 0 ;
  string *arg3 = 0 ;
  std::function< void () > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  tensorflow::Thread *result = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_StartThread (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_StartThread" "', argument " "1"" of type '" "tensorflow::EnvWrapper *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__ThreadOptions,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnvWrapper_StartThread" "', argument " "2"" of type '" "tensorflow::ThreadOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_StartThread" "', argument " "2"" of type '" "tensorflow::ThreadOptions const &""'"); 
  }
  arg2 = (tensorflow::ThreadOptions *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EnvWrapper_StartThread" "', argument " "3"" of type '" "string const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_StartThread" "', argument " "3"" of type '" "string const &""'"); 
  }
  arg3 = (string *)(argp3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__functionT_void_fF_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EnvWrapper_StartThread" "', argument " "4"" of type '" "std::function< void () >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_StartThread" "', argument " "4"" of type '" "std::function< void () >""'");
    } else {
      arg4 = *((std::function< void () > *)(argp4));
    }
  }
  result = (tensorflow::Thread *)(arg1)->StartThread((tensorflow::ThreadOptions const &)*arg2,(string const &)*arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Thread, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EnvWrapper_SchedClosure(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  std::function< void () > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_SchedClosure (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_SchedClosure" "', argument " "1"" of type '" "tensorflow::EnvWrapper *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__functionT_void_fF_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnvWrapper_SchedClosure" "', argument " "2"" of type '" "std::function< void () >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_SchedClosure" "', argument " "2"" of type '" "std::function< void () >""'");
    } else {
      arg2 = *((std::function< void () > *)(argp2));
    }
  }
  (arg1)->SchedClosure(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EnvWrapper_SchedClosureAfter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  int64 arg2 ;
  std::function< void () > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_SchedClosureAfter (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_SchedClosureAfter" "', argument " "1"" of type '" "tensorflow::EnvWrapper *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnvWrapper_SchedClosureAfter" "', argument " "2"" of type '" "int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_SchedClosureAfter" "', argument " "2"" of type '" "int64""'");
    } else {
      arg2 = *((int64 *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__functionT_void_fF_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EnvWrapper_SchedClosureAfter" "', argument " "3"" of type '" "std::function< void () >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_SchedClosureAfter" "', argument " "3"" of type '" "std::function< void () >""'");
    } else {
      arg3 = *((std::function< void () > *)(argp3));
    }
  }
  (arg1)->SchedClosureAfter(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EnvWrapper_LoadLibrary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  char *arg2 = (char *) 0 ;
  void **arg3 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_LoadLibrary (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_LoadLibrary" "', argument " "1"" of type '" "tensorflow::EnvWrapper *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnvWrapper_LoadLibrary" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EnvWrapper_LoadLibrary" "', argument " "3"" of type '" "void **""'"); 
  }
  arg3 = (void **)(argp3);
  result = (arg1)->LoadLibrary((char const *)arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EnvWrapper_GetSymbolFromLibrary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  void **arg4 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_GetSymbolFromLibrary (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_GetSymbolFromLibrary" "', argument " "1"" of type '" "tensorflow::EnvWrapper *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  res2 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnvWrapper_GetSymbolFromLibrary" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_AsCharPtrAndSize(args[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EnvWrapper_GetSymbolFromLibrary" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EnvWrapper_GetSymbolFromLibrary" "', argument " "4"" of type '" "void **""'"); 
  }
  arg4 = (void **)(argp4);
  result = (arg1)->GetSymbolFromLibrary(arg2,(char const *)arg3,arg4);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EnvWrapper_FormatLibraryFileName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::EnvWrapper *arg1 = (tensorflow::EnvWrapper *) 0 ;
  string *arg2 = 0 ;
  string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  string result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EnvWrapper_FormatLibraryFileName (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__EnvWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnvWrapper_FormatLibraryFileName" "', argument " "1"" of type '" "tensorflow::EnvWrapper *""'"); 
  }
  arg1 = (tensorflow::EnvWrapper *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnvWrapper_FormatLibraryFileName" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_FormatLibraryFileName" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EnvWrapper_FormatLibraryFileName" "', argument " "3"" of type '" "string const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnvWrapper_FormatLibraryFileName" "', argument " "3"" of type '" "string const &""'"); 
  }
  arg3 = (string *)(argp3);
  result = (arg1)->FormatLibraryFileName((string const &)*arg2,(string const &)*arg3);
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Thread(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::Thread *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Thread (should be 0)");
  result = (tensorflow::Thread *)new tensorflow::Thread();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__Thread, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Thread(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Thread(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Thread(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Thread(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::Thread * arg1 = (tensorflow::Thread *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_ThreadOptions_stack_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  tensorflow::ThreadOptions *arg1 = (tensorflow::ThreadOptions *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_tensorflow__ThreadOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThreadOptions_stack_size_set" "', argument " "1"" of type '" "tensorflow::ThreadOptions *""'"); 
  }
  arg1 = (tensorflow::ThreadOptions *)(argp1);
  ecode2 = SWIG_AsVal_size_t(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThreadOptions_stack_size_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  if (arg1) (arg1)->stack_size = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_ThreadOptions_stack_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::ThreadOptions *arg1 = (tensorflow::ThreadOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_tensorflow__ThreadOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThreadOptions_stack_size_get" "', argument " "1"" of type '" "tensorflow::ThreadOptions *""'"); 
  }
  arg1 = (tensorflow::ThreadOptions *)(argp1);
  result =  ((arg1)->stack_size);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_ThreadOptions_guard_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  tensorflow::ThreadOptions *arg1 = (tensorflow::ThreadOptions *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_tensorflow__ThreadOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThreadOptions_guard_size_set" "', argument " "1"" of type '" "tensorflow::ThreadOptions *""'"); 
  }
  arg1 = (tensorflow::ThreadOptions *)(argp1);
  ecode2 = SWIG_AsVal_size_t(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThreadOptions_guard_size_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  if (arg1) (arg1)->guard_size = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_ThreadOptions_guard_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::ThreadOptions *arg1 = (tensorflow::ThreadOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_tensorflow__ThreadOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThreadOptions_guard_size_get" "', argument " "1"" of type '" "tensorflow::ThreadOptions *""'"); 
  }
  arg1 = (tensorflow::ThreadOptions *)(argp1);
  result =  ((arg1)->guard_size);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_ThreadOptions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::ThreadOptions *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ThreadOptions (should be 0)");
  result = (tensorflow::ThreadOptions *)new tensorflow::ThreadOptions();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__ThreadOptions, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ThreadOptions(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ThreadOptions(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ThreadOptions(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_ThreadOptions(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::ThreadOptions * arg1 = (tensorflow::ThreadOptions *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_ReadFileToString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  string *arg3 = (string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ReadFileToString (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadFileToString" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReadFileToString" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadFileToString" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ReadFileToString" "', argument " "3"" of type '" "string *""'"); 
  }
  arg3 = (string *)(argp3);
  result = tensorflow::ReadFileToString(arg1,(string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_WriteStringToFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  tensorflow::StringPiece *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_WriteStringToFile (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WriteStringToFile" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WriteStringToFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteStringToFile" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_tensorflow__StringPiece,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WriteStringToFile" "', argument " "3"" of type '" "tensorflow::StringPiece const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteStringToFile" "', argument " "3"" of type '" "tensorflow::StringPiece const &""'"); 
  }
  arg3 = (tensorflow::StringPiece *)(argp3);
  result = tensorflow::WriteStringToFile(arg1,(string const &)*arg2,(tensorflow::StringPiece const &)*arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_WriteBinaryProto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  ::tensorflow::protobuf::MessageLite *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_WriteBinaryProto (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WriteBinaryProto" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WriteBinaryProto" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteBinaryProto" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_tensorflow__protobuf__MessageLite,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WriteBinaryProto" "', argument " "3"" of type '" "::tensorflow::protobuf::MessageLite const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteBinaryProto" "', argument " "3"" of type '" "::tensorflow::protobuf::MessageLite const &""'"); 
  }
  arg3 = (::tensorflow::protobuf::MessageLite *)(argp3);
  result = tensorflow::WriteBinaryProto(arg1,(string const &)*arg2,(::tensorflow::protobuf::MessageLite const &)*arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ReadBinaryProto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  ::tensorflow::protobuf::MessageLite *arg3 = (::tensorflow::protobuf::MessageLite *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ReadBinaryProto (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadBinaryProto" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReadBinaryProto" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadBinaryProto" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_tensorflow__protobuf__MessageLite, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ReadBinaryProto" "', argument " "3"" of type '" "::tensorflow::protobuf::MessageLite *""'"); 
  }
  arg3 = (::tensorflow::protobuf::MessageLite *)(argp3);
  result = tensorflow::ReadBinaryProto(arg1,(string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_WriteTextProto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  ::tensorflow::protobuf::Message *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_WriteTextProto (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WriteTextProto" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WriteTextProto" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteTextProto" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_tensorflow__protobuf__Message,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WriteTextProto" "', argument " "3"" of type '" "::tensorflow::protobuf::Message const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteTextProto" "', argument " "3"" of type '" "::tensorflow::protobuf::Message const &""'"); 
  }
  arg3 = (::tensorflow::protobuf::Message *)(argp3);
  result = tensorflow::WriteTextProto(arg1,(string const &)*arg2,(::tensorflow::protobuf::Message const &)*arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ReadTextProto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Env *arg1 = (tensorflow::Env *) 0 ;
  string *arg2 = 0 ;
  ::tensorflow::protobuf::Message *arg3 = (::tensorflow::protobuf::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ReadTextProto (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadTextProto" "', argument " "1"" of type '" "tensorflow::Env *""'"); 
  }
  arg1 = (tensorflow::Env *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReadTextProto" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadTextProto" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_tensorflow__protobuf__Message, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ReadTextProto" "', argument " "3"" of type '" "::tensorflow::protobuf::Message *""'"); 
  }
  arg3 = (::tensorflow::protobuf::Message *)(argp3);
  result = tensorflow::ReadTextProto(arg1,(string const &)*arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Session(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Session(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Session(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Session(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::Session * arg1 = (tensorflow::Session *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Session_Create__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Session *arg1 = (tensorflow::Session *) 0 ;
  GraphDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_Create" "', argument " "1"" of type '" "tensorflow::Session *""'"); 
  }
  arg1 = (tensorflow::Session *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GraphDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_Create" "', argument " "2"" of type '" "GraphDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Create" "', argument " "2"" of type '" "GraphDef const &""'"); 
  }
  arg2 = (GraphDef *)(argp2);
  result = (arg1)->Create((GraphDef const &)*arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session_Extend__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Session *arg1 = (tensorflow::Session *) 0 ;
  GraphDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_Extend" "', argument " "1"" of type '" "tensorflow::Session *""'"); 
  }
  arg1 = (tensorflow::Session *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_GraphDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_Extend" "', argument " "2"" of type '" "GraphDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Extend" "', argument " "2"" of type '" "GraphDef const &""'"); 
  }
  arg2 = (GraphDef *)(argp2);
  result = (arg1)->Extend((GraphDef const &)*arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session_Run__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Session *arg1 = (tensorflow::Session *) 0 ;
  std::vector< std::pair< std::string,tensorflow::Tensor > > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::vector< std::string > *arg4 = 0 ;
  std::vector< tensorflow::Tensor > *arg5 = (std::vector< tensorflow::Tensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  Status result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_Run" "', argument " "1"" of type '" "tensorflow::Session *""'"); 
  }
  arg1 = (tensorflow::Session *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_std__pairT_std__string_tensorflow__Tensor_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_Run" "', argument " "2"" of type '" "std::vector< std::pair< std::string,tensorflow::Tensor > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Run" "', argument " "2"" of type '" "std::vector< std::pair< std::string,tensorflow::Tensor > > const &""'"); 
  }
  arg2 = (std::vector< std::pair< std::string,tensorflow::Tensor > > *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Session_Run" "', argument " "3"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Run" "', argument " "3"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg3 = (std::vector< std::string > *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Session_Run" "', argument " "4"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Run" "', argument " "4"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg4 = (std::vector< std::string > *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5,SWIGTYPE_p_std__vectorT_tensorflow__Tensor_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Session_Run" "', argument " "5"" of type '" "std::vector< tensorflow::Tensor > *""'"); 
  }
  arg5 = (std::vector< tensorflow::Tensor > *)(argp5);
  result = (arg1)->Run((std::vector< std::pair< std::string,tensorflow::Tensor > > const &)*arg2,(std::vector< std::string > const &)*arg3,(std::vector< std::string > const &)*arg4,arg5);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session_Create__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Session *arg1 = (tensorflow::Session *) 0 ;
  RunOptions *arg2 = 0 ;
  GraphDef *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Status result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_Create" "', argument " "1"" of type '" "tensorflow::Session *""'"); 
  }
  arg1 = (tensorflow::Session *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RunOptions,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_Create" "', argument " "2"" of type '" "RunOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Create" "', argument " "2"" of type '" "RunOptions const &""'"); 
  }
  arg2 = (RunOptions *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_GraphDef,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Session_Create" "', argument " "3"" of type '" "GraphDef const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Create" "', argument " "3"" of type '" "GraphDef const &""'"); 
  }
  arg3 = (GraphDef *)(argp3);
  result = (arg1)->Create((RunOptions const &)*arg2,(GraphDef const &)*arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session__wrap_Session_Create(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Session_Create__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Session_Create__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Session_Create__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Session_Create__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function Create.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session_Extend__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Session *arg1 = (tensorflow::Session *) 0 ;
  RunOptions *arg2 = 0 ;
  GraphDef *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Status result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_Extend" "', argument " "1"" of type '" "tensorflow::Session *""'"); 
  }
  arg1 = (tensorflow::Session *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RunOptions,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_Extend" "', argument " "2"" of type '" "RunOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Extend" "', argument " "2"" of type '" "RunOptions const &""'"); 
  }
  arg2 = (RunOptions *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_GraphDef,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Session_Extend" "', argument " "3"" of type '" "GraphDef const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Extend" "', argument " "3"" of type '" "GraphDef const &""'"); 
  }
  arg3 = (GraphDef *)(argp3);
  result = (arg1)->Extend((RunOptions const &)*arg2,(GraphDef const &)*arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session__wrap_Session_Extend(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Session_Extend__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Session_Extend__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Session_Extend__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Session_Extend__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function Extend.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session_Close__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Session *arg1 = (tensorflow::Session *) 0 ;
  RunOptions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_Close" "', argument " "1"" of type '" "tensorflow::Session *""'"); 
  }
  arg1 = (tensorflow::Session *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RunOptions,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_Close" "', argument " "2"" of type '" "RunOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Close" "', argument " "2"" of type '" "RunOptions const &""'"); 
  }
  arg2 = (RunOptions *)(argp2);
  result = (arg1)->Close((RunOptions const &)*arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session_Run__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Session *arg1 = (tensorflow::Session *) 0 ;
  RunOptions *arg2 = 0 ;
  std::vector< std::pair< std::string,tensorflow::Tensor > > *arg3 = 0 ;
  std::vector< std::string > *arg4 = 0 ;
  std::vector< std::string > *arg5 = 0 ;
  std::vector< tensorflow::Tensor > *arg6 = (std::vector< tensorflow::Tensor > *) 0 ;
  RunMetadata *arg7 = (RunMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  Status result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_Run" "', argument " "1"" of type '" "tensorflow::Session *""'"); 
  }
  arg1 = (tensorflow::Session *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RunOptions,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_Run" "', argument " "2"" of type '" "RunOptions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Run" "', argument " "2"" of type '" "RunOptions const &""'"); 
  }
  arg2 = (RunOptions *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__vectorT_std__pairT_std__string_tensorflow__Tensor_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Session_Run" "', argument " "3"" of type '" "std::vector< std::pair< std::string,tensorflow::Tensor > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Run" "', argument " "3"" of type '" "std::vector< std::pair< std::string,tensorflow::Tensor > > const &""'"); 
  }
  arg3 = (std::vector< std::pair< std::string,tensorflow::Tensor > > *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Session_Run" "', argument " "4"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Run" "', argument " "4"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg4 = (std::vector< std::string > *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Session_Run" "', argument " "5"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_Run" "', argument " "5"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg5 = (std::vector< std::string > *)(argp5);
  res6 = SWIG_ConvertPtr(args[4], &argp6,SWIGTYPE_p_std__vectorT_tensorflow__Tensor_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Session_Run" "', argument " "6"" of type '" "std::vector< tensorflow::Tensor > *""'"); 
  }
  arg6 = (std::vector< tensorflow::Tensor > *)(argp6);
  res7 = SWIG_ConvertPtr(args[5], &argp7,SWIGTYPE_p_RunMetadata, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Session_Run" "', argument " "7"" of type '" "RunMetadata *""'"); 
  }
  arg7 = (RunMetadata *)(argp7);
  result = (arg1)->Run((RunOptions const &)*arg2,(std::vector< std::pair< std::string,tensorflow::Tensor > > const &)*arg3,(std::vector< std::string > const &)*arg4,(std::vector< std::string > const &)*arg5,arg6,arg7);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session__wrap_Session_Run(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Session_Run__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Session_Run__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Session_Run__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Session_Run__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function Run.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session_PRunSetup(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Session *arg1 = (tensorflow::Session *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::vector< std::string > *arg4 = 0 ;
  string *arg5 = (string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Session_PRunSetup (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_PRunSetup" "', argument " "1"" of type '" "tensorflow::Session *""'"); 
  }
  arg1 = (tensorflow::Session *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_PRunSetup" "', argument " "2"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_PRunSetup" "', argument " "2"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg2 = (std::vector< std::string > *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Session_PRunSetup" "', argument " "3"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_PRunSetup" "', argument " "3"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg3 = (std::vector< std::string > *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Session_PRunSetup" "', argument " "4"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_PRunSetup" "', argument " "4"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg4 = (std::vector< std::string > *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Session_PRunSetup" "', argument " "5"" of type '" "string *""'"); 
  }
  arg5 = (string *)(argp5);
  result = (arg1)->PRunSetup((std::vector< std::string > const &)*arg2,(std::vector< std::string > const &)*arg3,(std::vector< std::string > const &)*arg4,arg5);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session_PRun(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Session *arg1 = (tensorflow::Session *) 0 ;
  string *arg2 = 0 ;
  std::vector< std::pair< std::string,tensorflow::Tensor > > *arg3 = 0 ;
  std::vector< std::string > *arg4 = 0 ;
  std::vector< tensorflow::Tensor > *arg5 = (std::vector< tensorflow::Tensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Session_PRun (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_PRun" "', argument " "1"" of type '" "tensorflow::Session *""'"); 
  }
  arg1 = (tensorflow::Session *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_PRun" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_PRun" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__vectorT_std__pairT_std__string_tensorflow__Tensor_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Session_PRun" "', argument " "3"" of type '" "std::vector< std::pair< std::string,tensorflow::Tensor > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_PRun" "', argument " "3"" of type '" "std::vector< std::pair< std::string,tensorflow::Tensor > > const &""'"); 
  }
  arg3 = (std::vector< std::pair< std::string,tensorflow::Tensor > > *)(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Session_PRun" "', argument " "4"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_PRun" "', argument " "4"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg4 = (std::vector< std::string > *)(argp4);
  res5 = SWIG_ConvertPtr(args[3], &argp5,SWIGTYPE_p_std__vectorT_tensorflow__Tensor_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Session_PRun" "', argument " "5"" of type '" "std::vector< tensorflow::Tensor > *""'"); 
  }
  arg5 = (std::vector< tensorflow::Tensor > *)(argp5);
  result = (arg1)->PRun((string const &)*arg2,(std::vector< std::pair< std::string,tensorflow::Tensor > > const &)*arg3,(std::vector< std::string > const &)*arg4,arg5);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session_Close__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Session *arg1 = (tensorflow::Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Status result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_Close" "', argument " "1"" of type '" "tensorflow::Session *""'"); 
  }
  arg1 = (tensorflow::Session *)(argp1);
  result = (arg1)->Close();
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Session__wrap_Session_Close(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Session_Close__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Session_Close__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Session_Close__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Session_Close__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function Close.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_Session(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Session can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NewSession__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  SessionOptions *arg1 = 0 ;
  tensorflow::Session **arg2 = (tensorflow::Session **) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Status result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__SessionOptions,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewSession" "', argument " "1"" of type '" "SessionOptions const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewSession" "', argument " "1"" of type '" "SessionOptions const &""'"); 
  }
  arg1 = (SessionOptions *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NewSession" "', argument " "2"" of type '" "tensorflow::Session **""'"); 
  }
  arg2 = (tensorflow::Session **)(argp2);
  result = tensorflow::NewSession((tensorflow::SessionOptions const &)*arg1,arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reset(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  SessionOptions *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reset (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__SessionOptions,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reset" "', argument " "1"" of type '" "SessionOptions const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reset" "', argument " "1"" of type '" "SessionOptions const &""'"); 
  }
  arg1 = (SessionOptions *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Reset" "', argument " "2"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Reset" "', argument " "2"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg2 = (std::vector< std::string > *)(argp2);
  result = tensorflow::Reset((tensorflow::SessionOptions const &)*arg1,(std::vector< std::string > const &)*arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NewSession__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  SessionOptions *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::Session *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__SessionOptions,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewSession" "', argument " "1"" of type '" "SessionOptions const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NewSession" "', argument " "1"" of type '" "SessionOptions const &""'"); 
  }
  arg1 = (SessionOptions *)(argp1);
  result = (tensorflow::Session *)tensorflow::NewSession((tensorflow::SessionOptions const &)*arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow__wrap_NewSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NewSession__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NewSession__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NewSession__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NewSession__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function NewSession.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_SessionOptions_env_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  tensorflow::SessionOptions *arg1 = (tensorflow::SessionOptions *) 0 ;
  tensorflow::Env *arg2 = (tensorflow::Env *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_tensorflow__SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionOptions_env_set" "', argument " "1"" of type '" "tensorflow::SessionOptions *""'"); 
  }
  arg1 = (tensorflow::SessionOptions *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tensorflow__Env, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SessionOptions_env_set" "', argument " "2"" of type '" "tensorflow::Env *""'"); 
  }
  arg2 = (tensorflow::Env *)(argp2);
  if (arg1) (arg1)->env = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_SessionOptions_env_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SessionOptions *arg1 = (tensorflow::SessionOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Env *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_tensorflow__SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionOptions_env_get" "', argument " "1"" of type '" "tensorflow::SessionOptions *""'"); 
  }
  arg1 = (tensorflow::SessionOptions *)(argp1);
  result = (tensorflow::Env *) ((arg1)->env);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Env, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_SessionOptions_target_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  tensorflow::SessionOptions *arg1 = (tensorflow::SessionOptions *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_tensorflow__SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionOptions_target_set" "', argument " "1"" of type '" "tensorflow::SessionOptions *""'"); 
  }
  arg1 = (tensorflow::SessionOptions *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_std__string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SessionOptions_target_set" "', argument " "2"" of type '" "string""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SessionOptions_target_set" "', argument " "2"" of type '" "string""'");
    } else {
      arg2 = *((string *)(argp2));
    }
  }
  if (arg1) (arg1)->target = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_SessionOptions_target_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SessionOptions *arg1 = (tensorflow::SessionOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_tensorflow__SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionOptions_target_get" "', argument " "1"" of type '" "tensorflow::SessionOptions *""'"); 
  }
  arg1 = (tensorflow::SessionOptions *)(argp1);
  result =  ((arg1)->target);
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_SessionOptions_config_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  tensorflow::SessionOptions *arg1 = (tensorflow::SessionOptions *) 0 ;
  ConfigProto arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_tensorflow__SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionOptions_config_set" "', argument " "1"" of type '" "tensorflow::SessionOptions *""'"); 
  }
  arg1 = (tensorflow::SessionOptions *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_ConfigProto,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SessionOptions_config_set" "', argument " "2"" of type '" "ConfigProto""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SessionOptions_config_set" "', argument " "2"" of type '" "ConfigProto""'");
    } else {
      arg2 = *((ConfigProto *)(argp2));
    }
  }
  if (arg1) (arg1)->config = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_SessionOptions_config_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::SessionOptions *arg1 = (tensorflow::SessionOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ConfigProto result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_tensorflow__SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionOptions_config_get" "', argument " "1"" of type '" "tensorflow::SessionOptions *""'"); 
  }
  arg1 = (tensorflow::SessionOptions *)(argp1);
  result =  ((arg1)->config);
  jsresult = SWIG_NewPointerObj((new ConfigProto((const ConfigProto&)(result))), SWIGTYPE_p_ConfigProto, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_SessionOptions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::SessionOptions *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SessionOptions (should be 0)");
  result = (tensorflow::SessionOptions *)new tensorflow::SessionOptions();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__SessionOptions, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_SessionOptions(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_SessionOptions(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_SessionOptions(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_SessionOptions(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::SessionOptions * arg1 = (tensorflow::SessionOptions *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Tensor__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::Tensor *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Tensor__SWIG_0 (should be 0)");
  result = (tensorflow::Tensor *)new tensorflow::Tensor();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__Tensor, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Tensor__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::DataType arg1 ;
  TensorShape *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  tensorflow::Tensor *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Tensor__SWIG_1 (should be 2)");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Tensor" "', argument " "1"" of type '" "tensorflow::DataType""'");
  } 
  arg1 = (tensorflow::DataType)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Tensor" "', argument " "2"" of type '" "TensorShape const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tensor" "', argument " "2"" of type '" "TensorShape const &""'"); 
  }
  arg2 = (TensorShape *)(argp2);
  result = (tensorflow::Tensor *)new tensorflow::Tensor(arg1,(TensorShape const &)*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__Tensor, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Tensor__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Allocator *arg1 = (Allocator *) 0 ;
  tensorflow::DataType arg2 ;
  TensorShape *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  tensorflow::Tensor *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Tensor__SWIG_2 (should be 3)");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Tensor" "', argument " "1"" of type '" "Allocator *""'"); 
  }
  arg1 = (Allocator *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Tensor" "', argument " "2"" of type '" "tensorflow::DataType""'");
  } 
  arg2 = (tensorflow::DataType)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Tensor" "', argument " "3"" of type '" "TensorShape const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tensor" "', argument " "3"" of type '" "TensorShape const &""'"); 
  }
  arg3 = (TensorShape *)(argp3);
  result = (tensorflow::Tensor *)new tensorflow::Tensor(arg1,arg2,(TensorShape const &)*arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__Tensor, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Tensor__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Allocator *arg1 = (Allocator *) 0 ;
  tensorflow::DataType arg2 ;
  TensorShape *arg3 = 0 ;
  AllocationAttributes *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  tensorflow::Tensor *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Tensor__SWIG_3 (should be 4)");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Tensor" "', argument " "1"" of type '" "Allocator *""'"); 
  }
  arg1 = (Allocator *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Tensor" "', argument " "2"" of type '" "tensorflow::DataType""'");
  } 
  arg2 = (tensorflow::DataType)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Tensor" "', argument " "3"" of type '" "TensorShape const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tensor" "', argument " "3"" of type '" "TensorShape const &""'"); 
  }
  arg3 = (TensorShape *)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_AllocationAttributes,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Tensor" "', argument " "4"" of type '" "AllocationAttributes const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tensor" "', argument " "4"" of type '" "AllocationAttributes const &""'"); 
  }
  arg4 = (AllocationAttributes *)(argp4);
  result = (tensorflow::Tensor *)new tensorflow::Tensor(arg1,arg2,(TensorShape const &)*arg3,(AllocationAttributes const &)*arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__Tensor, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Tensor__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::DataType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  tensorflow::Tensor *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Tensor__SWIG_4 (should be 1)");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Tensor" "', argument " "1"" of type '" "tensorflow::DataType""'");
  } 
  arg1 = (tensorflow::DataType)(val1);
  result = (tensorflow::Tensor *)new tensorflow::Tensor(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__Tensor, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Tensor__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::Tensor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::Tensor *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Tensor__SWIG_5 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__Tensor,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Tensor" "', argument " "1"" of type '" "tensorflow::Tensor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tensor" "', argument " "1"" of type '" "tensorflow::Tensor const &""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = (tensorflow::Tensor *)new tensorflow::Tensor((tensorflow::Tensor const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__Tensor, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Tensor__SWIG_6(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::Tensor *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Tensor *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Tensor__SWIG_6 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__Tensor,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Tensor" "', argument " "1"" of type '" "tensorflow::Tensor &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tensor" "', argument " "1"" of type '" "tensorflow::Tensor &&""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = (tensorflow::Tensor *)new tensorflow::Tensor((tensorflow::Tensor &&)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__Tensor, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Tensor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Tensor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Tensor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Tensor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Tensor__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Tensor__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Tensor__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Tensor__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Tensor__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Tensor__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Tensor__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Tensor__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Tensor__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Tensor__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Tensor");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Tensor(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Tensor(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Tensor(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Tensor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::Tensor * arg1 = (tensorflow::Tensor *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Tensor_dtype(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::DataType result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_dtype (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_dtype" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = (tensorflow::DataType)((tensorflow::Tensor const *)arg1)->dtype();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_shape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TensorShape *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_shape (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_shape" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = (TensorShape *) &((tensorflow::Tensor const *)arg1)->shape();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_dims(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_dims (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_dims" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = (int)((tensorflow::Tensor const *)arg1)->dims();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_dim_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int64 result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_dim_size (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_dim_size" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tensor_dim_size" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((tensorflow::Tensor const *)arg1)->dim_size(arg2);
  jsresult = SWIG_NewPointerObj((new int64((const int64&)(result))), SWIGTYPE_p_int64, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_NumElements(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_NumElements (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_NumElements" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = ((tensorflow::Tensor const *)arg1)->NumElements();
  jsresult = SWIG_NewPointerObj((new int64((const int64&)(result))), SWIGTYPE_p_int64, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_IsSameSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  tensorflow::Tensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_IsSameSize (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_IsSameSize" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__Tensor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tensor_IsSameSize" "', argument " "2"" of type '" "tensorflow::Tensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tensor_IsSameSize" "', argument " "2"" of type '" "tensorflow::Tensor const &""'"); 
  }
  arg2 = (tensorflow::Tensor *)(argp2);
  result = (bool)((tensorflow::Tensor const *)arg1)->IsSameSize((tensorflow::Tensor const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_SharesBufferWith(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  tensorflow::Tensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_SharesBufferWith (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_SharesBufferWith" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__Tensor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tensor_SharesBufferWith" "', argument " "2"" of type '" "tensorflow::Tensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tensor_SharesBufferWith" "', argument " "2"" of type '" "tensorflow::Tensor const &""'"); 
  }
  arg2 = (tensorflow::Tensor *)(argp2);
  result = (bool)((tensorflow::Tensor const *)arg1)->SharesBufferWith((tensorflow::Tensor const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_IsInitialized(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_IsInitialized (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_IsInitialized" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = (bool)((tensorflow::Tensor const *)arg1)->IsInitialized();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_TotalBytes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_TotalBytes (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_TotalBytes" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = ((tensorflow::Tensor const *)arg1)->TotalBytes();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_IsAligned(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_IsAligned (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_IsAligned" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = (bool)((tensorflow::Tensor const *)arg1)->IsAligned();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_CopyFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  tensorflow::Tensor *arg2 = 0 ;
  TensorShape *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_CopyFrom (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_CopyFrom" "', argument " "1"" of type '" "tensorflow::Tensor *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__Tensor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tensor_CopyFrom" "', argument " "2"" of type '" "tensorflow::Tensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tensor_CopyFrom" "', argument " "2"" of type '" "tensorflow::Tensor const &""'"); 
  }
  arg2 = (tensorflow::Tensor *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tensor_CopyFrom" "', argument " "3"" of type '" "TensorShape const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tensor_CopyFrom" "', argument " "3"" of type '" "TensorShape const &""'"); 
  }
  arg3 = (TensorShape *)(argp3);
  result = (bool)(arg1)->CopyFrom((tensorflow::Tensor const &)*arg2,(TensorShape const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_Slice(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  int64 arg2 ;
  int64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  tensorflow::Tensor result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_Slice (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_Slice" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tensor_Slice" "', argument " "2"" of type '" "int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tensor_Slice" "', argument " "2"" of type '" "int64""'");
    } else {
      arg2 = *((int64 *)(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tensor_Slice" "', argument " "3"" of type '" "int64""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tensor_Slice" "', argument " "3"" of type '" "int64""'");
    } else {
      arg3 = *((int64 *)(argp3));
    }
  }
  result = ((tensorflow::Tensor const *)arg1)->Slice(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new tensorflow::Tensor((const tensorflow::Tensor&)(result))), SWIGTYPE_p_tensorflow__Tensor, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_FromProto__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  tensorflow::TensorProto *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_FromProto" "', argument " "1"" of type '" "tensorflow::Tensor *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__TensorProto,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tensor_FromProto" "', argument " "2"" of type '" "tensorflow::TensorProto const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tensor_FromProto" "', argument " "2"" of type '" "tensorflow::TensorProto const &""'"); 
  }
  arg2 = (tensorflow::TensorProto *)(argp2);
  result = (bool)(arg1)->FromProto((tensorflow::TensorProto const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_FromProto__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  Allocator *arg2 = (Allocator *) 0 ;
  tensorflow::TensorProto *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_FromProto" "', argument " "1"" of type '" "tensorflow::Tensor *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_Allocator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tensor_FromProto" "', argument " "2"" of type '" "Allocator *""'"); 
  }
  arg2 = (Allocator *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_tensorflow__TensorProto,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tensor_FromProto" "', argument " "3"" of type '" "tensorflow::TensorProto const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tensor_FromProto" "', argument " "3"" of type '" "tensorflow::TensorProto const &""'"); 
  }
  arg3 = (tensorflow::TensorProto *)(argp3);
  result = (bool)(arg1)->FromProto(arg2,(tensorflow::TensorProto const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor__wrap_Tensor_FromProto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Tensor_FromProto__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Tensor_FromProto__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Tensor_FromProto__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Tensor_FromProto__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function FromProto.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_AsProtoField(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  tensorflow::TensorProto *arg2 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_AsProtoField (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_AsProtoField" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tensor_AsProtoField" "', argument " "2"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg2 = (tensorflow::TensorProto *)(argp2);
  ((tensorflow::Tensor const *)arg1)->AsProtoField(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_AsProtoTensorContent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  tensorflow::TensorProto *arg2 = (tensorflow::TensorProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_AsProtoTensorContent (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_AsProtoTensorContent" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__TensorProto, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tensor_AsProtoTensorContent" "', argument " "2"" of type '" "tensorflow::TensorProto *""'"); 
  }
  arg2 = (tensorflow::TensorProto *)(argp2);
  ((tensorflow::Tensor const *)arg1)->AsProtoTensorContent(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_SummarizeValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_SummarizeValue (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_SummarizeValue" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tensor_SummarizeValue" "', argument " "2"" of type '" "int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tensor_SummarizeValue" "', argument " "2"" of type '" "int64""'");
    } else {
      arg2 = *((int64 *)(argp2));
    }
  }
  result = ((tensorflow::Tensor const *)arg1)->SummarizeValue(arg2);
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_DebugString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_DebugString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_DebugString" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = ((tensorflow::Tensor const *)arg1)->DebugString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_FillDescription(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  TensorDescription *arg2 = (TensorDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_FillDescription (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_FillDescription" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_TensorDescription, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tensor_FillDescription" "', argument " "2"" of type '" "TensorDescription *""'"); 
  }
  arg2 = (TensorDescription *)(argp2);
  ((tensorflow::Tensor const *)arg1)->FillDescription(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_tensor_data(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::StringPiece result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_tensor_data (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_tensor_data" "', argument " "1"" of type '" "tensorflow::Tensor const *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = ((tensorflow::Tensor const *)arg1)->tensor_data();
  jsresult = SWIG_NewPointerObj((new tensorflow::StringPiece((const tensorflow::StringPiece&)(result))), SWIGTYPE_p_tensorflow__StringPiece, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Tensor_UnsafeCopyFromInternal(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = (tensorflow::Tensor *) 0 ;
  tensorflow::Tensor *arg2 = 0 ;
  tensorflow::DataType arg3 ;
  TensorShape *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Tensor_UnsafeCopyFromInternal (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tensor_UnsafeCopyFromInternal" "', argument " "1"" of type '" "tensorflow::Tensor *""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__Tensor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tensor_UnsafeCopyFromInternal" "', argument " "2"" of type '" "tensorflow::Tensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tensor_UnsafeCopyFromInternal" "', argument " "2"" of type '" "tensorflow::Tensor const &""'"); 
  }
  arg2 = (tensorflow::Tensor *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Tensor_UnsafeCopyFromInternal" "', argument " "3"" of type '" "tensorflow::DataType""'");
  } 
  arg3 = (tensorflow::DataType)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Tensor_UnsafeCopyFromInternal" "', argument " "4"" of type '" "TensorShape const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tensor_UnsafeCopyFromInternal" "', argument " "4"" of type '" "TensorShape const &""'"); 
  }
  arg4 = (TensorShape *)(argp4);
  (arg1)->UnsafeCopyFromInternal((tensorflow::Tensor const &)*arg2,arg3,(TensorShape const &)*arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TensorBuffer(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TensorBuffer(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TensorBuffer(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TensorBuffer(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::TensorBuffer * arg1 = (tensorflow::TensorBuffer *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_TensorBuffer_data(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorBuffer *arg1 = (tensorflow::TensorBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorBuffer_data (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBuffer_data" "', argument " "1"" of type '" "tensorflow::TensorBuffer const *""'"); 
  }
  arg1 = (tensorflow::TensorBuffer *)(argp1);
  result = (void *)((tensorflow::TensorBuffer const *)arg1)->data();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorBuffer_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorBuffer *arg1 = (tensorflow::TensorBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorBuffer_size (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBuffer_size" "', argument " "1"" of type '" "tensorflow::TensorBuffer const *""'"); 
  }
  arg1 = (tensorflow::TensorBuffer *)(argp1);
  result = ((tensorflow::TensorBuffer const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorBuffer_root_buffer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorBuffer *arg1 = (tensorflow::TensorBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::TensorBuffer *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorBuffer_root_buffer (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBuffer_root_buffer" "', argument " "1"" of type '" "tensorflow::TensorBuffer *""'"); 
  }
  arg1 = (tensorflow::TensorBuffer *)(argp1);
  result = (tensorflow::TensorBuffer *)(arg1)->root_buffer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorBuffer, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorBuffer_FillAllocationDescription(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorBuffer *arg1 = (tensorflow::TensorBuffer *) 0 ;
  AllocationDescription *arg2 = (AllocationDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorBuffer_FillAllocationDescription (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorBuffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorBuffer_FillAllocationDescription" "', argument " "1"" of type '" "tensorflow::TensorBuffer const *""'"); 
  }
  arg1 = (tensorflow::TensorBuffer *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_AllocationDescription, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorBuffer_FillAllocationDescription" "', argument " "2"" of type '" "AllocationDescription *""'"); 
  }
  arg2 = (AllocationDescription *)(argp2);
  ((tensorflow::TensorBuffer const *)arg1)->FillAllocationDescription(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_TensorBuffer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class TensorBuffer can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TensorShape__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  gtl::ArraySlice< int64 > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::TensorShape *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TensorShape__SWIG_0 (should be 1)");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gtl__ArraySliceT_int64_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TensorShape" "', argument " "1"" of type '" "gtl::ArraySlice< int64 >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TensorShape" "', argument " "1"" of type '" "gtl::ArraySlice< int64 >""'");
    } else {
      arg1 = *((gtl::ArraySlice< int64 > *)(argp1));
    }
  }
  result = (tensorflow::TensorShape *)new tensorflow::TensorShape(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__TensorShape, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TensorShape__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  SwigValueWrapper< std::initializer_list< int64 > > arg1 ;
  tensorflow::TensorShape *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TensorShape__SWIG_1 (should be 1)");
  
  result = (tensorflow::TensorShape *)new tensorflow::TensorShape(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__TensorShape, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TensorShape__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TensorShapeProto *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::TensorShape *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TensorShape__SWIG_2 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_TensorShapeProto,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TensorShape" "', argument " "1"" of type '" "TensorShapeProto const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TensorShape" "', argument " "1"" of type '" "TensorShapeProto const &""'"); 
  }
  arg1 = (TensorShapeProto *)(argp1);
  result = (tensorflow::TensorShape *)new tensorflow::TensorShape((TensorShapeProto const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__TensorShape, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TensorShape__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::TensorShape *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TensorShape__SWIG_3 (should be 0)");
  result = (tensorflow::TensorShape *)new tensorflow::TensorShape();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__TensorShape, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TensorShape(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TensorShape(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TensorShape(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TensorShape(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::TensorShape * arg1 = (tensorflow::TensorShape *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_TensorShape__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::TensorShape *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::TensorShape *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TensorShape__SWIG_4 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TensorShape" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TensorShape" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = (tensorflow::TensorShape *)new tensorflow::TensorShape((tensorflow::TensorShape const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__TensorShape, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TensorShape__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::TensorShape *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::TensorShape *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TensorShape__SWIG_5 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TensorShape" "', argument " "1"" of type '" "tensorflow::TensorShape &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TensorShape" "', argument " "1"" of type '" "tensorflow::TensorShape &&""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = (tensorflow::TensorShape *)new tensorflow::TensorShape((tensorflow::TensorShape &&)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__TensorShape, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TensorShape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TensorShape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TensorShape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TensorShape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TensorShape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TensorShape__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TensorShape__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TensorShape__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TensorShape__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TensorShape__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TensorShape__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TensorShape__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TensorShape__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_TensorShape");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_IsValid(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TensorShapeProto *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_IsValid (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_TensorShapeProto,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_IsValid" "', argument " "1"" of type '" "TensorShapeProto const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShape_IsValid" "', argument " "1"" of type '" "TensorShapeProto const &""'"); 
  }
  arg1 = (TensorShapeProto *)(argp1);
  result = (bool)tensorflow::TensorShape::IsValid((TensorShapeProto const &)*arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_IsValidShape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TensorShapeProto *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_IsValidShape (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_TensorShapeProto,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_IsValidShape" "', argument " "1"" of type '" "TensorShapeProto const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShape_IsValidShape" "', argument " "1"" of type '" "TensorShapeProto const &""'"); 
  }
  arg1 = (TensorShapeProto *)(argp1);
  result = tensorflow::TensorShape::IsValidShape((TensorShapeProto const &)*arg1);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_Clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_Clear (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_Clear" "', argument " "1"" of type '" "tensorflow::TensorShape *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  (arg1)->Clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_AddDim(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_AddDim (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_AddDim" "', argument " "1"" of type '" "tensorflow::TensorShape *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorShape_AddDim" "', argument " "2"" of type '" "int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShape_AddDim" "', argument " "2"" of type '" "int64""'");
    } else {
      arg2 = *((int64 *)(argp2));
    }
  }
  (arg1)->AddDim(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_AppendShape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  tensorflow::TensorShape *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_AppendShape (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_AppendShape" "', argument " "1"" of type '" "tensorflow::TensorShape *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorShape_AppendShape" "', argument " "2"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShape_AppendShape" "', argument " "2"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg2 = (tensorflow::TensorShape *)(argp2);
  (arg1)->AppendShape((tensorflow::TensorShape const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_MaxDimensions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != -1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_MaxDimensions.");
  
  result = (int)tensorflow::TensorShape::MaxDimensions();
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_InsertDim(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  int arg2 ;
  int64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_InsertDim (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_InsertDim" "', argument " "1"" of type '" "tensorflow::TensorShape *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorShape_InsertDim" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TensorShape_InsertDim" "', argument " "3"" of type '" "int64""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShape_InsertDim" "', argument " "3"" of type '" "int64""'");
    } else {
      arg3 = *((int64 *)(argp3));
    }
  }
  (arg1)->InsertDim(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_set_dim(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  int arg2 ;
  int64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_set_dim (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_set_dim" "', argument " "1"" of type '" "tensorflow::TensorShape *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorShape_set_dim" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TensorShape_set_dim" "', argument " "3"" of type '" "int64""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShape_set_dim" "', argument " "3"" of type '" "int64""'");
    } else {
      arg3 = *((int64 *)(argp3));
    }
  }
  (arg1)->set_dim(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_RemoveDim(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_RemoveDim (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_RemoveDim" "', argument " "1"" of type '" "tensorflow::TensorShape *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorShape_RemoveDim" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  (arg1)->RemoveDim(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_dims(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_dims (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_dims" "', argument " "1"" of type '" "tensorflow::TensorShape const *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = (int)((tensorflow::TensorShape const *)arg1)->dims();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_dim_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int64 result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_dim_size (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_dim_size" "', argument " "1"" of type '" "tensorflow::TensorShape const *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TensorShape_dim_size" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = ((tensorflow::TensorShape const *)arg1)->dim_size(arg2);
  jsresult = SWIG_NewPointerObj((new int64((const int64&)(result))), SWIGTYPE_p_int64, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_dim_sizes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gtl::InlinedVector< int64,4 > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_dim_sizes (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_dim_sizes" "', argument " "1"" of type '" "tensorflow::TensorShape const *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = ((tensorflow::TensorShape const *)arg1)->dim_sizes();
  jsresult = SWIG_NewPointerObj((new gtl::InlinedVector< int64,4 >((const gtl::InlinedVector< int64,4 >&)(result))), SWIGTYPE_p_gtl__InlinedVectorT_int64_4_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_num_elements(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_num_elements (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_num_elements" "', argument " "1"" of type '" "tensorflow::TensorShape const *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = ((tensorflow::TensorShape const *)arg1)->num_elements();
  jsresult = SWIG_NewPointerObj((new int64((const int64&)(result))), SWIGTYPE_p_int64, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_IsSameSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  tensorflow::TensorShape *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_IsSameSize (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_IsSameSize" "', argument " "1"" of type '" "tensorflow::TensorShape const *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorShape_IsSameSize" "', argument " "2"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShape_IsSameSize" "', argument " "2"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg2 = (tensorflow::TensorShape *)(argp2);
  result = (bool)((tensorflow::TensorShape const *)arg1)->IsSameSize((tensorflow::TensorShape const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_AsProto(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  TensorShapeProto *arg2 = (TensorShapeProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_AsProto (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_AsProto" "', argument " "1"" of type '" "tensorflow::TensorShape const *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_TensorShapeProto, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorShape_AsProto" "', argument " "2"" of type '" "TensorShapeProto *""'"); 
  }
  arg2 = (TensorShapeProto *)(argp2);
  ((tensorflow::TensorShape const *)arg1)->AsProto(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_begin(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< tensorflow::TensorShapeIter > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_begin (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_begin" "', argument " "1"" of type '" "tensorflow::TensorShape const *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = ((tensorflow::TensorShape const *)arg1)->begin();
  jsresult = SWIG_NewPointerObj((new tensorflow::TensorShapeIter((const tensorflow::TensorShapeIter&)(result))), SWIGTYPE_p_tensorflow__TensorShapeIter, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_end(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< tensorflow::TensorShapeIter > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_end (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_end" "', argument " "1"" of type '" "tensorflow::TensorShape const *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = ((tensorflow::TensorShape const *)arg1)->end();
  jsresult = SWIG_NewPointerObj((new tensorflow::TensorShapeIter((const tensorflow::TensorShapeIter&)(result))), SWIGTYPE_p_tensorflow__TensorShapeIter, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_DebugString__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_DebugString" "', argument " "1"" of type '" "tensorflow::TensorShape const *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = ((tensorflow::TensorShape const *)arg1)->DebugString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_DebugString__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TensorShapeProto *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  string result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_TensorShapeProto,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_DebugString" "', argument " "1"" of type '" "TensorShapeProto const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShape_DebugString" "', argument " "1"" of type '" "TensorShapeProto const &""'"); 
  }
  arg1 = (TensorShapeProto *)(argp1);
  result = tensorflow::TensorShape::DebugString((TensorShapeProto const &)*arg1);
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape__wrap_TensorShape_DebugString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorShape_DebugString__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorShape_DebugString__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorShape_DebugString__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorShape_DebugString__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function DebugString.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShape_DumpRep(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShape_DumpRep (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShape_DumpRep" "', argument " "1"" of type '" "tensorflow::TensorShape const *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  ((tensorflow::TensorShape const *)arg1)->DumpRep();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TensorShapeDim(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int64 arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::TensorShapeDim *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TensorShapeDim (should be 1)");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TensorShapeDim" "', argument " "1"" of type '" "int64""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TensorShapeDim" "', argument " "1"" of type '" "int64""'");
    } else {
      arg1 = *((int64 *)(argp1));
    }
  }
  result = (tensorflow::TensorShapeDim *)new tensorflow::TensorShapeDim(arg1);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__TensorShapeDim, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_TensorShapeDim_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  tensorflow::TensorShapeDim *arg1 = (tensorflow::TensorShapeDim *) 0 ;
  int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShapeDim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeDim_size_set" "', argument " "1"" of type '" "tensorflow::TensorShapeDim *""'"); 
  }
  arg1 = (tensorflow::TensorShapeDim *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorShapeDim_size_set" "', argument " "2"" of type '" "int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeDim_size_set" "', argument " "2"" of type '" "int64""'");
    } else {
      arg2 = *((int64 *)(argp2));
    }
  }
  if (arg1) (arg1)->size = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TensorShapeDim_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShapeDim *arg1 = (tensorflow::TensorShapeDim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int64 result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShapeDim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeDim_size_get" "', argument " "1"" of type '" "tensorflow::TensorShapeDim *""'"); 
  }
  arg1 = (tensorflow::TensorShapeDim *)(argp1);
  result =  ((arg1)->size);
  jsresult = SWIG_NewPointerObj((new int64((const int64&)(result))), SWIGTYPE_p_int64, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TensorShapeDim(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TensorShapeDim(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TensorShapeDim(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TensorShapeDim(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::TensorShapeDim * arg1 = (tensorflow::TensorShapeDim *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_TensorShapeIter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::TensorShape *arg1 = (tensorflow::TensorShape *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tensorflow::TensorShapeIter *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TensorShapeIter (should be 2)");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TensorShapeIter" "', argument " "1"" of type '" "tensorflow::TensorShape const *""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TensorShapeIter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (tensorflow::TensorShapeIter *)new tensorflow::TensorShapeIter((tensorflow::TensorShape const *)arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__TensorShapeIter, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeIter___ref__(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShapeIter *arg1 = (tensorflow::TensorShapeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< tensorflow::TensorShapeDim > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShapeIter___ref__ (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__TensorShapeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeIter___ref__" "', argument " "1"" of type '" "tensorflow::TensorShapeIter *""'"); 
  }
  arg1 = (tensorflow::TensorShapeIter *)(argp1);
  result = (arg1)->operator *();
  jsresult = SWIG_NewPointerObj((new tensorflow::TensorShapeDim((const tensorflow::TensorShapeDim&)(result))), SWIGTYPE_p_tensorflow__TensorShapeDim, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TensorShapeIter(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TensorShapeIter(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TensorShapeIter(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TensorShapeIter(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::TensorShapeIter * arg1 = (tensorflow::TensorShapeIter *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_TensorShapeUtils_IsScalar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShapeUtils_IsScalar (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_IsScalar" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_IsScalar" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = (bool)tensorflow::TensorShapeUtils::IsScalar((tensorflow::TensorShape const &)*arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils_IsVector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShapeUtils_IsVector (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_IsVector" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_IsVector" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = (bool)tensorflow::TensorShapeUtils::IsVector((tensorflow::TensorShape const &)*arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils_IsVectorOrHigher(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShapeUtils_IsVectorOrHigher (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_IsVectorOrHigher" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_IsVectorOrHigher" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = (bool)tensorflow::TensorShapeUtils::IsVectorOrHigher((tensorflow::TensorShape const &)*arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils_IsMatrix(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShapeUtils_IsMatrix (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_IsMatrix" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_IsMatrix" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = (bool)tensorflow::TensorShapeUtils::IsMatrix((tensorflow::TensorShape const &)*arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils_IsSquareMatrix(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShapeUtils_IsSquareMatrix (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_IsSquareMatrix" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_IsSquareMatrix" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = (bool)tensorflow::TensorShapeUtils::IsSquareMatrix((tensorflow::TensorShape const &)*arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils_IsMatrixOrHigher(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShapeUtils_IsMatrixOrHigher (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_IsMatrixOrHigher" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_IsMatrixOrHigher" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  result = (bool)tensorflow::TensorShapeUtils::IsMatrixOrHigher((tensorflow::TensorShape const &)*arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils_MakeShape__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int32 *arg1 = (int32 *) 0 ;
  int64 arg2 ;
  tensorflow::TensorShape *arg3 = (tensorflow::TensorShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_int32, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_MakeShape" "', argument " "1"" of type '" "int32 const *""'"); 
  }
  arg1 = (int32 *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorShapeUtils_MakeShape" "', argument " "2"" of type '" "int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_MakeShape" "', argument " "2"" of type '" "int64""'");
    } else {
      arg2 = *((int64 *)(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TensorShapeUtils_MakeShape" "', argument " "3"" of type '" "tensorflow::TensorShape *""'"); 
  }
  arg3 = (tensorflow::TensorShape *)(argp3);
  result = tensorflow::TensorShapeUtils::MakeShape((int32 const *)arg1,arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils_MakeShape__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int64 *arg1 = (int64 *) 0 ;
  int64 arg2 ;
  tensorflow::TensorShape *arg3 = (tensorflow::TensorShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_int64, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_MakeShape" "', argument " "1"" of type '" "int64 const *""'"); 
  }
  arg1 = (int64 *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorShapeUtils_MakeShape" "', argument " "2"" of type '" "int64""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_MakeShape" "', argument " "2"" of type '" "int64""'");
    } else {
      arg2 = *((int64 *)(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TensorShapeUtils_MakeShape" "', argument " "3"" of type '" "tensorflow::TensorShape *""'"); 
  }
  arg3 = (tensorflow::TensorShape *)(argp3);
  result = tensorflow::TensorShapeUtils::MakeShape((int64 const *)arg1,arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils_MakeShape__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gtl::ArraySlice< int32 > arg1 ;
  tensorflow::TensorShape *arg2 = (tensorflow::TensorShape *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Status result;
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gtl__ArraySliceT_int32_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_MakeShape" "', argument " "1"" of type '" "gtl::ArraySlice< int32 >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_MakeShape" "', argument " "1"" of type '" "gtl::ArraySlice< int32 >""'");
    } else {
      arg1 = *((gtl::ArraySlice< int32 > *)(argp1));
    }
  }
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorShapeUtils_MakeShape" "', argument " "2"" of type '" "tensorflow::TensorShape *""'"); 
  }
  arg2 = (tensorflow::TensorShape *)(argp2);
  result = tensorflow::TensorShapeUtils::MakeShape(arg1,arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils_MakeShape__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gtl::ArraySlice< int64 > arg1 ;
  tensorflow::TensorShape *arg2 = (tensorflow::TensorShape *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Status result;
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gtl__ArraySliceT_int64_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_MakeShape" "', argument " "1"" of type '" "gtl::ArraySlice< int64 >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_MakeShape" "', argument " "1"" of type '" "gtl::ArraySlice< int64 >""'");
    } else {
      arg1 = *((gtl::ArraySlice< int64 > *)(argp1));
    }
  }
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorShapeUtils_MakeShape" "', argument " "2"" of type '" "tensorflow::TensorShape *""'"); 
  }
  arg2 = (tensorflow::TensorShape *)(argp2);
  result = tensorflow::TensorShapeUtils::MakeShape(arg1,arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils__wrap_TensorShapeUtils_MakeShape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorShapeUtils_MakeShape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorShapeUtils_MakeShape__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorShapeUtils_MakeShape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorShapeUtils_MakeShape__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorShapeUtils_MakeShape__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorShapeUtils_MakeShape__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TensorShapeUtils_MakeShape__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TensorShapeUtils_MakeShape__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function MakeShape.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils_ShapeListString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  gtl::ArraySlice< tensorflow::TensorShape > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShapeUtils_ShapeListString (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_gtl__ArraySliceT_tensorflow__TensorShape_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_ShapeListString" "', argument " "1"" of type '" "gtl::ArraySlice< tensorflow::TensorShape > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_ShapeListString" "', argument " "1"" of type '" "gtl::ArraySlice< tensorflow::TensorShape > const &""'"); 
  }
  arg1 = (gtl::ArraySlice< tensorflow::TensorShape > *)(argp1);
  result = tensorflow::TensorShapeUtils::ShapeListString((gtl::ArraySlice< tensorflow::TensorShape > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils_StartsWith(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = 0 ;
  tensorflow::TensorShape *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShapeUtils_StartsWith (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_StartsWith" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_StartsWith" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorShapeUtils_StartsWith" "', argument " "2"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_StartsWith" "', argument " "2"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg2 = (tensorflow::TensorShape *)(argp2);
  result = (bool)tensorflow::TensorShapeUtils::StartsWith((tensorflow::TensorShape const &)*arg1,(tensorflow::TensorShape const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorShapeUtils_EndsWith(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::TensorShape *arg1 = 0 ;
  tensorflow::TensorShape *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorShapeUtils_EndsWith (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorShapeUtils_EndsWith" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_EndsWith" "', argument " "1"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg1 = (tensorflow::TensorShape *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorShapeUtils_EndsWith" "', argument " "2"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorShapeUtils_EndsWith" "', argument " "2"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg2 = (tensorflow::TensorShape *)(argp2);
  result = (bool)tensorflow::TensorShapeUtils::EndsWith((tensorflow::TensorShape const &)*arg1,(tensorflow::TensorShape const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TensorShapeUtils(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::TensorShapeUtils *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TensorShapeUtils (should be 0)");
  result = (tensorflow::TensorShapeUtils *)new tensorflow::TensorShapeUtils();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__TensorShapeUtils, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TensorShapeUtils(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TensorShapeUtils(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TensorShapeUtils(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TensorShapeUtils(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::TensorShapeUtils * arg1 = (tensorflow::TensorShapeUtils *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_tensorflow_kCond_Timeout(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::kCond_Timeout));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_kCond_MaybeNotified(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::kCond_MaybeNotified));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_WaitForMilliseconds(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mutex_lock *arg1 = (mutex_lock *) 0 ;
  condition_variable *arg2 = (condition_variable *) 0 ;
  int64 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  tensorflow::ConditionResult result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_WaitForMilliseconds (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_mutex_lock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaitForMilliseconds" "', argument " "1"" of type '" "mutex_lock *""'"); 
  }
  arg1 = (mutex_lock *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_condition_variable, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WaitForMilliseconds" "', argument " "2"" of type '" "condition_variable *""'"); 
  }
  arg2 = (condition_variable *)(argp2);
  {
    res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_int64,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WaitForMilliseconds" "', argument " "3"" of type '" "int64""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WaitForMilliseconds" "', argument " "3"" of type '" "int64""'");
    } else {
      arg3 = *((int64 *)(argp3));
    }
  }
  result = (tensorflow::ConditionResult)tensorflow::WaitForMilliseconds(arg1,arg2,arg3);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_DebugString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_DebugString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_DebugString" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = ((tensorflow::Node const *)arg1)->DebugString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_id(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_id (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_id" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (int)((tensorflow::Node const *)arg1)->id();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_cost_id(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_cost_id (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_cost_id" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (int)((tensorflow::Node const *)arg1)->cost_id();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_name" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (string *) &((tensorflow::Node const *)arg1)->name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_type_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_type_string (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_type_string" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (string *) &((tensorflow::Node const *)arg1)->type_string();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::NodeDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_def" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (tensorflow::NodeDef *) &((tensorflow::Node const *)arg1)->def();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_op_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::OpDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_op_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_op_def" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (tensorflow::OpDef *) &((tensorflow::Node const *)arg1)->op_def();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_num_inputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_num_inputs (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_num_inputs" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (int)((tensorflow::Node const *)arg1)->num_inputs();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_input_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tensorflow::DataType result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_input_type (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_input_type" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_input_type" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (tensorflow::DataType)((tensorflow::Node const *)arg1)->input_type(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_input_types(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DataTypeVector *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_input_types (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_input_types" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (DataTypeVector *) &((tensorflow::Node const *)arg1)->input_types();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DataTypeVector, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_num_outputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_num_outputs (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_num_outputs" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (int)((tensorflow::Node const *)arg1)->num_outputs();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_output_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tensorflow::DataType result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_output_type (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_output_type" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_output_type" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (tensorflow::DataType)((tensorflow::Node const *)arg1)->output_type(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_output_types(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DataTypeVector *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_output_types (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_output_types" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (DataTypeVector *) &((tensorflow::Node const *)arg1)->output_types();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DataTypeVector, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_assigned_device_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_assigned_device_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_assigned_device_name" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = ((tensorflow::Node const *)arg1)->assigned_device_name();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_set_assigned_device_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_set_assigned_device_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_set_assigned_device_name" "', argument " "1"" of type '" "tensorflow::Node *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_set_assigned_device_name" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_set_assigned_device_name" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  (arg1)->set_assigned_device_name((string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_in_nodes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< tensorflow::gtl::iterator_range< tensorflow::NeighborIter > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_in_nodes (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_in_nodes" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = ((tensorflow::Node const *)arg1)->in_nodes();
  jsresult = SWIG_NewPointerObj((new tensorflow::gtl::iterator_range< tensorflow::NeighborIter >((const tensorflow::gtl::iterator_range< tensorflow::NeighborIter >&)(result))), SWIGTYPE_p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_out_nodes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< tensorflow::gtl::iterator_range< tensorflow::NeighborIter > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_out_nodes (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_out_nodes" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = ((tensorflow::Node const *)arg1)->out_nodes();
  jsresult = SWIG_NewPointerObj((new tensorflow::gtl::iterator_range< tensorflow::NeighborIter >((const tensorflow::gtl::iterator_range< tensorflow::NeighborIter >&)(result))), SWIGTYPE_p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_in_edges(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EdgeSet *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_in_edges (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_in_edges" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (EdgeSet *) &((tensorflow::Node const *)arg1)->in_edges();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EdgeSet, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_out_edges(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EdgeSet *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_out_edges (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_out_edges" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (EdgeSet *) &((tensorflow::Node const *)arg1)->out_edges();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EdgeSet, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsSource(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsSource (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsSource" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsSource();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsSink(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsSink (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsSink" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsSink();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsOp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsOp (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsOp" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsOp();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsSwitch(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsSwitch (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsSwitch" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsSwitch();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsMerge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsMerge (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsMerge" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsMerge();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsEnter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsEnter (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsEnter" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsEnter();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsExit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsExit (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsExit" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsExit();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsNextIteration(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsNextIteration (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsNextIteration" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsNextIteration();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsLoopCond(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsLoopCond (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsLoopCond" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsLoopCond();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsControlTrigger(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsControlTrigger (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsControlTrigger" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsControlTrigger();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsSend(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsSend (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsSend" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsSend();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsRecv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsRecv (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsRecv" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsRecv();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsConstant(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsConstant (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsConstant" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsConstant();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsVariable(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsVariable (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsVariable" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsVariable();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsIdentity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsIdentity (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsIdentity" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsIdentity();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsGetSessionHandle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsGetSessionHandle (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsGetSessionHandle" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsGetSessionHandle();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsGetSessionTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsGetSessionTensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsGetSessionTensor" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsGetSessionTensor();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsDeleteSessionTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsDeleteSessionTensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsDeleteSessionTensor" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsDeleteSessionTensor();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsControlFlow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsControlFlow (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsControlFlow" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsControlFlow();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsHostSend(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsHostSend (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsHostSend" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsHostSend();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_IsHostRecv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_IsHostRecv (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_IsHostRecv" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)((tensorflow::Node const *)arg1)->IsHostRecv();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_ClearAttr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_ClearAttr (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_ClearAttr" "', argument " "1"" of type '" "tensorflow::Node *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_ClearAttr" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_ClearAttr" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  (arg1)->ClearAttr((string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_input_edge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  int arg2 ;
  tensorflow::Edge **arg3 = (tensorflow::Edge **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_input_edge (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_input_edge" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_input_edge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_tensorflow__Edge, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Node_input_edge" "', argument " "3"" of type '" "tensorflow::Edge const **""'"); 
  }
  arg3 = (tensorflow::Edge **)(argp3);
  result = ((tensorflow::Node const *)arg1)->input_edge(arg2,(tensorflow::Edge const **)arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Node_input_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  int arg2 ;
  tensorflow::Node **arg3 = (tensorflow::Node **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Node_input_node (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_input_node" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_input_node" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Node_input_node" "', argument " "3"" of type '" "tensorflow::Node const **""'"); 
  }
  arg3 = (tensorflow::Node **)(argp3);
  result = ((tensorflow::Node const *)arg1)->input_node(arg2,(tensorflow::Node const **)arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_Node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Node can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Edge_src(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Edge *arg1 = (tensorflow::Edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Node *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Edge_src (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_src" "', argument " "1"" of type '" "tensorflow::Edge const *""'"); 
  }
  arg1 = (tensorflow::Edge *)(argp1);
  result = (tensorflow::Node *)((tensorflow::Edge const *)arg1)->src();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Edge_dst(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Edge *arg1 = (tensorflow::Edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Node *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Edge_dst (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_dst" "', argument " "1"" of type '" "tensorflow::Edge const *""'"); 
  }
  arg1 = (tensorflow::Edge *)(argp1);
  result = (tensorflow::Node *)((tensorflow::Edge const *)arg1)->dst();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Edge_id(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Edge *arg1 = (tensorflow::Edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Edge_id (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_id" "', argument " "1"" of type '" "tensorflow::Edge const *""'"); 
  }
  arg1 = (tensorflow::Edge *)(argp1);
  result = (int)((tensorflow::Edge const *)arg1)->id();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Edge_src_output(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Edge *arg1 = (tensorflow::Edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Edge_src_output (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_src_output" "', argument " "1"" of type '" "tensorflow::Edge const *""'"); 
  }
  arg1 = (tensorflow::Edge *)(argp1);
  result = (int)((tensorflow::Edge const *)arg1)->src_output();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Edge_dst_input(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Edge *arg1 = (tensorflow::Edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Edge_dst_input (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_dst_input" "', argument " "1"" of type '" "tensorflow::Edge const *""'"); 
  }
  arg1 = (tensorflow::Edge *)(argp1);
  result = (int)((tensorflow::Edge const *)arg1)->dst_input();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Edge_IsControlEdge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Edge *arg1 = (tensorflow::Edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Edge_IsControlEdge (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_IsControlEdge" "', argument " "1"" of type '" "tensorflow::Edge const *""'"); 
  }
  arg1 = (tensorflow::Edge *)(argp1);
  result = (bool)((tensorflow::Edge const *)arg1)->IsControlEdge();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Edge(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Edge(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Edge(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Edge(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::Edge * arg1 = (tensorflow::Edge *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_veto_Edge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Edge can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Graph(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  OpRegistryInterface *arg1 = (OpRegistryInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Graph *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Graph (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_OpRegistryInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Graph" "', argument " "1"" of type '" "OpRegistryInterface const *""'"); 
  }
  arg1 = (OpRegistryInterface *)(argp1);
  result = (tensorflow::Graph *)new tensorflow::Graph((OpRegistryInterface const *)arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__Graph, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Graph(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Graph(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Graph(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Graph(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::Graph * arg1 = (tensorflow::Graph *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_tensorflow_Graph_kControlSlot(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::Graph::kControlSlot));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Graph_versions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VersionDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_versions (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_versions" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  result = (VersionDef *) &((tensorflow::Graph const *)arg1)->versions();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VersionDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_set_versions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  VersionDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_set_versions (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_set_versions" "', argument " "1"" of type '" "tensorflow::Graph *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_VersionDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_set_versions" "', argument " "2"" of type '" "VersionDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_set_versions" "', argument " "2"" of type '" "VersionDef const &""'"); 
  }
  arg2 = (VersionDef *)(argp2);
  (arg1)->set_versions((VersionDef const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_AddNode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  tensorflow::NodeDef *arg2 = 0 ;
  Status *arg3 = (Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  tensorflow::Node *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_AddNode (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_AddNode" "', argument " "1"" of type '" "tensorflow::Graph *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__NodeDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_AddNode" "', argument " "2"" of type '" "tensorflow::NodeDef const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_AddNode" "', argument " "2"" of type '" "tensorflow::NodeDef const &""'"); 
  }
  arg2 = (tensorflow::NodeDef *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_tensorflow__Status, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_AddNode" "', argument " "3"" of type '" "Status *""'"); 
  }
  arg3 = (Status *)(argp3);
  result = (tensorflow::Node *)(arg1)->AddNode((tensorflow::NodeDef const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_CopyNode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  tensorflow::Node *arg2 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::Node *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_CopyNode (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_CopyNode" "', argument " "1"" of type '" "tensorflow::Graph *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_CopyNode" "', argument " "2"" of type '" "tensorflow::Node *""'"); 
  }
  arg2 = (tensorflow::Node *)(argp2);
  result = (tensorflow::Node *)(arg1)->CopyNode(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_RemoveNode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  tensorflow::Node *arg2 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_RemoveNode (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_RemoveNode" "', argument " "1"" of type '" "tensorflow::Graph *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_RemoveNode" "', argument " "2"" of type '" "tensorflow::Node *""'"); 
  }
  arg2 = (tensorflow::Node *)(argp2);
  (arg1)->RemoveNode(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_AddEdge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  tensorflow::Node *arg2 = (tensorflow::Node *) 0 ;
  int arg3 ;
  tensorflow::Node *arg4 = (tensorflow::Node *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  tensorflow::Edge *result = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_AddEdge (should be 4)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_AddEdge" "', argument " "1"" of type '" "tensorflow::Graph *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_AddEdge" "', argument " "2"" of type '" "tensorflow::Node *""'"); 
  }
  arg2 = (tensorflow::Node *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_AddEdge" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  res4 = SWIG_ConvertPtr(args[2], &argp4,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Graph_AddEdge" "', argument " "4"" of type '" "tensorflow::Node *""'"); 
  }
  arg4 = (tensorflow::Node *)(argp4);
  ecode5 = SWIG_AsVal_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Graph_AddEdge" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = (int)(val5);
  result = (tensorflow::Edge *)(arg1)->AddEdge(arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Edge, 0 |  0 );
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_AddControlEdge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  tensorflow::Node *arg2 = (tensorflow::Node *) 0 ;
  tensorflow::Node *arg3 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  tensorflow::Edge *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_AddControlEdge (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_AddControlEdge" "', argument " "1"" of type '" "tensorflow::Graph *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_AddControlEdge" "', argument " "2"" of type '" "tensorflow::Node *""'"); 
  }
  arg2 = (tensorflow::Node *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Graph_AddControlEdge" "', argument " "3"" of type '" "tensorflow::Node *""'"); 
  }
  arg3 = (tensorflow::Node *)(argp3);
  result = (tensorflow::Edge *)(arg1)->AddControlEdge(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Edge, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_RemoveEdge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  tensorflow::Edge *arg2 = (tensorflow::Edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_RemoveEdge (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_RemoveEdge" "', argument " "1"" of type '" "tensorflow::Graph *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__Edge, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_RemoveEdge" "', argument " "2"" of type '" "tensorflow::Edge const *""'"); 
  }
  arg2 = (tensorflow::Edge *)(argp2);
  (arg1)->RemoveEdge((tensorflow::Edge const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_num_nodes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_num_nodes (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_num_nodes" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  result = (int)((tensorflow::Graph const *)arg1)->num_nodes();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_num_edges(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_num_edges (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_num_edges" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  result = (int)((tensorflow::Graph const *)arg1)->num_edges();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_ToGraphDefSubRange(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  GraphDef *arg2 = (GraphDef *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_ToGraphDefSubRange (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_ToGraphDefSubRange" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_GraphDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_ToGraphDefSubRange" "', argument " "2"" of type '" "GraphDef *""'"); 
  }
  arg2 = (GraphDef *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Graph_ToGraphDefSubRange" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ((tensorflow::Graph const *)arg1)->ToGraphDefSubRange(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_ToGraphDef(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  GraphDef *arg2 = (GraphDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_ToGraphDef (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_ToGraphDef" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_GraphDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_ToGraphDef" "', argument " "2"" of type '" "GraphDef *""'"); 
  }
  arg2 = (GraphDef *)(argp2);
  ((tensorflow::Graph const *)arg1)->ToGraphDef(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_NewName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  tensorflow::StringPiece arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_NewName (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_NewName" "', argument " "1"" of type '" "tensorflow::Graph *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Graph_NewName" "', argument " "2"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Graph_NewName" "', argument " "2"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg2 = *((tensorflow::StringPiece *)(argp2));
    }
  }
  result = (arg1)->NewName(arg2);
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_nodes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< tensorflow::gtl::iterator_range< tensorflow::NodeIter > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_nodes (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_nodes" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  result = ((tensorflow::Graph const *)arg1)->nodes();
  jsresult = SWIG_NewPointerObj((new tensorflow::gtl::iterator_range< tensorflow::NodeIter >((const tensorflow::gtl::iterator_range< tensorflow::NodeIter >&)(result))), SWIGTYPE_p_tensorflow__gtl__iterator_rangeT_tensorflow__NodeIter_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_num_node_ids(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_num_node_ids (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_num_node_ids" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  result = (int)((tensorflow::Graph const *)arg1)->num_node_ids();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_FindNodeId(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tensorflow::Node *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_FindNodeId (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_FindNodeId" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_FindNodeId" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (tensorflow::Node *)((tensorflow::Graph const *)arg1)->FindNodeId(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_num_edge_ids(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_num_edge_ids (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_num_edge_ids" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  result = (int)((tensorflow::Graph const *)arg1)->num_edge_ids();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_FindEdgeId(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tensorflow::Edge *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_FindEdgeId (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_FindEdgeId" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Graph_FindEdgeId" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (tensorflow::Edge *)((tensorflow::Graph const *)arg1)->FindEdgeId(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Edge, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_edges(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EdgeSet *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_edges (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_edges" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  result = (EdgeSet *) &((tensorflow::Graph const *)arg1)->edges();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EdgeSet, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_tensorflow_Graph_kSourceId(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::Graph::kSourceId));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_tensorflow_Graph_kSinkId(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(tensorflow::Graph::kSinkId));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_Graph_source_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Node *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_source_node (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_source_node" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  result = (tensorflow::Node *)((tensorflow::Graph const *)arg1)->source_node();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_sink_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Node *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_sink_node (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_sink_node" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  result = (tensorflow::Node *)((tensorflow::Graph const *)arg1)->sink_node();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Graph_op_registry(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpRegistryInterface *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Graph_op_registry (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Graph_op_registry" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  result = (OpRegistryInterface *)((tensorflow::Graph const *)arg1)->op_registry();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpRegistryInterface, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsSwitch(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsSwitch (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsSwitch" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsSwitch((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsMerge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsMerge (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsMerge" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsMerge((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsEnter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsEnter (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsEnter" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsEnter((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsExit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsExit (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsExit" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsExit((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsNextIteration(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsNextIteration (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsNextIteration" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsNextIteration((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsLoopCond(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsLoopCond (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsLoopCond" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsLoopCond((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsControlTrigger(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsControlTrigger (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsControlTrigger" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsControlTrigger((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsSend(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsSend (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsSend" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsSend((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsRecv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsRecv (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsRecv" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsRecv((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsHostSend(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsHostSend (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsHostSend" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsHostSend((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsHostRecv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsHostRecv (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsHostRecv" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsHostRecv((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsTransferNode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsTransferNode (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsTransferNode" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsTransferNode((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsConstant(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsConstant (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsConstant" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsConstant((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsVariable(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsVariable (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsVariable" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsVariable((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsIdentity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsIdentity (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsIdentity" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsIdentity((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsControlFlow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsControlFlow (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsControlFlow" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsControlFlow((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IsHostMemoryPreserving(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Node *arg1 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IsHostMemoryPreserving (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsHostMemoryPreserving" "', argument " "1"" of type '" "tensorflow::Node const *""'"); 
  }
  arg1 = (tensorflow::Node *)(argp1);
  result = (bool)tensorflow::IsHostMemoryPreserving((tensorflow::Node const *)arg1);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_NodeIter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::Graph *arg1 = (tensorflow::Graph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tensorflow::NodeIter *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_NodeIter (should be 2)");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodeIter" "', argument " "1"" of type '" "tensorflow::Graph const *""'"); 
  }
  arg1 = (tensorflow::Graph *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NodeIter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (tensorflow::NodeIter *)new tensorflow::NodeIter((tensorflow::Graph const *)arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__NodeIter, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter___ref__(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Node *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter___ref__ (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter___ref__" "', argument " "1"" of type '" "tensorflow::NodeIter *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (tensorflow::Node *)(arg1)->operator *();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter___deref__(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Node *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter___deref__ (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter___deref__" "', argument " "1"" of type '" "tensorflow::NodeIter *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (tensorflow::Node *)(arg1)->operator ->();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_NodeIter(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_NodeIter(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_NodeIter(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_NodeIter(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::NodeIter * arg1 = (tensorflow::NodeIter *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_NodeIter_DebugString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_DebugString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_DebugString" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (*arg1)->DebugString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_id(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_id (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_id" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (int)(*arg1)->id();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_cost_id(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_cost_id (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_cost_id" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (int)(*arg1)->cost_id();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_name" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (string *) &(*arg1)->name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_type_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_type_string (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_type_string" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (string *) &(*arg1)->type_string();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::NodeDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_def" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (tensorflow::NodeDef *) &(*arg1)->def();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_op_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::OpDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_op_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_op_def" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (tensorflow::OpDef *) &(*arg1)->op_def();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_num_inputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_num_inputs (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_num_inputs" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (int)(*arg1)->num_inputs();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_input_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tensorflow::DataType result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_input_type (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_input_type" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeIter_input_type" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (tensorflow::DataType)(*arg1)->input_type(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_input_types(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DataTypeVector *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_input_types (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_input_types" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (DataTypeVector *) &(*arg1)->input_types();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DataTypeVector, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_num_outputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_num_outputs (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_num_outputs" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (int)(*arg1)->num_outputs();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_output_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tensorflow::DataType result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_output_type (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_output_type" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeIter_output_type" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (tensorflow::DataType)(*arg1)->output_type(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_output_types(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DataTypeVector *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_output_types (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_output_types" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (DataTypeVector *) &(*arg1)->output_types();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DataTypeVector, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_assigned_device_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_assigned_device_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_assigned_device_name" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (*arg1)->assigned_device_name();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_set_assigned_device_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_set_assigned_device_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_set_assigned_device_name" "', argument " "1"" of type '" "tensorflow::NodeIter *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeIter_set_assigned_device_name" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeIter_set_assigned_device_name" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  (*arg1)->set_assigned_device_name((string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_in_nodes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< tensorflow::gtl::iterator_range< tensorflow::NeighborIter > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_in_nodes (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_in_nodes" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (*arg1)->in_nodes();
  jsresult = SWIG_NewPointerObj((new tensorflow::gtl::iterator_range< tensorflow::NeighborIter >((const tensorflow::gtl::iterator_range< tensorflow::NeighborIter >&)(result))), SWIGTYPE_p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_out_nodes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< tensorflow::gtl::iterator_range< tensorflow::NeighborIter > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_out_nodes (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_out_nodes" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (*arg1)->out_nodes();
  jsresult = SWIG_NewPointerObj((new tensorflow::gtl::iterator_range< tensorflow::NeighborIter >((const tensorflow::gtl::iterator_range< tensorflow::NeighborIter >&)(result))), SWIGTYPE_p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_in_edges(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EdgeSet *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_in_edges (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_in_edges" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (EdgeSet *) &(*arg1)->in_edges();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EdgeSet, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_out_edges(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EdgeSet *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_out_edges (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_out_edges" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (EdgeSet *) &(*arg1)->out_edges();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EdgeSet, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsSource(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsSource (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsSource" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsSource();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsSink(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsSink (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsSink" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsSink();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsOp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsOp (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsOp" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsOp();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsSwitch(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsSwitch (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsSwitch" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsSwitch();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsMerge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsMerge (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsMerge" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsMerge();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsEnter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsEnter (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsEnter" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsEnter();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsExit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsExit (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsExit" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsExit();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsNextIteration(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsNextIteration (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsNextIteration" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsNextIteration();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsLoopCond(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsLoopCond (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsLoopCond" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsLoopCond();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsControlTrigger(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsControlTrigger (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsControlTrigger" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsControlTrigger();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsSend(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsSend (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsSend" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsSend();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsRecv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsRecv (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsRecv" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsRecv();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsConstant(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsConstant (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsConstant" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsConstant();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsVariable(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsVariable (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsVariable" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsVariable();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsIdentity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsIdentity (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsIdentity" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsIdentity();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsGetSessionHandle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsGetSessionHandle (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsGetSessionHandle" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsGetSessionHandle();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsGetSessionTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsGetSessionTensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsGetSessionTensor" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsGetSessionTensor();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsDeleteSessionTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsDeleteSessionTensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsDeleteSessionTensor" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsDeleteSessionTensor();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsControlFlow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsControlFlow (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsControlFlow" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsControlFlow();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsHostSend(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsHostSend (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsHostSend" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsHostSend();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_IsHostRecv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_IsHostRecv (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_IsHostRecv" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  result = (bool)(*arg1)->IsHostRecv();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_ClearAttr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_ClearAttr (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_ClearAttr" "', argument " "1"" of type '" "tensorflow::NodeIter *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeIter_ClearAttr" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeIter_ClearAttr" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  (*arg1)->ClearAttr((string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_input_edge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  int arg2 ;
  tensorflow::Edge **arg3 = (tensorflow::Edge **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_input_edge (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_input_edge" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeIter_input_edge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_tensorflow__Edge, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeIter_input_edge" "', argument " "3"" of type '" "tensorflow::Edge const **""'"); 
  }
  arg3 = (tensorflow::Edge **)(argp3);
  result = (*arg1)->input_edge(arg2,(tensorflow::Edge const **)arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeIter_input_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeIter *arg1 = (tensorflow::NodeIter *) 0 ;
  int arg2 ;
  tensorflow::Node **arg3 = (tensorflow::Node **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeIter_input_node (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeIter_input_node" "', argument " "1"" of type '" "tensorflow::NodeIter const *""'"); 
  }
  arg1 = (tensorflow::NodeIter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeIter_input_node" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeIter_input_node" "', argument " "3"" of type '" "tensorflow::Node const **""'"); 
  }
  arg3 = (tensorflow::Node **)(argp3);
  result = (*arg1)->input_node(arg2,(tensorflow::Node const **)arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_NeighborIter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  EdgeSet::const_iterator arg1 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  tensorflow::NeighborIter *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_NeighborIter (should be 2)");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_EdgeSet__const_iterator,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeighborIter" "', argument " "1"" of type '" "EdgeSet::const_iterator""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeighborIter" "', argument " "1"" of type '" "EdgeSet::const_iterator""'");
    } else {
      arg1 = *((EdgeSet::const_iterator *)(argp1));
    }
  }
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NeighborIter" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (tensorflow::NeighborIter *)new tensorflow::NeighborIter(arg1,arg2);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__NeighborIter, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter___ref__(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Node *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter___ref__ (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter___ref__" "', argument " "1"" of type '" "tensorflow::NeighborIter *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (tensorflow::Node *)(arg1)->operator *();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter___deref__(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Node *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter___deref__ (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter___deref__" "', argument " "1"" of type '" "tensorflow::NeighborIter *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (tensorflow::Node *)(arg1)->operator ->();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_NeighborIter(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_NeighborIter(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_NeighborIter(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_NeighborIter(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::NeighborIter * arg1 = (tensorflow::NeighborIter *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_NeighborIter_DebugString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_DebugString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_DebugString" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (*arg1)->DebugString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_id(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_id (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_id" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (int)(*arg1)->id();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_cost_id(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_cost_id (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_cost_id" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (int)(*arg1)->cost_id();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_name" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (string *) &(*arg1)->name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_type_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_type_string (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_type_string" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (string *) &(*arg1)->type_string();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::NodeDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_def" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (tensorflow::NodeDef *) &(*arg1)->def();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_op_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::OpDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_op_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_op_def" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (tensorflow::OpDef *) &(*arg1)->op_def();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_num_inputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_num_inputs (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_num_inputs" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (int)(*arg1)->num_inputs();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_input_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tensorflow::DataType result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_input_type (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_input_type" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeighborIter_input_type" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (tensorflow::DataType)(*arg1)->input_type(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_input_types(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DataTypeVector *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_input_types (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_input_types" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (DataTypeVector *) &(*arg1)->input_types();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DataTypeVector, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_num_outputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_num_outputs (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_num_outputs" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (int)(*arg1)->num_outputs();
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_output_type(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tensorflow::DataType result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_output_type (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_output_type" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeighborIter_output_type" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (tensorflow::DataType)(*arg1)->output_type(arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_output_types(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DataTypeVector *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_output_types (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_output_types" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (DataTypeVector *) &(*arg1)->output_types();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DataTypeVector, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_assigned_device_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_assigned_device_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_assigned_device_name" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (*arg1)->assigned_device_name();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_set_assigned_device_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_set_assigned_device_name (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_set_assigned_device_name" "', argument " "1"" of type '" "tensorflow::NeighborIter *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeighborIter_set_assigned_device_name" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeighborIter_set_assigned_device_name" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  (*arg1)->set_assigned_device_name((string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_in_nodes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< tensorflow::gtl::iterator_range< tensorflow::NeighborIter > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_in_nodes (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_in_nodes" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (*arg1)->in_nodes();
  jsresult = SWIG_NewPointerObj((new tensorflow::gtl::iterator_range< tensorflow::NeighborIter >((const tensorflow::gtl::iterator_range< tensorflow::NeighborIter >&)(result))), SWIGTYPE_p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_out_nodes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< tensorflow::gtl::iterator_range< tensorflow::NeighborIter > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_out_nodes (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_out_nodes" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (*arg1)->out_nodes();
  jsresult = SWIG_NewPointerObj((new tensorflow::gtl::iterator_range< tensorflow::NeighborIter >((const tensorflow::gtl::iterator_range< tensorflow::NeighborIter >&)(result))), SWIGTYPE_p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_in_edges(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EdgeSet *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_in_edges (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_in_edges" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (EdgeSet *) &(*arg1)->in_edges();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EdgeSet, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_out_edges(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  EdgeSet *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_out_edges (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_out_edges" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (EdgeSet *) &(*arg1)->out_edges();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EdgeSet, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsSource(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsSource (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsSource" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsSource();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsSink(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsSink (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsSink" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsSink();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsOp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsOp (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsOp" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsOp();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsSwitch(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsSwitch (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsSwitch" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsSwitch();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsMerge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsMerge (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsMerge" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsMerge();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsEnter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsEnter (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsEnter" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsEnter();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsExit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsExit (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsExit" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsExit();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsNextIteration(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsNextIteration (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsNextIteration" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsNextIteration();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsLoopCond(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsLoopCond (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsLoopCond" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsLoopCond();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsControlTrigger(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsControlTrigger (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsControlTrigger" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsControlTrigger();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsSend(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsSend (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsSend" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsSend();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsRecv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsRecv (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsRecv" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsRecv();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsConstant(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsConstant (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsConstant" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsConstant();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsVariable(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsVariable (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsVariable" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsVariable();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsIdentity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsIdentity (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsIdentity" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsIdentity();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsGetSessionHandle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsGetSessionHandle (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsGetSessionHandle" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsGetSessionHandle();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsGetSessionTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsGetSessionTensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsGetSessionTensor" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsGetSessionTensor();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsDeleteSessionTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsDeleteSessionTensor (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsDeleteSessionTensor" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsDeleteSessionTensor();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsControlFlow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsControlFlow (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsControlFlow" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsControlFlow();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsHostSend(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsHostSend (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsHostSend" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsHostSend();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_IsHostRecv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_IsHostRecv (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_IsHostRecv" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  result = (bool)(*arg1)->IsHostRecv();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_ClearAttr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_ClearAttr (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_ClearAttr" "', argument " "1"" of type '" "tensorflow::NeighborIter *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NeighborIter_ClearAttr" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NeighborIter_ClearAttr" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  (*arg1)->ClearAttr((string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_input_edge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  int arg2 ;
  tensorflow::Edge **arg3 = (tensorflow::Edge **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_input_edge (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_input_edge" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeighborIter_input_edge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_tensorflow__Edge, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NeighborIter_input_edge" "', argument " "3"" of type '" "tensorflow::Edge const **""'"); 
  }
  arg3 = (tensorflow::Edge **)(argp3);
  result = (*arg1)->input_edge(arg2,(tensorflow::Edge const **)arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NeighborIter_input_node(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NeighborIter *arg1 = (tensorflow::NeighborIter *) 0 ;
  int arg2 ;
  tensorflow::Node **arg3 = (tensorflow::Node **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NeighborIter_input_node (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NeighborIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeighborIter_input_node" "', argument " "1"" of type '" "tensorflow::NeighborIter const *""'"); 
  }
  arg1 = (tensorflow::NeighborIter *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeighborIter_input_node" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NeighborIter_input_node" "', argument " "3"" of type '" "tensorflow::Node const **""'"); 
  }
  arg3 = (tensorflow::Node **)(argp3);
  result = (*arg1)->input_node(arg2,(tensorflow::Node const **)arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_ShapeRefiner(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  OpRegistryInterface *arg1 = (OpRegistryInterface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::ShapeRefiner *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ShapeRefiner (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_OpRegistryInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShapeRefiner" "', argument " "1"" of type '" "OpRegistryInterface const *""'"); 
  }
  arg1 = (OpRegistryInterface *)(argp1);
  result = (tensorflow::ShapeRefiner *)new tensorflow::ShapeRefiner((OpRegistryInterface const *)arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__ShapeRefiner, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ShapeRefiner(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ShapeRefiner(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ShapeRefiner(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_ShapeRefiner(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::ShapeRefiner * arg1 = (tensorflow::ShapeRefiner *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_ShapeRefiner_AddNode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::ShapeRefiner *arg1 = (tensorflow::ShapeRefiner *) 0 ;
  tensorflow::Node *arg2 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ShapeRefiner_AddNode (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__ShapeRefiner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeRefiner_AddNode" "', argument " "1"" of type '" "tensorflow::ShapeRefiner *""'"); 
  }
  arg1 = (tensorflow::ShapeRefiner *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeRefiner_AddNode" "', argument " "2"" of type '" "tensorflow::Node const *""'"); 
  }
  arg2 = (tensorflow::Node *)(argp2);
  result = (arg1)->AddNode((tensorflow::Node const *)arg2);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ShapeRefiner_SetShape(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::ShapeRefiner *arg1 = (tensorflow::ShapeRefiner *) 0 ;
  tensorflow::Node *arg2 = (tensorflow::Node *) 0 ;
  int arg3 ;
  shape_inference::ShapeHandle arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Status result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ShapeRefiner_SetShape (should be 3)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__ShapeRefiner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeRefiner_SetShape" "', argument " "1"" of type '" "tensorflow::ShapeRefiner *""'"); 
  }
  arg1 = (tensorflow::ShapeRefiner *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeRefiner_SetShape" "', argument " "2"" of type '" "tensorflow::Node const *""'"); 
  }
  arg2 = (tensorflow::Node *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeRefiner_SetShape" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_shape_inference__ShapeHandle,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ShapeRefiner_SetShape" "', argument " "4"" of type '" "shape_inference::ShapeHandle""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeRefiner_SetShape" "', argument " "4"" of type '" "shape_inference::ShapeHandle""'");
    } else {
      arg4 = *((shape_inference::ShapeHandle *)(argp4));
    }
  }
  result = (arg1)->SetShape((tensorflow::Node const *)arg2,arg3,arg4);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ShapeRefiner_GetContext(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::ShapeRefiner *arg1 = (tensorflow::ShapeRefiner *) 0 ;
  tensorflow::Node *arg2 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  shape_inference::InferenceContext *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ShapeRefiner_GetContext (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__ShapeRefiner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeRefiner_GetContext" "', argument " "1"" of type '" "tensorflow::ShapeRefiner const *""'"); 
  }
  arg1 = (tensorflow::ShapeRefiner *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeRefiner_GetContext" "', argument " "2"" of type '" "tensorflow::Node const *""'"); 
  }
  arg2 = (tensorflow::Node *)(argp2);
  result = (shape_inference::InferenceContext *)((tensorflow::ShapeRefiner const *)arg1)->GetContext((tensorflow::Node const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_shape_inference__InferenceContext, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_NodeBuilder__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::StringPiece arg1 ;
  tensorflow::StringPiece arg2 ;
  OpRegistryInterface *arg3 = (OpRegistryInterface *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  tensorflow::NodeBuilder *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_NodeBuilder__SWIG_0 (should be 3)");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodeBuilder" "', argument " "1"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodeBuilder" "', argument " "1"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg1 = *((tensorflow::StringPiece *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NodeBuilder" "', argument " "2"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodeBuilder" "', argument " "2"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg2 = *((tensorflow::StringPiece *)(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_OpRegistryInterface, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NodeBuilder" "', argument " "3"" of type '" "OpRegistryInterface const *""'"); 
  }
  arg3 = (OpRegistryInterface *)(argp3);
  result = (tensorflow::NodeBuilder *)new tensorflow::NodeBuilder(arg1,arg2,(OpRegistryInterface const *)arg3);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__NodeBuilder, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_NodeBuilder__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::StringPiece arg1 ;
  tensorflow::StringPiece arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  tensorflow::NodeBuilder *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_NodeBuilder__SWIG_1 (should be 2)");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodeBuilder" "', argument " "1"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodeBuilder" "', argument " "1"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg1 = *((tensorflow::StringPiece *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NodeBuilder" "', argument " "2"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodeBuilder" "', argument " "2"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg2 = *((tensorflow::StringPiece *)(argp2));
    }
  }
  result = (tensorflow::NodeBuilder *)new tensorflow::NodeBuilder(arg1,arg2);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__NodeBuilder, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_NodeBuilder__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::StringPiece arg1 ;
  tensorflow::OpDef *arg2 = (tensorflow::OpDef *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::NodeBuilder *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_NodeBuilder__SWIG_2 (should be 2)");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodeBuilder" "', argument " "1"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodeBuilder" "', argument " "1"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg1 = *((tensorflow::StringPiece *)(argp1));
    }
  }
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NodeBuilder" "', argument " "2"" of type '" "tensorflow::OpDef const *""'"); 
  }
  arg2 = (tensorflow::OpDef *)(argp2);
  result = (tensorflow::NodeBuilder *)new tensorflow::NodeBuilder(arg1,(tensorflow::OpDef const *)arg2);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__NodeBuilder, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_NodeBuilder__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  NodeDefBuilder *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::NodeBuilder *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_NodeBuilder__SWIG_3 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_NodeDefBuilder,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodeBuilder" "', argument " "1"" of type '" "NodeDefBuilder const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodeBuilder" "', argument " "1"" of type '" "NodeDefBuilder const &""'"); 
  }
  arg1 = (NodeDefBuilder *)(argp1);
  result = (tensorflow::NodeBuilder *)new tensorflow::NodeBuilder((NodeDefBuilder const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__NodeBuilder, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_NodeBuilder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_NodeBuilder__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_NodeBuilder__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_NodeBuilder__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_NodeBuilder__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_NodeBuilder__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_NodeBuilder__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_NodeBuilder__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_NodeBuilder__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_NodeBuilder");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeBuilder_Input__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeBuilder *arg1 = (tensorflow::NodeBuilder *) 0 ;
  tensorflow::Node *arg2 = (tensorflow::Node *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  tensorflow::NodeBuilder *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBuilder_Input" "', argument " "1"" of type '" "tensorflow::NodeBuilder *""'"); 
  }
  arg1 = (tensorflow::NodeBuilder *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBuilder_Input" "', argument " "2"" of type '" "tensorflow::Node *""'"); 
  }
  arg2 = (tensorflow::Node *)(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeBuilder_Input" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (tensorflow::NodeBuilder *) &(arg1)->Input(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeBuilder_Input__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeBuilder *arg1 = (tensorflow::NodeBuilder *) 0 ;
  tensorflow::Node *arg2 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::NodeBuilder *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBuilder_Input" "', argument " "1"" of type '" "tensorflow::NodeBuilder *""'"); 
  }
  arg1 = (tensorflow::NodeBuilder *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBuilder_Input" "', argument " "2"" of type '" "tensorflow::Node *""'"); 
  }
  arg2 = (tensorflow::Node *)(argp2);
  result = (tensorflow::NodeBuilder *) &(arg1)->Input(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeBuilder_Input__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeBuilder *arg1 = (tensorflow::NodeBuilder *) 0 ;
  tensorflow::NodeBuilder::NodeOut arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  tensorflow::NodeBuilder *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBuilder_Input" "', argument " "1"" of type '" "tensorflow::NodeBuilder *""'"); 
  }
  arg1 = (tensorflow::NodeBuilder *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__NodeBuilder__NodeOut,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBuilder_Input" "', argument " "2"" of type '" "tensorflow::NodeBuilder::NodeOut""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeBuilder_Input" "', argument " "2"" of type '" "tensorflow::NodeBuilder::NodeOut""'");
    } else {
      arg2 = *((tensorflow::NodeBuilder::NodeOut *)(argp2));
    }
  }
  result = (tensorflow::NodeBuilder *) &(arg1)->Input(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeBuilder_Input__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeBuilder *arg1 = (tensorflow::NodeBuilder *) 0 ;
  SwigValueWrapper< tensorflow::gtl::ArraySlice< tensorflow::NodeBuilder::NodeOut > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  tensorflow::NodeBuilder *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBuilder_Input" "', argument " "1"" of type '" "tensorflow::NodeBuilder *""'"); 
  }
  arg1 = (tensorflow::NodeBuilder *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__gtl__ArraySliceT_tensorflow__NodeBuilder__NodeOut_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBuilder_Input" "', argument " "2"" of type '" "tensorflow::gtl::ArraySlice< tensorflow::NodeBuilder::NodeOut >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeBuilder_Input" "', argument " "2"" of type '" "tensorflow::gtl::ArraySlice< tensorflow::NodeBuilder::NodeOut >""'");
    } else {
      arg2 = *((tensorflow::gtl::ArraySlice< tensorflow::NodeBuilder::NodeOut > *)(argp2));
    }
  }
  result = (tensorflow::NodeBuilder *) &(arg1)->Input(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeBuilder__wrap_NodeBuilder_Input(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeBuilder_Input__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeBuilder_Input__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeBuilder_Input__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeBuilder_Input__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeBuilder_Input__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeBuilder_Input__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_NodeBuilder_Input__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_NodeBuilder_Input__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function Input.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeBuilder_ControlInput(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeBuilder *arg1 = (tensorflow::NodeBuilder *) 0 ;
  tensorflow::Node *arg2 = (tensorflow::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tensorflow::NodeBuilder *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeBuilder_ControlInput (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBuilder_ControlInput" "', argument " "1"" of type '" "tensorflow::NodeBuilder *""'"); 
  }
  arg1 = (tensorflow::NodeBuilder *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBuilder_ControlInput" "', argument " "2"" of type '" "tensorflow::Node *""'"); 
  }
  arg2 = (tensorflow::Node *)(argp2);
  result = (tensorflow::NodeBuilder *) &(arg1)->ControlInput(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeBuilder_ControlInputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeBuilder *arg1 = (tensorflow::NodeBuilder *) 0 ;
  SwigValueWrapper< tensorflow::gtl::ArraySlice< tensorflow::Node * > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  tensorflow::NodeBuilder *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeBuilder_ControlInputs (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBuilder_ControlInputs" "', argument " "1"" of type '" "tensorflow::NodeBuilder *""'"); 
  }
  arg1 = (tensorflow::NodeBuilder *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__gtl__ArraySliceT_tensorflow__Node_p_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBuilder_ControlInputs" "', argument " "2"" of type '" "tensorflow::gtl::ArraySlice< tensorflow::Node * >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeBuilder_ControlInputs" "', argument " "2"" of type '" "tensorflow::gtl::ArraySlice< tensorflow::Node * >""'");
    } else {
      arg2 = *((tensorflow::gtl::ArraySlice< tensorflow::Node * > *)(argp2));
    }
  }
  result = (tensorflow::NodeBuilder *) &(arg1)->ControlInputs(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeBuilder_Device(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeBuilder *arg1 = (tensorflow::NodeBuilder *) 0 ;
  tensorflow::StringPiece arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  tensorflow::NodeBuilder *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeBuilder_Device (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBuilder_Device" "', argument " "1"" of type '" "tensorflow::NodeBuilder *""'"); 
  }
  arg1 = (tensorflow::NodeBuilder *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBuilder_Device" "', argument " "2"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeBuilder_Device" "', argument " "2"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg2 = *((tensorflow::StringPiece *)(argp2));
    }
  }
  result = (tensorflow::NodeBuilder *) &(arg1)->Device(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeBuilder_Finalize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeBuilder *arg1 = (tensorflow::NodeBuilder *) 0 ;
  tensorflow::Graph *arg2 = (tensorflow::Graph *) 0 ;
  tensorflow::Node **arg3 = (tensorflow::Node **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeBuilder_Finalize (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBuilder_Finalize" "', argument " "1"" of type '" "tensorflow::NodeBuilder const *""'"); 
  }
  arg1 = (tensorflow::NodeBuilder *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBuilder_Finalize" "', argument " "2"" of type '" "tensorflow::Graph *""'"); 
  }
  arg2 = (tensorflow::Graph *)(argp2);
  {
    Node* node;
    arg3 = &node;
  }
  result = ((tensorflow::NodeBuilder const *)arg1)->Finalize(arg2,arg3);
  {
    if (!(&result)->ok()) {
      SWIG_exception_fail(SWIG_ERROR, (&result)->error_message().c_str());
    }
  }
  {
    jsresult = SWIG_NewPointerObj(ToOperation(*arg3), SWIGTYPE_p_TF_Operation, 0 |  0 );
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeBuilder_node_name(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeBuilder *arg1 = (tensorflow::NodeBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeBuilder_node_name (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBuilder_node_name" "', argument " "1"" of type '" "tensorflow::NodeBuilder const *""'"); 
  }
  arg1 = (tensorflow::NodeBuilder *)(argp1);
  result = (string *) &((tensorflow::NodeBuilder const *)arg1)->node_name();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NodeBuilder_op_def(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::NodeBuilder *arg1 = (tensorflow::NodeBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::OpDef *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NodeBuilder_op_def (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBuilder_op_def" "', argument " "1"" of type '" "tensorflow::NodeBuilder const *""'"); 
  }
  arg1 = (tensorflow::NodeBuilder *)(argp1);
  result = (tensorflow::OpDef *) &((tensorflow::NodeBuilder const *)arg1)->op_def();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpDef, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_NodeBuilder(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_NodeBuilder(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_NodeBuilder(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_NodeBuilder(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::NodeBuilder * arg1 = (tensorflow::NodeBuilder *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Status__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::Status *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Status__SWIG_0 (should be 0)");
  result = (tensorflow::Status *)new tensorflow::Status();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__Status, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Status(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Status(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Status(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Status(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::Status * arg1 = (tensorflow::Status *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_Status__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::error::Code arg1 ;
  tensorflow::StringPiece arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  tensorflow::Status *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Status__SWIG_1 (should be 2)");
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__error__Code,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Status" "', argument " "1"" of type '" "tensorflow::error::Code""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Status" "', argument " "1"" of type '" "tensorflow::error::Code""'");
    } else {
      arg1 = *((tensorflow::error::Code *)(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_tensorflow__StringPiece,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Status" "', argument " "2"" of type '" "tensorflow::StringPiece""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Status" "', argument " "2"" of type '" "tensorflow::StringPiece""'");
    } else {
      arg2 = *((tensorflow::StringPiece *)(argp2));
    }
  }
  result = (tensorflow::Status *)new tensorflow::Status(arg1,arg2);
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__Status, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Status__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::Status *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::Status *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Status__SWIG_2 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__Status,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Status" "', argument " "1"" of type '" "tensorflow::Status const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Status" "', argument " "1"" of type '" "tensorflow::Status const &""'"); 
  }
  arg1 = (tensorflow::Status *)(argp1);
  result = (tensorflow::Status *)new tensorflow::Status((tensorflow::Status const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__Status, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Status(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Status__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Status__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Status__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Status__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Status__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Status__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Status");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Status_OK(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Status result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Status_OK (should be 0)");
  
  result = tensorflow::Status::OK();
  jsresult = SWIG_NewPointerObj((new tensorflow::Status((const tensorflow::Status&)(result))), SWIGTYPE_p_tensorflow__Status, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Status_ok(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Status *arg1 = (tensorflow::Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Status_ok (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Status_ok" "', argument " "1"" of type '" "tensorflow::Status const *""'"); 
  }
  arg1 = (tensorflow::Status *)(argp1);
  result = (bool)((tensorflow::Status const *)arg1)->ok();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Status_code(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Status *arg1 = (tensorflow::Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::error::Code result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Status_code (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Status_code" "', argument " "1"" of type '" "tensorflow::Status const *""'"); 
  }
  arg1 = (tensorflow::Status *)(argp1);
  result = ((tensorflow::Status const *)arg1)->code();
  jsresult = SWIG_NewPointerObj((new tensorflow::error::Code((const tensorflow::error::Code&)(result))), SWIGTYPE_p_tensorflow__error__Code, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Status_error_message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Status *arg1 = (tensorflow::Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Status_error_message (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Status_error_message" "', argument " "1"" of type '" "tensorflow::Status const *""'"); 
  }
  arg1 = (tensorflow::Status *)(argp1);
  result = (string *) &((tensorflow::Status const *)arg1)->error_message();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Status_Update(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Status *arg1 = (tensorflow::Status *) 0 ;
  tensorflow::Status *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Status_Update (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Status_Update" "', argument " "1"" of type '" "tensorflow::Status *""'"); 
  }
  arg1 = (tensorflow::Status *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_tensorflow__Status,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Status_Update" "', argument " "2"" of type '" "tensorflow::Status const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Status_Update" "', argument " "2"" of type '" "tensorflow::Status const &""'"); 
  }
  arg2 = (tensorflow::Status *)(argp2);
  (arg1)->Update((tensorflow::Status const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Status_ToString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Status *arg1 = (tensorflow::Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Status_ToString (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__Status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Status_ToString" "', argument " "1"" of type '" "tensorflow::Status const *""'"); 
  }
  arg1 = (tensorflow::Status *)(argp1);
  result = ((tensorflow::Status const *)arg1)->ToString();
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_OpRegistryInterface(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_OpRegistryInterface(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_OpRegistryInterface(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_OpRegistryInterface(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::OpRegistryInterface * arg1 = (tensorflow::OpRegistryInterface *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_OpRegistryInterface_LookUp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpRegistryInterface *arg1 = (tensorflow::OpRegistryInterface *) 0 ;
  string *arg2 = 0 ;
  OpRegistrationData **arg3 = (OpRegistrationData **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  tensorflow::Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpRegistryInterface_LookUp (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpRegistryInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpRegistryInterface_LookUp" "', argument " "1"" of type '" "tensorflow::OpRegistryInterface const *""'"); 
  }
  arg1 = (tensorflow::OpRegistryInterface *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpRegistryInterface_LookUp" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpRegistryInterface_LookUp" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_OpRegistrationData, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OpRegistryInterface_LookUp" "', argument " "3"" of type '" "OpRegistrationData const **""'"); 
  }
  arg3 = (OpRegistrationData **)(argp3);
  result = ((tensorflow::OpRegistryInterface const *)arg1)->LookUp((string const &)*arg2,(OpRegistrationData const **)arg3);
  jsresult = SWIG_NewPointerObj((new tensorflow::Status((const tensorflow::Status&)(result))), SWIGTYPE_p_tensorflow__Status, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpRegistryInterface_LookUpOpDef(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpRegistryInterface *arg1 = (tensorflow::OpRegistryInterface *) 0 ;
  string *arg2 = 0 ;
  tensorflow::OpDef **arg3 = (tensorflow::OpDef **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  tensorflow::Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpRegistryInterface_LookUpOpDef (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpRegistryInterface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpRegistryInterface_LookUpOpDef" "', argument " "1"" of type '" "tensorflow::OpRegistryInterface const *""'"); 
  }
  arg1 = (tensorflow::OpRegistryInterface *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpRegistryInterface_LookUpOpDef" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpRegistryInterface_LookUpOpDef" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_tensorflow__OpDef, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OpRegistryInterface_LookUpOpDef" "', argument " "3"" of type '" "tensorflow::OpDef const **""'"); 
  }
  arg3 = (tensorflow::OpDef **)(argp3);
  result = ((tensorflow::OpRegistryInterface const *)arg1)->LookUpOpDef((string const &)*arg2,(tensorflow::OpDef const **)arg3);
  jsresult = SWIG_NewPointerObj((new tensorflow::Status((const tensorflow::Status&)(result))), SWIGTYPE_p_tensorflow__Status, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_OpRegistryInterface(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class OpRegistryInterface can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_OpRegistry(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::OpRegistry *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpRegistry (should be 0)");
  result = (tensorflow::OpRegistry *)new tensorflow::OpRegistry();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__OpRegistry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_OpRegistry(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_OpRegistry(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_OpRegistry(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_OpRegistry(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::OpRegistry * arg1 = (tensorflow::OpRegistry *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_OpRegistry_Register(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpRegistry *arg1 = (tensorflow::OpRegistry *) 0 ;
  SwigValueWrapper< std::function< tensorflow::Status (OpRegistrationData *) > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpRegistry_Register (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpRegistry_Register" "', argument " "1"" of type '" "tensorflow::OpRegistry *""'"); 
  }
  arg1 = (tensorflow::OpRegistry *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__functionT_tensorflow__Status_fOpRegistrationData_pF_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpRegistry_Register" "', argument " "2"" of type '" "tensorflow::OpRegistry::OpRegistrationDataFactory""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpRegistry_Register" "', argument " "2"" of type '" "tensorflow::OpRegistry::OpRegistrationDataFactory""'");
    } else {
      arg2 = *((tensorflow::OpRegistry::OpRegistrationDataFactory *)(argp2));
    }
  }
  (arg1)->Register(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpRegistry_LookUp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpRegistry *arg1 = (tensorflow::OpRegistry *) 0 ;
  string *arg2 = 0 ;
  OpRegistrationData **arg3 = (OpRegistrationData **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  tensorflow::Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpRegistry_LookUp (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpRegistry_LookUp" "', argument " "1"" of type '" "tensorflow::OpRegistry const *""'"); 
  }
  arg1 = (tensorflow::OpRegistry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpRegistry_LookUp" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpRegistry_LookUp" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_OpRegistrationData, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OpRegistry_LookUp" "', argument " "3"" of type '" "OpRegistrationData const **""'"); 
  }
  arg3 = (OpRegistrationData **)(argp3);
  result = ((tensorflow::OpRegistry const *)arg1)->LookUp((string const &)*arg2,(OpRegistrationData const **)arg3);
  jsresult = SWIG_NewPointerObj((new tensorflow::Status((const tensorflow::Status&)(result))), SWIGTYPE_p_tensorflow__Status, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpRegistry_Export(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpRegistry *arg1 = (tensorflow::OpRegistry *) 0 ;
  bool arg2 ;
  tensorflow::OpList *arg3 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpRegistry_Export (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpRegistry_Export" "', argument " "1"" of type '" "tensorflow::OpRegistry const *""'"); 
  }
  arg1 = (tensorflow::OpRegistry *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpRegistry_Export" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OpRegistry_Export" "', argument " "3"" of type '" "tensorflow::OpList *""'"); 
  }
  arg3 = (tensorflow::OpList *)(argp3);
  ((tensorflow::OpRegistry const *)arg1)->Export(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpRegistry_DebugString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpRegistry *arg1 = (tensorflow::OpRegistry *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpRegistry_DebugString (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpRegistry_DebugString" "', argument " "1"" of type '" "tensorflow::OpRegistry const *""'"); 
  }
  arg1 = (tensorflow::OpRegistry *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpRegistry_DebugString" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = ((tensorflow::OpRegistry const *)arg1)->DebugString(arg2);
  jsresult = SWIG_NewPointerObj((new string((const string&)(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpRegistry_Global(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpRegistry *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpRegistry_Global (should be 0)");
  
  result = (tensorflow::OpRegistry *)tensorflow::OpRegistry::Global();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__OpRegistry, 0 |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpRegistry_GetRegisteredOps(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpRegistry *arg1 = (tensorflow::OpRegistry *) 0 ;
  std::vector< tensorflow::OpDef > *arg2 = (std::vector< tensorflow::OpDef > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpRegistry_GetRegisteredOps (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpRegistry_GetRegisteredOps" "', argument " "1"" of type '" "tensorflow::OpRegistry *""'"); 
  }
  arg1 = (tensorflow::OpRegistry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_std__vectorT_tensorflow__OpDef_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpRegistry_GetRegisteredOps" "', argument " "2"" of type '" "std::vector< tensorflow::OpDef > *""'"); 
  }
  arg2 = (std::vector< tensorflow::OpDef > *)(argp2);
  (arg1)->GetRegisteredOps(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpRegistry_SetWatcher(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpRegistry *arg1 = (tensorflow::OpRegistry *) 0 ;
  tensorflow::OpRegistry::Watcher *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  tensorflow::Status result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpRegistry_SetWatcher (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpRegistry_SetWatcher" "', argument " "1"" of type '" "tensorflow::OpRegistry *""'"); 
  }
  arg1 = (tensorflow::OpRegistry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__functionT_tensorflow__Status_ftensorflow__Status_const_R_tensorflow__OpDef_const_RF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpRegistry_SetWatcher" "', argument " "2"" of type '" "tensorflow::OpRegistry::Watcher const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpRegistry_SetWatcher" "', argument " "2"" of type '" "tensorflow::OpRegistry::Watcher const &""'"); 
  }
  arg2 = (tensorflow::OpRegistry::Watcher *)(argp2);
  result = (arg1)->SetWatcher((tensorflow::OpRegistry::Watcher const &)*arg2);
  jsresult = SWIG_NewPointerObj((new tensorflow::Status((const tensorflow::Status&)(result))), SWIGTYPE_p_tensorflow__Status, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpRegistry_ProcessRegistrations(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpRegistry *arg1 = (tensorflow::OpRegistry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::Status result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpRegistry_ProcessRegistrations (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpRegistry_ProcessRegistrations" "', argument " "1"" of type '" "tensorflow::OpRegistry const *""'"); 
  }
  arg1 = (tensorflow::OpRegistry *)(argp1);
  result = ((tensorflow::OpRegistry const *)arg1)->ProcessRegistrations();
  jsresult = SWIG_NewPointerObj((new tensorflow::Status((const tensorflow::Status&)(result))), SWIGTYPE_p_tensorflow__Status, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpRegistry_DeferRegistrations(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpRegistry *arg1 = (tensorflow::OpRegistry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpRegistry_DeferRegistrations (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpRegistry_DeferRegistrations" "', argument " "1"" of type '" "tensorflow::OpRegistry *""'"); 
  }
  arg1 = (tensorflow::OpRegistry *)(argp1);
  (arg1)->DeferRegistrations();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpRegistry_ClearDeferredRegistrations(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpRegistry *arg1 = (tensorflow::OpRegistry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpRegistry_ClearDeferredRegistrations (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpRegistry_ClearDeferredRegistrations" "', argument " "1"" of type '" "tensorflow::OpRegistry *""'"); 
  }
  arg1 = (tensorflow::OpRegistry *)(argp1);
  (arg1)->ClearDeferredRegistrations();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_OpListOpRegistry(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::OpList *arg1 = (tensorflow::OpList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::OpListOpRegistry *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpListOpRegistry (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__OpList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpListOpRegistry" "', argument " "1"" of type '" "tensorflow::OpList const *""'"); 
  }
  arg1 = (tensorflow::OpList *)(argp1);
  result = (tensorflow::OpListOpRegistry *)new tensorflow::OpListOpRegistry((tensorflow::OpList const *)arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__OpListOpRegistry, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_OpListOpRegistry(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_OpListOpRegistry(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_OpListOpRegistry(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_OpListOpRegistry(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::OpListOpRegistry * arg1 = (tensorflow::OpListOpRegistry *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_OpListOpRegistry_LookUp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::OpListOpRegistry *arg1 = (tensorflow::OpListOpRegistry *) 0 ;
  string *arg2 = 0 ;
  OpRegistrationData **arg3 = (OpRegistrationData **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  tensorflow::Status result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpListOpRegistry_LookUp (should be 2)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_tensorflow__OpListOpRegistry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpListOpRegistry_LookUp" "', argument " "1"" of type '" "tensorflow::OpListOpRegistry const *""'"); 
  }
  arg1 = (tensorflow::OpListOpRegistry *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpListOpRegistry_LookUp" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpListOpRegistry_LookUp" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = (string *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_p_OpRegistrationData, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OpListOpRegistry_LookUp" "', argument " "3"" of type '" "OpRegistrationData const **""'"); 
  }
  arg3 = (OpRegistrationData **)(argp3);
  result = ((tensorflow::OpListOpRegistry const *)arg1)->LookUp((string const &)*arg2,(OpRegistrationData const **)arg3);
  jsresult = SWIG_NewPointerObj((new tensorflow::Status((const tensorflow::Status&)(result))), SWIGTYPE_p_tensorflow__Status, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_OpDefBuilderReceiver__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::register_op::OpDefBuilderWrapper< true > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::register_op::OpDefBuilderReceiver *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpDefBuilderReceiver__SWIG_0 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__register_op__OpDefBuilderWrapperT_true_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpDefBuilderReceiver" "', argument " "1"" of type '" "tensorflow::register_op::OpDefBuilderWrapper< true > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OpDefBuilderReceiver" "', argument " "1"" of type '" "tensorflow::register_op::OpDefBuilderWrapper< true > const &""'"); 
  }
  arg1 = (tensorflow::register_op::OpDefBuilderWrapper< true > *)(argp1);
  result = (tensorflow::register_op::OpDefBuilderReceiver *)new tensorflow::register_op::OpDefBuilderReceiver((tensorflow::register_op::OpDefBuilderWrapper< true > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__register_op__OpDefBuilderReceiver, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_OpDefBuilderReceiver__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::register_op::OpDefBuilderWrapper< false > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::register_op::OpDefBuilderReceiver *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpDefBuilderReceiver__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__register_op__OpDefBuilderWrapperT_false_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpDefBuilderReceiver" "', argument " "1"" of type '" "tensorflow::register_op::OpDefBuilderWrapper< false > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OpDefBuilderReceiver" "', argument " "1"" of type '" "tensorflow::register_op::OpDefBuilderWrapper< false > const &""'"); 
  }
  arg1 = (tensorflow::register_op::OpDefBuilderWrapper< false > *)(argp1);
  result = (tensorflow::register_op::OpDefBuilderReceiver *)new tensorflow::register_op::OpDefBuilderReceiver((tensorflow::register_op::OpDefBuilderWrapper< false > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__register_op__OpDefBuilderReceiver, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_OpDefBuilderReceiver(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_OpDefBuilderReceiver__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_OpDefBuilderReceiver__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_OpDefBuilderReceiver__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_OpDefBuilderReceiver__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_OpDefBuilderReceiver");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_OpDefBuilderReceiver(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_OpDefBuilderReceiver(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_OpDefBuilderReceiver(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_OpDefBuilderReceiver(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::register_op::OpDefBuilderReceiver * arg1 = (tensorflow::register_op::OpDefBuilderReceiver *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_TF_Status_status_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Status *arg1 = (TF_Status *) 0 ;
  Status *arg2 = (Status *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  {
    arg1 = TF_NewStatus();
  }
  {
    arg1 = TF_NewStatus();
  }
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tensorflow__Status, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Status_status_set" "', argument " "2"" of type '" "Status *""'"); 
  }
  arg2 = (Status *)(argp2);
  if (arg1) (arg1)->status = *arg2;
  {
    TF_DeleteStatus(arg1);
  }
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Status_status_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Status *arg1 = (TF_Status *) 0 ;
  Status *result = 0 ;
  
  {
    arg1 = TF_NewStatus();
  }
  {
    arg1 = TF_NewStatus();
  }
  result = (Status *)& ((arg1)->status);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Status, 0 |  0 );
  {
    if (TF_GetCode(arg1) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg1));
    }
  }
  {
    TF_DeleteStatus(arg1);
  }
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_TF_Status(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_Status *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_Status (should be 0)");
  result = (TF_Status *)new TF_Status();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_Status, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_Status(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_Status(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_Status(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_Status(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_Status * arg1 = (TF_Status *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_TF_Tensor_dtype_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  TF_DataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Tensor_dtype_set" "', argument " "1"" of type '" "TF_Tensor *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_Tensor_dtype_set" "', argument " "2"" of type '" "TF_DataType""'");
  } 
  arg2 = (TF_DataType)(val2);
  if (arg1) (arg1)->dtype = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Tensor_dtype_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TF_DataType result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Tensor_dtype_get" "', argument " "1"" of type '" "TF_Tensor *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  result = (TF_DataType) ((arg1)->dtype);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_Tensor_shape_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  TensorShape *arg2 = (TensorShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Tensor_shape_set" "', argument " "1"" of type '" "TF_Tensor *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Tensor_shape_set" "', argument " "2"" of type '" "TensorShape *""'"); 
  }
  arg2 = (TensorShape *)(argp2);
  if (arg1) (arg1)->shape = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Tensor_shape_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TensorShape *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Tensor_shape_get" "', argument " "1"" of type '" "TF_Tensor *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  result = (TensorShape *)& ((arg1)->shape);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorShape, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_Tensor_buffer_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  TensorBuffer *arg2 = (TensorBuffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Tensor_buffer_set" "', argument " "1"" of type '" "TF_Tensor *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tensorflow__TensorBuffer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Tensor_buffer_set" "', argument " "2"" of type '" "TensorBuffer *""'"); 
  }
  arg2 = (TensorBuffer *)(argp2);
  if (arg1) (arg1)->buffer = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Tensor_buffer_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TensorBuffer *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Tensor_buffer_get" "', argument " "1"" of type '" "TF_Tensor *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  result = (TensorBuffer *) ((arg1)->buffer);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorBuffer, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_TF_Tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_Tensor *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_Tensor (should be 0)");
  result = (TF_Tensor *)new TF_Tensor();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_Tensor, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_Tensor(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_Tensor(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_Tensor(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_Tensor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_Tensor * arg1 = (TF_Tensor *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_TF_SessionOptions_options_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_SessionOptions *arg1 = (TF_SessionOptions *) 0 ;
  SessionOptions *arg2 = (SessionOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SessionOptions_options_set" "', argument " "1"" of type '" "TF_SessionOptions *""'"); 
  }
  arg1 = (TF_SessionOptions *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tensorflow__SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_SessionOptions_options_set" "', argument " "2"" of type '" "SessionOptions *""'"); 
  }
  arg2 = (SessionOptions *)(argp2);
  if (arg1) (arg1)->options = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_SessionOptions_options_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_SessionOptions *arg1 = (TF_SessionOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SessionOptions *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_SessionOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_SessionOptions_options_get" "', argument " "1"" of type '" "TF_SessionOptions *""'"); 
  }
  arg1 = (TF_SessionOptions *)(argp1);
  result = (SessionOptions *)& ((arg1)->options);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__SessionOptions, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_TF_SessionOptions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_SessionOptions *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_SessionOptions (should be 0)");
  result = (TF_SessionOptions *)new TF_SessionOptions();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_SessionOptions, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_SessionOptions(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_SessionOptions(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_SessionOptions(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_SessionOptions(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_SessionOptions * arg1 = (TF_SessionOptions *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_TF_DeprecatedSession_session_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_DeprecatedSession *arg1 = (TF_DeprecatedSession *) 0 ;
  Session *arg2 = (Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_DeprecatedSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_DeprecatedSession_session_set" "', argument " "1"" of type '" "TF_DeprecatedSession *""'"); 
  }
  arg1 = (TF_DeprecatedSession *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tensorflow__Session, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_DeprecatedSession_session_set" "', argument " "2"" of type '" "Session *""'"); 
  }
  arg2 = (Session *)(argp2);
  if (arg1) (arg1)->session = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_DeprecatedSession_session_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_DeprecatedSession *arg1 = (TF_DeprecatedSession *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Session *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_DeprecatedSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_DeprecatedSession_session_get" "', argument " "1"" of type '" "TF_DeprecatedSession *""'"); 
  }
  arg1 = (TF_DeprecatedSession *)(argp1);
  result = (Session *) ((arg1)->session);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_TF_DeprecatedSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_DeprecatedSession *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_DeprecatedSession (should be 0)");
  result = (TF_DeprecatedSession *)new TF_DeprecatedSession();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_DeprecatedSession, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_DeprecatedSession(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_DeprecatedSession(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_DeprecatedSession(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_DeprecatedSession(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_DeprecatedSession * arg1 = (TF_DeprecatedSession *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_DeleteArray(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  void *arg3 = (void *) 0 ;
  int res1 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DeleteArray (should be 3)");
  
  res1 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg1), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeleteArray" "', argument " "1"" of type '" "void *""'"); 
  }
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeleteArray" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  res3 = SWIG_ConvertPtr(args[2],SWIG_as_voidptrptr(&arg3), SWIGTYPE_p_void, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DeleteArray" "', argument " "3"" of type '" "void *""'"); 
  }
  DeleteArray(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_Tensor_DecodeStrings(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Tensor *arg1 = (TF_Tensor *) 0 ;
  tensorflow::Tensor *arg2 = (tensorflow::Tensor *) 0 ;
  TF_Status *arg3 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_Tensor_DecodeStrings (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Tensor_DecodeStrings" "', argument " "1"" of type '" "TF_Tensor *""'"); 
  }
  arg1 = (TF_Tensor *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_tensorflow__Tensor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Tensor_DecodeStrings" "', argument " "2"" of type '" "tensorflow::Tensor *""'"); 
  }
  arg2 = (tensorflow::Tensor *)(argp2);
  {
    arg3 = TF_NewStatus();
  }
  result = (bool)tensorflow::TF_Tensor_DecodeStrings(arg1,arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  {
    if (TF_GetCode(arg3) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg3));
    }
  }
  
  
  {
    TF_DeleteStatus(arg3);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_Tensor_EncodeStrings(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  TF_Tensor *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_Tensor_EncodeStrings (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__Tensor,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Tensor_EncodeStrings" "', argument " "1"" of type '" "tensorflow::Tensor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_Tensor_EncodeStrings" "', argument " "1"" of type '" "tensorflow::Tensor const &""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = (TF_Tensor *)tensorflow::TF_Tensor_EncodeStrings((tensorflow::Tensor const &)*arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Tensor, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorCApi_Buffer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  tensorflow::Tensor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  tensorflow::TensorBuffer *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorCApi_Buffer (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_tensorflow__Tensor,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TensorCApi_Buffer" "', argument " "1"" of type '" "tensorflow::Tensor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorCApi_Buffer" "', argument " "1"" of type '" "tensorflow::Tensor const &""'"); 
  }
  arg1 = (tensorflow::Tensor *)(argp1);
  result = (tensorflow::TensorBuffer *)tensorflow::TensorCApi::Buffer((tensorflow::Tensor const &)*arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__TensorBuffer, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TensorCApi_MakeTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_DataType arg1 ;
  tensorflow::TensorShape *arg2 = 0 ;
  tensorflow::TensorBuffer *arg3 = (tensorflow::TensorBuffer *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  tensorflow::Tensor result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TensorCApi_MakeTensor (should be 3)");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TensorCApi_MakeTensor" "', argument " "1"" of type '" "TF_DataType""'");
  } 
  arg1 = (TF_DataType)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TensorCApi_MakeTensor" "', argument " "2"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TensorCApi_MakeTensor" "', argument " "2"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg2 = (tensorflow::TensorShape *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_tensorflow__TensorBuffer, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TensorCApi_MakeTensor" "', argument " "3"" of type '" "tensorflow::TensorBuffer *""'"); 
  }
  arg3 = (tensorflow::TensorBuffer *)(argp3);
  result = tensorflow::TensorCApi::MakeTensor(arg1,(tensorflow::TensorShape const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new tensorflow::Tensor((const tensorflow::Tensor&)(result))), SWIGTYPE_p_tensorflow__Tensor, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TensorCApi(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  tensorflow::TensorCApi *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TensorCApi (should be 0)");
  result = (tensorflow::TensorCApi *)new tensorflow::TensorCApi();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_tensorflow__TensorCApi, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TensorCApi(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TensorCApi(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TensorCApi(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TensorCApi(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          tensorflow::TensorCApi * arg1 = (tensorflow::TensorCApi *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_EmptyTensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_DataType arg1 ;
  tensorflow::TensorShape *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  TF_Tensor *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EmptyTensor (should be 2)");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EmptyTensor" "', argument " "1"" of type '" "TF_DataType""'");
  } 
  arg1 = (TF_DataType)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_tensorflow__TensorShape,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EmptyTensor" "', argument " "2"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EmptyTensor" "', argument " "2"" of type '" "tensorflow::TensorShape const &""'"); 
  }
  arg2 = (tensorflow::TensorShape *)(argp2);
  result = (TF_Tensor *)tensorflow::EmptyTensor(arg1,(tensorflow::TensorShape const &)*arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Tensor, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LoadLibrary(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  void **arg2 = (void **) 0 ;
  void **arg3 = (void **) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  tensorflow::Status result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LoadLibrary (should be 4)");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadLibrary" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoadLibrary" "', argument " "2"" of type '" "void **""'"); 
  }
  arg2 = (void **)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoadLibrary" "', argument " "3"" of type '" "void const **""'"); 
  }
  arg3 = (void **)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LoadLibrary" "', argument " "4"" of type '" "size_t *""'"); 
  }
  arg4 = (size_t *)(argp4);
  result = tensorflow::LoadLibrary((char const *)arg1,arg2,(void const **)arg3,arg4);
  jsresult = SWIG_NewPointerObj((new tensorflow::Status((const tensorflow::Status&)(result))), SWIGTYPE_p_tensorflow__Status, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_Run_Setup(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  TF_Tensor **arg2 = (TF_Tensor **) 0 ;
  TF_Status *arg3 = (TF_Status *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_Run_Setup (should be 2)");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TF_Run_Setup" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Run_Setup" "', argument " "2"" of type '" "TF_Tensor **""'"); 
  }
  arg2 = (TF_Tensor **)(argp2);
  {
    arg3 = TF_NewStatus();
  }
  TF_Run_Setup(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg3) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg3));
    }
  }
  
  
  {
    TF_DeleteStatus(arg3);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_Run_Inputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Tensor **arg1 = (TF_Tensor **) 0 ;
  std::vector< std::pair< tensorflow::string,tensorflow::Tensor > > *arg2 = (std::vector< std::pair< tensorflow::string,tensorflow::Tensor > > *) 0 ;
  TF_Status *arg3 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_Run_Inputs (should be 2)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Run_Inputs" "', argument " "1"" of type '" "TF_Tensor *const *""'"); 
  }
  arg1 = (TF_Tensor **)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_std__vectorT_std__pairT_tensorflow__string_tensorflow__Tensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Run_Inputs" "', argument " "2"" of type '" "std::vector< std::pair< tensorflow::string,tensorflow::Tensor > > *""'"); 
  }
  arg2 = (std::vector< std::pair< tensorflow::string,tensorflow::Tensor > > *)(argp2);
  {
    arg3 = TF_NewStatus();
  }
  result = (bool)TF_Run_Inputs((TF_Tensor *const *)arg1,arg2,arg3);
  jsresult = SWIG_From_bool((bool)(result));
  {
    if (TF_GetCode(arg3) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg3));
    }
  }
  
  
  {
    TF_DeleteStatus(arg3);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_Run_Helper(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Session *arg1 = (Session *) 0 ;
  char *arg2 = (char *) 0 ;
  TF_Buffer *arg3 = (TF_Buffer *) 0 ;
  std::vector< std::pair< tensorflow::string,tensorflow::Tensor > > *arg4 = 0 ;
  std::vector< tensorflow::string > *arg5 = 0 ;
  TF_Tensor **arg6 = (TF_Tensor **) 0 ;
  std::vector< tensorflow::string > *arg7 = 0 ;
  TF_Buffer *arg8 = (TF_Buffer *) 0 ;
  TF_Status *arg9 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TF_Run_Helper (should be 8)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Run_Helper" "', argument " "1"" of type '" "Session *""'"); 
  }
  arg1 = (Session *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Run_Helper" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TF_Run_Helper" "', argument " "3"" of type '" "TF_Buffer const *""'"); 
  }
  arg3 = (TF_Buffer *)(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__vectorT_std__pairT_tensorflow__string_tensorflow__Tensor_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TF_Run_Helper" "', argument " "4"" of type '" "std::vector< std::pair< tensorflow::string,tensorflow::Tensor > > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_Run_Helper" "', argument " "4"" of type '" "std::vector< std::pair< tensorflow::string,tensorflow::Tensor > > const &""'"); 
  }
  arg4 = (std::vector< std::pair< tensorflow::string,tensorflow::Tensor > > *)(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__vectorT_tensorflow__string_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TF_Run_Helper" "', argument " "5"" of type '" "std::vector< tensorflow::string > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_Run_Helper" "', argument " "5"" of type '" "std::vector< tensorflow::string > const &""'"); 
  }
  arg5 = (std::vector< tensorflow::string > *)(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6,SWIGTYPE_p_p_TF_Tensor, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TF_Run_Helper" "', argument " "6"" of type '" "TF_Tensor **""'"); 
  }
  arg6 = (TF_Tensor **)(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__vectorT_tensorflow__string_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "TF_Run_Helper" "', argument " "7"" of type '" "std::vector< tensorflow::string > const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_Run_Helper" "', argument " "7"" of type '" "std::vector< tensorflow::string > const &""'"); 
  }
  arg7 = (std::vector< tensorflow::string > *)(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "TF_Run_Helper" "', argument " "8"" of type '" "TF_Buffer *""'"); 
  }
  arg8 = (TF_Buffer *)(argp8);
  {
    arg9 = TF_NewStatus();
  }
  TF_Run_Helper(arg1,(char const *)arg2,(TF_Buffer const *)arg3,(std::vector< std::pair< tensorflow::string,tensorflow::Tensor > > const &)*arg4,(std::vector< tensorflow::string > const &)*arg5,arg6,(std::vector< tensorflow::string > const &)*arg7,arg8,arg9);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg9) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg9));
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  
  
  
  
  {
    TF_DeleteStatus(arg9);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_TF_Library_lib_handle_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Library *arg1 = (TF_Library *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Library_lib_handle_set" "', argument " "1"" of type '" "TF_Library *""'"); 
  }
  arg1 = (TF_Library *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_void, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Library_lib_handle_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->lib_handle = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Library_lib_handle_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Library *arg1 = (TF_Library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Library_lib_handle_get" "', argument " "1"" of type '" "TF_Library *""'"); 
  }
  arg1 = (TF_Library *)(argp1);
  result = (void *) ((arg1)->lib_handle);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_Library_op_list_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Library *arg1 = (TF_Library *) 0 ;
  TF_Buffer *arg2 = (TF_Buffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Library_op_list_set" "', argument " "1"" of type '" "TF_Library *""'"); 
  }
  arg1 = (TF_Library *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_TF_Buffer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Library_op_list_set" "', argument " "2"" of type '" "TF_Buffer *""'"); 
  }
  arg2 = (TF_Buffer *)(argp2);
  if (arg1) (arg1)->op_list = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Library_op_list_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Library *arg1 = (TF_Library *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TF_Buffer *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Library, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Library_op_list_get" "', argument " "1"" of type '" "TF_Library *""'"); 
  }
  arg1 = (TF_Library *)(argp1);
  result = (TF_Buffer *)& ((arg1)->op_list);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Buffer, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_TF_Library(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_Library *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_Library (should be 0)");
  result = (TF_Library *)new TF_Library();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_Library, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_Library(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_Library(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_Library(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_Library(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_Library * arg1 = (TF_Library *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_TF_Graph(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_Graph *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_Graph (should be 0)");
  result = (TF_Graph *)new TF_Graph();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_Graph, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TF_Graph_graph_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Graph *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Graph_graph_get" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  result = (Graph *)& ((arg1)->graph);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Graph, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_TF_Graph_refiner_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::ShapeRefiner *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Graph_refiner_get" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  result = (tensorflow::ShapeRefiner *)& ((arg1)->refiner);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__ShapeRefiner, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_Graph_name_map_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  std::unordered_map< tensorflow::string,Node * > *arg2 = (std::unordered_map< tensorflow::string,Node * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Graph_name_map_set" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__unordered_mapT_tensorflow__string_tensorflow__Node_p_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Graph_name_map_set" "', argument " "2"" of type '" "std::unordered_map< tensorflow::string,Node * > *""'"); 
  }
  arg2 = (std::unordered_map< tensorflow::string,Node * > *)(argp2);
  if (arg1) (arg1)->name_map = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Graph_name_map_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unordered_map< tensorflow::string,Node * > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Graph_name_map_get" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  result = (std::unordered_map< tensorflow::string,Node * > *)& ((arg1)->name_map);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__unordered_mapT_tensorflow__string_tensorflow__Node_p_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_Graph_num_sessions_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Graph_num_sessions_set" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_Graph_num_sessions_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->num_sessions = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Graph_num_sessions_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Graph_num_sessions_get" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  result = (int) ((arg1)->num_sessions);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_Graph_delete_requested_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Graph_delete_requested_set" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  ecode2 = SWIG_AsVal_bool(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_Graph_delete_requested_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  if (arg1) (arg1)->delete_requested = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Graph_delete_requested_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Graph_delete_requested_get" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  result = (bool) ((arg1)->delete_requested);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_Graph(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_Graph(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_Graph(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_Graph(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_Graph * arg1 = (TF_Graph *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_new_TF_OperationDescription(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  TF_OperationDescription *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_OperationDescription (should be 3)");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TF_OperationDescription" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TF_OperationDescription" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TF_OperationDescription" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (TF_OperationDescription *)new TF_OperationDescription(arg1,(char const *)arg2,(char const *)arg3);
  
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_OperationDescription, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_TF_OperationDescription_node_builder_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  NodeBuilder *arg2 = (NodeBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationDescription_node_builder_set" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationDescription_node_builder_set" "', argument " "2"" of type '" "NodeBuilder *""'"); 
  }
  arg2 = (NodeBuilder *)(argp2);
  if (arg1) (arg1)->node_builder = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_OperationDescription_node_builder_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  NodeBuilder *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationDescription_node_builder_get" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  result = (NodeBuilder *)& ((arg1)->node_builder);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__NodeBuilder, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_OperationDescription_graph_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  TF_Graph *arg2 = (TF_Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationDescription_graph_set" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_TF_Graph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationDescription_graph_set" "', argument " "2"" of type '" "TF_Graph *""'"); 
  }
  arg2 = (TF_Graph *)(argp2);
  if (arg1) (arg1)->graph = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_OperationDescription_graph_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TF_Graph *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationDescription_graph_get" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  result = (TF_Graph *) ((arg1)->graph);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Graph, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_OperationDescription_colocation_constraints_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  std::vector< tensorflow::string > *arg2 = (std::vector< tensorflow::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationDescription_colocation_constraints_set" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_tensorflow__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_OperationDescription_colocation_constraints_set" "', argument " "2"" of type '" "std::vector< tensorflow::string > *""'"); 
  }
  arg2 = (std::vector< tensorflow::string > *)(argp2);
  if (arg1) (arg1)->colocation_constraints = *arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_OperationDescription_colocation_constraints_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_OperationDescription *arg1 = (TF_OperationDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< tensorflow::string > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_OperationDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_OperationDescription_colocation_constraints_get" "', argument " "1"" of type '" "TF_OperationDescription *""'"); 
  }
  arg1 = (TF_OperationDescription *)(argp1);
  result = (std::vector< tensorflow::string > *)& ((arg1)->colocation_constraints);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_tensorflow__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_OperationDescription(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_OperationDescription(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_OperationDescription(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_OperationDescription(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_OperationDescription * arg1 = (TF_OperationDescription *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_TF_Operation_node_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Operation *arg1 = (TF_Operation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Node *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Operation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Operation_node_get" "', argument " "1"" of type '" "TF_Operation *""'"); 
  }
  arg1 = (TF_Operation *)(argp1);
  result = (Node *)& ((arg1)->node);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Node, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_veto_TF_Operation(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class TF_Operation can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TF_Session(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Session *arg1 = (Session *) 0 ;
  TF_Graph *arg2 = (TF_Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  TF_Session *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_Session (should be 2)");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TF_Session" "', argument " "1"" of type '" "Session *""'"); 
  }
  arg1 = (Session *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TF_Session" "', argument " "2"" of type '" "TF_Graph *""'"); 
  }
  arg2 = (TF_Graph *)(argp2);
  result = (TF_Session *)new TF_Session(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_Session, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static void _wrap_TF_Session_session_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Session *arg1 = (TF_Session *) 0 ;
  Session *arg2 = (Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Session_session_set" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tensorflow__Session, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Session_session_set" "', argument " "2"" of type '" "Session *""'"); 
  }
  arg2 = (Session *)(argp2);
  if (arg1) (arg1)->session = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Session_session_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Session *arg1 = (TF_Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Session *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Session_session_get" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  result = (Session *) ((arg1)->session);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tensorflow__Session, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_Session_graph_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Session *arg1 = (TF_Session *) 0 ;
  TF_Graph *arg2 = (TF_Graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Session_graph_set" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_TF_Graph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_Session_graph_set" "', argument " "2"" of type '" "TF_Graph *""'"); 
  }
  arg2 = (TF_Graph *)(argp2);
  if (arg1) (arg1)->graph = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Session_graph_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Session *arg1 = (TF_Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TF_Graph *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Session_graph_get" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  result = (TF_Graph *) ((arg1)->graph);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Graph, 0 |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static void _wrap_TF_Session_last_num_graph_nodes_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_Session *arg1 = (TF_Session *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Session_last_num_graph_nodes_set" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TF_Session_last_num_graph_nodes_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->last_num_graph_nodes = arg2;
  
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_Session_last_num_graph_nodes_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Session *arg1 = (TF_Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_Session_last_num_graph_nodes_get" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  result = (int) ((arg1)->last_num_graph_nodes);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_Session(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_Session(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_Session(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_Session(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_Session * arg1 = (TF_Session *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static void _wrap_TF_ImportGraphDefOptions_opts_set(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid &info) {
  SWIGV8_HANDLESCOPE();
  
  TF_ImportGraphDefOptions *arg1 = (TF_ImportGraphDefOptions *) 0 ;
  tensorflow::ImportGraphDefOptions arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_ImportGraphDefOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_ImportGraphDefOptions_opts_set" "', argument " "1"" of type '" "TF_ImportGraphDefOptions *""'"); 
  }
  arg1 = (TF_ImportGraphDefOptions *)(argp1);
  {
    res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_tensorflow__ImportGraphDefOptions,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TF_ImportGraphDefOptions_opts_set" "', argument " "2"" of type '" "tensorflow::ImportGraphDefOptions""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TF_ImportGraphDefOptions_opts_set" "', argument " "2"" of type '" "tensorflow::ImportGraphDefOptions""'");
    } else {
      arg2 = *((tensorflow::ImportGraphDefOptions *)(argp2));
    }
  }
  if (arg1) (arg1)->opts = arg2;
  
  
  goto fail;
fail:
  return;
}


static SwigV8ReturnValue _wrap_TF_ImportGraphDefOptions_opts_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_ImportGraphDefOptions *arg1 = (TF_ImportGraphDefOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tensorflow::ImportGraphDefOptions result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_TF_ImportGraphDefOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TF_ImportGraphDefOptions_opts_get" "', argument " "1"" of type '" "TF_ImportGraphDefOptions *""'"); 
  }
  arg1 = (TF_ImportGraphDefOptions *)(argp1);
  result =  ((arg1)->opts);
  jsresult = SWIG_NewPointerObj((new tensorflow::ImportGraphDefOptions((const tensorflow::ImportGraphDefOptions&)(result))), SWIGTYPE_p_tensorflow__ImportGraphDefOptions, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_TF_ImportGraphDefOptions(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_ImportGraphDefOptions *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TF_ImportGraphDefOptions (should be 0)");
  result = (TF_ImportGraphDefOptions *)new TF_ImportGraphDefOptions();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_TF_ImportGraphDefOptions, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TF_ImportGraphDefOptions(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TF_ImportGraphDefOptions(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TF_ImportGraphDefOptions(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_TF_ImportGraphDefOptions(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          TF_ImportGraphDefOptions * arg1 = (TF_ImportGraphDefOptions *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_ExtendSessionGraphHelper(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  TF_Session *arg1 = (TF_Session *) 0 ;
  TF_Status *arg2 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ExtendSessionGraphHelper (should be 1)");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtendSessionGraphHelper" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  {
    arg2 = TF_NewStatus();
  }
  result = (bool)ExtendSessionGraphHelper(arg1,arg2);
  jsresult = SWIG_From_bool((bool)(result));
  {
    if (TF_GetCode(arg2) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg2));
    }
  }
  
  {
    TF_DeleteStatus(arg2);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_V8_GetInstancePtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  v8::Handle< v8::Value > arg1 ;
  void **arg2 = (void **) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_V8_GetInstancePtr (should be 2)");
  
  arg1 = args[0];
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "V8_GetInstancePtr" "', argument " "2"" of type '" "void **""'"); 
  }
  arg2 = (void **)(argp2);
  result = (int)V8_GetInstancePtr(arg1,arg2);
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CSession__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_Graph *arg1 = (TF_Graph *) 0 ;
  TF_Status *arg2 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CSession *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CSession__SWIG_0 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CSession" "', argument " "1"" of type '" "TF_Graph *""'"); 
  }
  arg1 = (TF_Graph *)(argp1);
  {
    arg2 = TF_NewStatus();
  }
  result = (CSession *)new CSession(arg1,arg2);
  
  
  {
    TF_DeleteStatus(arg2);
  }
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_CSession, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CSession__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  TF_Session *arg1 = (TF_Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CSession *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CSession__SWIG_1 (should be 1)");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_TF_Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CSession" "', argument " "1"" of type '" "TF_Session *""'"); 
  }
  arg1 = (TF_Session *)(argp1);
  result = (CSession *)new CSession(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_CSession, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CSession(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_CSession__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_CSession__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_CSession__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_CSession__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_CSession");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_CSession(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_CSession(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_CSession(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_CSession(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          CSession * arg1 = (CSession *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_CSession_SetInputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  CSession *arg1 = (CSession *) 0 ;
  SwigValueWrapper< std::vector< std::pair< TF_Operation *,TF_Tensor * > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CSession_SetInputs (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CSession_SetInputs" "', argument " "1"" of type '" "CSession *""'"); 
  }
  arg1 = (CSession *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_std__pairT_TF_Operation_p_TF_Tensor_p_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CSession_SetInputs" "', argument " "2"" of type '" "std::vector< std::pair< TF_Operation *,TF_Tensor * > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CSession_SetInputs" "', argument " "2"" of type '" "std::vector< std::pair< TF_Operation *,TF_Tensor * > >""'");
    } else {
      arg2 = *((std::vector< std::pair< TF_Operation *,TF_Tensor * > > *)(argp2));
    }
  }
  (arg1)->SetInputs(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CSession_SetOutputs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  CSession *arg1 = (CSession *) 0 ;
  SwigValueWrapper< std::vector< TF_Operation * > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CSession_SetOutputs (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CSession_SetOutputs" "', argument " "1"" of type '" "CSession *""'"); 
  }
  arg1 = (CSession *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_TF_Operation_p_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CSession_SetOutputs" "', argument " "2"" of type '" "std::vector< TF_Operation * >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CSession_SetOutputs" "', argument " "2"" of type '" "std::vector< TF_Operation * >""'");
    } else {
      arg2 = *((std::vector< TF_Operation * > *)(argp2));
    }
  }
  (arg1)->SetOutputs(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CSession_SetTargets(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  CSession *arg1 = (CSession *) 0 ;
  v8::Local< v8::Array > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CSession_SetTargets (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CSession_SetTargets" "', argument " "1"" of type '" "CSession *""'"); 
  }
  arg1 = (CSession *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_v8__LocalT_v8__Array_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CSession_SetTargets" "', argument " "2"" of type '" "v8::Local< v8::Array >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CSession_SetTargets" "', argument " "2"" of type '" "v8::Local< v8::Array >""'");
    } else {
      arg2 = *((v8::Local< v8::Array > *)(argp2));
    }
  }
  (arg1)->SetTargets(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CSession_Run(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  CSession *arg1 = (CSession *) 0 ;
  TF_Status *arg2 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CSession_Run (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CSession_Run" "', argument " "1"" of type '" "CSession *""'"); 
  }
  arg1 = (CSession *)(argp1);
  {
    arg2 = TF_NewStatus();
  }
  (arg1)->Run(arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg2) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg2));
    }
  }
  
  {
    TF_DeleteStatus(arg2);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CSession_CloseAndDelete(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  CSession *arg1 = (CSession *) 0 ;
  TF_Status *arg2 = (TF_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CSession_CloseAndDelete (should be 0)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CSession_CloseAndDelete" "', argument " "1"" of type '" "CSession *""'"); 
  }
  arg1 = (CSession *)(argp1);
  {
    arg2 = TF_NewStatus();
  }
  (arg1)->CloseAndDelete(arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if (TF_GetCode(arg2) != TF_OK) {
      SWIG_exception_fail(SWIG_ERROR, TF_Message(arg2));
    }
  }
  
  {
    TF_DeleteStatus(arg2);
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CSession_output_tensor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  CSession *arg1 = (CSession *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TF_Tensor *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CSession_output_tensor (should be 1)");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CSession, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CSession_output_tensor" "', argument " "1"" of type '" "CSession *""'"); 
  }
  arg1 = (CSession *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CSession_output_tensor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (TF_Tensor *)(arg1)->output_tensor(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TF_Tensor, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_tensorflow__OpRegistryTo_p_tensorflow__OpRegistryInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((tensorflow::OpRegistryInterface *)  ((tensorflow::OpRegistry *) x));
}
static void *_p_tensorflow__OpListOpRegistryTo_p_tensorflow__OpRegistryInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((tensorflow::OpRegistryInterface *)  ((tensorflow::OpListOpRegistry *) x));
}
static void *_p_tensorflow__TensorProtoTo_p_google__protobuf__Message(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::Message *)  ((tensorflow::TensorProto *) x));
}
static void *_p_tensorflow__OpDef_ArgDefTo_p_google__protobuf__Message(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::Message *)  ((tensorflow::OpDef_ArgDef *) x));
}
static void *_p_tensorflow__OpDef_AttrDefTo_p_google__protobuf__Message(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::Message *)  ((tensorflow::OpDef_AttrDef *) x));
}
static void *_p_tensorflow__OpDeprecationTo_p_google__protobuf__Message(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::Message *)  ((tensorflow::OpDeprecation *) x));
}
static void *_p_tensorflow__NameAttrListTo_p_google__protobuf__Message(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::Message *)  ((tensorflow::NameAttrList *) x));
}
static void *_p_tensorflow__VariableDefTo_p_google__protobuf__Message(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::Message *)  ((tensorflow::VariableDef *) x));
}
static void *_p_tensorflow__AttrValueTo_p_google__protobuf__Message(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::Message *)  ((tensorflow::AttrValue *) x));
}
static void *_p_tensorflow__OpDefTo_p_google__protobuf__Message(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::Message *)  ((tensorflow::OpDef *) x));
}
static void *_p_tensorflow__OpListTo_p_google__protobuf__Message(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::Message *)  ((tensorflow::OpList *) x));
}
static void *_p_tensorflow__NodeDefTo_p_google__protobuf__Message(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::Message *)  ((tensorflow::NodeDef *) x));
}
static void *_p_tensorflow__SaveSliceInfoDefTo_p_google__protobuf__Message(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::Message *)  ((tensorflow::SaveSliceInfoDef *) x));
}
static void *_p_tensorflow__AttrValue_ListValueTo_p_google__protobuf__Message(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::Message *)  ((tensorflow::AttrValue_ListValue *) x));
}
static void *_p_tensorflow__EnvWrapperTo_p_tensorflow__Env(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((tensorflow::Env *)  ((tensorflow::EnvWrapper *) x));
}
static void *_p_tensorflow__TensorProtoTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *) (google::protobuf::Message *) ((tensorflow::TensorProto *) x));
}
static void *_p_tensorflow__OpDef_ArgDefTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *) (google::protobuf::Message *) ((tensorflow::OpDef_ArgDef *) x));
}
static void *_p_tensorflow__OpDef_AttrDefTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *) (google::protobuf::Message *) ((tensorflow::OpDef_AttrDef *) x));
}
static void *_p_tensorflow__OpDeprecationTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *) (google::protobuf::Message *) ((tensorflow::OpDeprecation *) x));
}
static void *_p_tensorflow__NameAttrListTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *) (google::protobuf::Message *) ((tensorflow::NameAttrList *) x));
}
static void *_p_tensorflow__VariableDefTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *) (google::protobuf::Message *) ((tensorflow::VariableDef *) x));
}
static void *_p_tensorflow__AttrValueTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *) (google::protobuf::Message *) ((tensorflow::AttrValue *) x));
}
static void *_p_tensorflow__OpDefTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *) (google::protobuf::Message *) ((tensorflow::OpDef *) x));
}
static void *_p_tensorflow__OpListTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *) (google::protobuf::Message *) ((tensorflow::OpList *) x));
}
static void *_p_google__protobuf__MessageTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *)  ((google::protobuf::Message *) x));
}
static void *_p_tensorflow__NodeDefTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *) (google::protobuf::Message *) ((tensorflow::NodeDef *) x));
}
static void *_p_tensorflow__SaveSliceInfoDefTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *) (google::protobuf::Message *) ((tensorflow::SaveSliceInfoDef *) x));
}
static void *_p_tensorflow__AttrValue_ListValueTo_p_google__protobuf__MessageLite(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((google::protobuf::MessageLite *) (google::protobuf::Message *) ((tensorflow::AttrValue_ListValue *) x));
}
static void *_p_______TF_ManagedBufferTo_p_tensorflow__TensorBuffer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((tensorflow::TensorBuffer *)  ((    ::TF_ManagedBuffer *) x));
}
static swig_type_info _swigt__p_AllocationAttributes = {"_p_AllocationAttributes", "AllocationAttributes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AllocationDescription = {"_p_AllocationDescription", "AllocationDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Allocator = {"_p_Allocator", "Allocator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArgDef = {"_p_ArgDef", "ArgDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AttrDef = {"_p_AttrDef", "AttrDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CSession = {"_p_CSession", "CSession *|p_CSession", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConfigProto = {"_p_ConfigProto", "ConfigProto *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DataTypeVector = {"_p_DataTypeVector", "DataTypeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EdgeSet = {"_p_EdgeSet", "EdgeSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EdgeSet__const_iterator = {"_p_EdgeSet__const_iterator", "EdgeSet::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FileStatistics = {"_p_FileStatistics", "FileStatistics *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FileSystemRegistry__Factory = {"_p_FileSystemRegistry__Factory", "FileSystemRegistry::Factory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GraphDef = {"_p_GraphDef", "GraphDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ListValue = {"_p_ListValue", "ListValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodeDefBuilder = {"_p_NodeDefBuilder", "NodeDefBuilder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpRegistrationDataFactory = {"_p_OpRegistrationDataFactory", "OpRegistrationDataFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpRegistryInterface = {"_p_OpRegistryInterface", "OpRegistryInterface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Reflection = {"_p_Reflection", "Reflection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RunMetadata = {"_p_RunMetadata", "RunMetadata *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RunOptions = {"_p_RunOptions", "RunOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_AttrMetadata = {"_p_TF_AttrMetadata", "TF_AttrMetadata *|p_TF_AttrMetadata", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_AttrType = {"_p_TF_AttrType", "enum TF_AttrType *|TF_AttrType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_Buffer = {"_p_TF_Buffer", "TF_Buffer *|p_TF_Buffer", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_Code = {"_p_TF_Code", "enum TF_Code *|TF_Code *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_DataType = {"_p_TF_DataType", "TF_DataType *|TF_DataType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_DeprecatedSession = {"_p_TF_DeprecatedSession", "TF_DeprecatedSession *|p_TF_DeprecatedSession", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_Graph = {"_p_TF_Graph", "p_TF_Graph|TF_Graph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_ImportGraphDefOptions = {"_p_TF_ImportGraphDefOptions", "TF_ImportGraphDefOptions *|p_TF_ImportGraphDefOptions", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_Input = {"_p_TF_Input", "TF_Input *|p_TF_Input", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_Library = {"_p_TF_Library", "p_TF_Library|TF_Library *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_Operation = {"_p_TF_Operation", "TF_Operation *|p_TF_Operation", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_OperationDescription = {"_p_TF_OperationDescription", "TF_OperationDescription *|p_TF_OperationDescription", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_Output = {"_p_TF_Output", "p_TF_Output|TF_Output *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_Session = {"_p_TF_Session", "TF_Session *|p_TF_Session", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_SessionOptions = {"_p_TF_SessionOptions", "TF_SessionOptions *|p_TF_SessionOptions", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_Status = {"_p_TF_Status", "p_TF_Status|TF_Status *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TF_Tensor = {"_p_TF_Tensor", "TF_Tensor *|p_TF_Tensor", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TensorDescription = {"_p_TensorDescription", "TensorDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TensorShapeProto = {"_p_TensorShapeProto", "TensorShapeProto *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VersionDef = {"_p_VersionDef", "VersionDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Watcher = {"_p_Watcher", "Watcher *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_condition_variable = {"_p_condition_variable", "condition_variable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_size_t__void = {"_p_f_p_void_size_t__void", "void (*)(void *,size_t)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_size_t_p_void__void = {"_p_f_p_void_size_t_p_void__void", "void (*)(void *,size_t,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__string__void = {"_p_f_r_q_const__string__void", "void (*)(string const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__Arena = {"_p_google__protobuf__Arena", "::google::protobuf::Arena *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__Descriptor = {"_p_google__protobuf__Descriptor", "google::protobuf::Descriptor *|::google::protobuf::Descriptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__EnumDescriptor = {"_p_google__protobuf__EnumDescriptor", "::google::protobuf::EnumDescriptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__EnumValueDescriptor = {"_p_google__protobuf__EnumValueDescriptor", "google::protobuf::EnumValueDescriptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__FieldDescriptor = {"_p_google__protobuf__FieldDescriptor", "google::protobuf::FieldDescriptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__MapT_std__string___tensorflow__AttrValue_t = {"_p_google__protobuf__MapT_std__string___tensorflow__AttrValue_t", "::google::protobuf::Map< ::std::string,::tensorflow::AttrValue > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__Message = {"_p_google__protobuf__Message", "p_google__protobuf__Message|google::protobuf::Message *|::google::protobuf::Message *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__MessageFactory = {"_p_google__protobuf__MessageFactory", "google::protobuf::MessageFactory *|p_google__protobuf__MessageFactory", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__MessageLite = {"_p_google__protobuf__MessageLite", "google::protobuf::MessageLite *|p_google__protobuf__MessageLite", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__Metadata = {"_p_google__protobuf__Metadata", "google::protobuf::Metadata *|::google::protobuf::Metadata *|p_google__protobuf__Metadata", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__OneofDescriptor = {"_p_google__protobuf__OneofDescriptor", "google::protobuf::OneofDescriptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__Reflection = {"_p_google__protobuf__Reflection", "google::protobuf::Reflection *|google::protobuf::Message::Reflection *|p_google__protobuf__Reflection", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedFieldT_bool_t = {"_p_google__protobuf__RepeatedFieldT_bool_t", "::google::protobuf::RepeatedField< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedFieldT_double_t = {"_p_google__protobuf__RepeatedFieldT_double_t", "::google::protobuf::RepeatedField< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedFieldT_float_t = {"_p_google__protobuf__RepeatedFieldT_float_t", "::google::protobuf::RepeatedField< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedFieldT_int32_t_t = {"_p_google__protobuf__RepeatedFieldT_int32_t_t", "google::protobuf::RepeatedField< int32_t > *|::google::protobuf::RepeatedField< ::google::protobuf::int32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedFieldT_int64_t_t = {"_p_google__protobuf__RepeatedFieldT_int64_t_t", "google::protobuf::RepeatedField< int64_t > *|::google::protobuf::RepeatedField< ::google::protobuf::int64 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedFieldT_int_t = {"_p_google__protobuf__RepeatedFieldT_int_t", "::google::protobuf::RepeatedField< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedPtrFieldT_std__string_t = {"_p_google__protobuf__RepeatedPtrFieldT_std__string_t", "::google::protobuf::RepeatedPtrField< ::std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_ArgDef_t = {"_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_ArgDef_t", "::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_ArgDef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_AttrDef_t = {"_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_AttrDef_t", "::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef_AttrDef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_t = {"_p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_t", "::google::protobuf::RepeatedPtrField< ::tensorflow::OpDef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__ResourceHandle_t = {"_p_google__protobuf__RepeatedPtrFieldT_tensorflow__ResourceHandle_t", "::google::protobuf::RepeatedPtrField< ::tensorflow::ResourceHandle > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorProto_t = {"_p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorProto_t", "::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorShapeProto_t = {"_p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorShapeProto_t", "::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__UnknownFieldSet = {"_p_google__protobuf__UnknownFieldSet", "google::protobuf::UnknownFieldSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_ListValue_t = {"_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_ListValue_t", "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue_ListValue > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_t = {"_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_t", "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::AttrValue > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NameAttrList_t = {"_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NameAttrList_t", "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NameAttrList > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NodeDef_t = {"_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NodeDef_t", "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::NodeDef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_ArgDef_t = {"_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_ArgDef_t", "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_ArgDef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_AttrDef_t = {"_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_AttrDef_t", "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef_AttrDef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_t = {"_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_t", "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDeprecation_t = {"_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDeprecation_t", "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpDeprecation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpList_t = {"_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpList_t", "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::OpList > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__SaveSliceInfoDef_t = {"_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__SaveSliceInfoDef_t", "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::SaveSliceInfoDef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__TensorProto_t = {"_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__TensorProto_t", "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::TensorProto > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__VariableDef_t = {"_p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__VariableDef_t", "::google::protobuf::internal::ExplicitlyConstructed< tensorflow::VariableDef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__io__CodedInputStream = {"_p_google__protobuf__io__CodedInputStream", "google::protobuf::io::CodedInputStream *|::google::protobuf::io::CodedInputStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__io__CodedOutputStream = {"_p_google__protobuf__io__CodedOutputStream", "google::protobuf::io::CodedOutputStream *|::google::protobuf::io::CodedOutputStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__io__ZeroCopyInputStream = {"_p_google__protobuf__io__ZeroCopyInputStream", "google::protobuf::io::ZeroCopyInputStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_google__protobuf__io__ZeroCopyOutputStream = {"_p_google__protobuf__io__ZeroCopyOutputStream", "google::protobuf::io::ZeroCopyOutputStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gtl__ArraySliceT_int32_t = {"_p_gtl__ArraySliceT_int32_t", "gtl::ArraySlice< int32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gtl__ArraySliceT_int64_t = {"_p_gtl__ArraySliceT_int64_t", "gtl::ArraySlice< int64 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gtl__ArraySliceT_tensorflow__TensorShape_t = {"_p_gtl__ArraySliceT_tensorflow__TensorShape_t", "gtl::ArraySlice< tensorflow::TensorShape > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gtl__InlinedVectorT_int64_4_t = {"_p_gtl__InlinedVectorT_int64_4_t", "gtl::InlinedVector< int64,4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int16_t = {"_p_int16_t", "google::protobuf::int16 *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32 = {"_p_int32", "int32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *|google::protobuf::int32 *|::google::protobuf::int32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64 = {"_p_int64", "int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *|google::protobuf::int64 *|::google::protobuf::int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int8_t = {"_p_int8_t", "google::protobuf::int8 *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mutex_lock = {"_p_mutex_lock", "mutex_lock *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_FileSystem = {"_p_p_FileSystem", "FileSystem **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_OpRegistrationData = {"_p_p_OpRegistrationData", "OpRegistrationData **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_TF_Buffer = {"_p_p_TF_Buffer", "TF_Buffer **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_TF_Operation = {"_p_p_TF_Operation", "TF_Operation **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_TF_Tensor = {"_p_p_TF_Tensor", "TF_Tensor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int64_t = {"_p_p_int64_t", "int64_t **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_tensorflow__Edge = {"_p_p_tensorflow__Edge", "tensorflow::Edge **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_tensorflow__Node = {"_p_p_tensorflow__Node", "tensorflow::Node **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_tensorflow__OpDef = {"_p_p_tensorflow__OpDef", "tensorflow::OpDef **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_tensorflow__Session = {"_p_p_tensorflow__Session", "tensorflow::Session **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shape_inference__InferenceContext = {"_p_shape_inference__InferenceContext", "shape_inference::InferenceContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shape_inference__ShapeHandle = {"_p_shape_inference__ShapeHandle", "shape_inference::ShapeHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_tensorflow__Status_fOpRegistrationData_pF_t = {"_p_std__functionT_tensorflow__Status_fOpRegistrationData_pF_t", "std::function< tensorflow::Status (OpRegistrationData *) > *|tensorflow::OpRegistry::OpRegistrationDataFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_tensorflow__Status_ftensorflow__Status_const_R_tensorflow__OpDef_const_RF_t = {"_p_std__functionT_tensorflow__Status_ftensorflow__Status_const_R_tensorflow__OpDef_const_RF_t", "tensorflow::OpRegistry::Watcher *|std::function< tensorflow::Status (tensorflow::Status const &,tensorflow::OpDef const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fF_t = {"_p_std__functionT_void_fF_t", "std::function< void () > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_ftensorflow__Status_const_RF_t = {"_p_std__functionT_void_ftensorflow__Status_const_RF_t", "tensorflow::StatusCallback *|std::function< void (tensorflow::Status const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "::std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unique_ptrT_RandomAccessFile_t = {"_p_std__unique_ptrT_RandomAccessFile_t", "std::unique_ptr< RandomAccessFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unique_ptrT_ReadOnlyMemoryRegion_t = {"_p_std__unique_ptrT_ReadOnlyMemoryRegion_t", "std::unique_ptr< ReadOnlyMemoryRegion > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unique_ptrT_WritableFile_t = {"_p_std__unique_ptrT_WritableFile_t", "std::unique_ptr< WritableFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_tensorflow__string_tensorflow__Node_p_t = {"_p_std__unordered_mapT_tensorflow__string_tensorflow__Node_p_t", "std::unordered_map< tensorflow::string,Node * > *|std::unordered_map< tensorflow::string,tensorflow::Node * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_TF_Operation_p_t = {"_p_std__vectorT_TF_Operation_p_t", "std::vector< TF_Operation * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_google__protobuf__FieldDescriptor_const_p_t = {"_p_std__vectorT_google__protobuf__FieldDescriptor_const_p_t", "std::vector< google::protobuf::FieldDescriptor const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_TF_Operation_p_TF_Tensor_p_t_t = {"_p_std__vectorT_std__pairT_TF_Operation_p_TF_Tensor_p_t_t", "std::vector< std::pair< TF_Operation *,TF_Tensor * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_std__string_tensorflow__Tensor_t_t = {"_p_std__vectorT_std__pairT_std__string_tensorflow__Tensor_t_t", "std::vector< std::pair< std::string,tensorflow::Tensor > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_tensorflow__string_tensorflow__Tensor_t_t = {"_p_std__vectorT_std__pairT_tensorflow__string_tensorflow__Tensor_t_t", "std::vector< std::pair< tensorflow::string,tensorflow::Tensor > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_tensorflow__OpDef_t = {"_p_std__vectorT_tensorflow__OpDef_t", "std::vector< tensorflow::OpDef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_tensorflow__Tensor_t = {"_p_std__vectorT_tensorflow__Tensor_t", "std::vector< tensorflow::Tensor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_tensorflow__string_t = {"_p_std__vectorT_tensorflow__string_t", "std::vector< tensorflow::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_string = {"_p_string", "string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__AttrValue = {"_p_tensorflow__AttrValue", "tensorflow::AttrValue *|::tensorflow::AttrValue *|p_tensorflow__AttrValue", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__AttrValue_ListValue = {"_p_tensorflow__AttrValue_ListValue", "tensorflow::AttrValue_ListValue *|::tensorflow::AttrValue_ListValue *|p_tensorflow__AttrValue_ListValue", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__DataType = {"_p_tensorflow__DataType", "enum tensorflow::DataType *|tensorflow::DataType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__Edge = {"_p_tensorflow__Edge", "tensorflow::Edge *|p_tensorflow__Edge", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__Env = {"_p_tensorflow__Env", "tensorflow::Env *|p_tensorflow__Env", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__EnvWrapper = {"_p_tensorflow__EnvWrapper", "p_tensorflow__EnvWrapper|tensorflow::EnvWrapper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__Graph = {"_p_tensorflow__Graph", "p_tensorflow__Graph|tensorflow::Graph *|Graph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__ImportGraphDefOptions = {"_p_tensorflow__ImportGraphDefOptions", "tensorflow::ImportGraphDefOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__NameAttrList = {"_p_tensorflow__NameAttrList", "p_tensorflow__NameAttrList|::tensorflow::NameAttrList *|tensorflow::NameAttrList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__NeighborIter = {"_p_tensorflow__NeighborIter", "tensorflow::NeighborIter *|p_tensorflow__NeighborIter", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__Node = {"_p_tensorflow__Node", "p_tensorflow__Node|tensorflow::Node *|Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__NodeBuilder = {"_p_tensorflow__NodeBuilder", "p_tensorflow__NodeBuilder|tensorflow::NodeBuilder *|NodeBuilder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__NodeBuilder__NodeOut = {"_p_tensorflow__NodeBuilder__NodeOut", "tensorflow::NodeBuilder::NodeOut *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__NodeDef = {"_p_tensorflow__NodeDef", "tensorflow::NodeDef *|p_tensorflow__NodeDef", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__NodeIter = {"_p_tensorflow__NodeIter", "tensorflow::NodeIter *|p_tensorflow__NodeIter", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__OpDef = {"_p_tensorflow__OpDef", "tensorflow::OpDef *|::tensorflow::OpDef *|p_tensorflow__OpDef", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__OpDef_ArgDef = {"_p_tensorflow__OpDef_ArgDef", "p_tensorflow__OpDef_ArgDef|tensorflow::OpDef_ArgDef *|::tensorflow::OpDef_ArgDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__OpDef_AttrDef = {"_p_tensorflow__OpDef_AttrDef", "tensorflow::OpDef_AttrDef *|p_tensorflow__OpDef_AttrDef|::tensorflow::OpDef_AttrDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__OpDeprecation = {"_p_tensorflow__OpDeprecation", "p_tensorflow__OpDeprecation|::tensorflow::OpDeprecation *|tensorflow::OpDeprecation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__OpList = {"_p_tensorflow__OpList", "tensorflow::OpList *|p_tensorflow__OpList", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__OpListOpRegistry = {"_p_tensorflow__OpListOpRegistry", "p_tensorflow__OpListOpRegistry|tensorflow::OpListOpRegistry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__OpRegistry = {"_p_tensorflow__OpRegistry", "p_tensorflow__OpRegistry|tensorflow::OpRegistry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__OpRegistryInterface = {"_p_tensorflow__OpRegistryInterface", "p_tensorflow__OpRegistryInterface|tensorflow::OpRegistryInterface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__ResourceHandle = {"_p_tensorflow__ResourceHandle", "::tensorflow::ResourceHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__SaveSliceInfoDef = {"_p_tensorflow__SaveSliceInfoDef", "::tensorflow::SaveSliceInfoDef *|tensorflow::SaveSliceInfoDef *|p_tensorflow__SaveSliceInfoDef", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__Session = {"_p_tensorflow__Session", "tensorflow::Session *|Session *|p_tensorflow__Session", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__SessionOptions = {"_p_tensorflow__SessionOptions", "tensorflow::SessionOptions *|SessionOptions *|p_tensorflow__SessionOptions", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__ShapeRefiner = {"_p_tensorflow__ShapeRefiner", "p_tensorflow__ShapeRefiner|tensorflow::ShapeRefiner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__Status = {"_p_tensorflow__Status", "p_tensorflow__Status|tensorflow::Status *|Status *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__StringPiece = {"_p_tensorflow__StringPiece", "tensorflow::StringPiece *|p_tensorflow__StringPiece", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__Tensor = {"_p_tensorflow__Tensor", "tensorflow::Tensor *|p_tensorflow__Tensor", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__TensorBuffer = {"_p_tensorflow__TensorBuffer", "p_tensorflow__TensorBuffer|tensorflow::TensorBuffer *|TensorBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_______TF_ManagedBuffer = {"_p_______TF_ManagedBuffer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_tensorflow__TensorCApi = {"_p_tensorflow__TensorCApi", "p_tensorflow__TensorCApi", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__TensorProto = {"_p_tensorflow__TensorProto", "p_tensorflow__TensorProto|::tensorflow::TensorProto *|tensorflow::TensorProto *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__TensorShape = {"_p_tensorflow__TensorShape", "p_tensorflow__TensorShape|tensorflow::TensorShape *|TensorShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__TensorShapeDim = {"_p_tensorflow__TensorShapeDim", "tensorflow::TensorShapeDim *|p_tensorflow__TensorShapeDim", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__TensorShapeIter = {"_p_tensorflow__TensorShapeIter", "tensorflow::TensorShapeIter *|p_tensorflow__TensorShapeIter", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__TensorShapeProto = {"_p_tensorflow__TensorShapeProto", "::tensorflow::TensorShapeProto *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__TensorShapeUtils = {"_p_tensorflow__TensorShapeUtils", "p_tensorflow__TensorShapeUtils", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__Thread = {"_p_tensorflow__Thread", "p_tensorflow__Thread|tensorflow::Thread *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__ThreadOptions = {"_p_tensorflow__ThreadOptions", "tensorflow::ThreadOptions *|p_tensorflow__ThreadOptions", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__VariableDef = {"_p_tensorflow__VariableDef", "tensorflow::VariableDef *|p_tensorflow__VariableDef", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__error__Code = {"_p_tensorflow__error__Code", "tensorflow::error::Code *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__gtl__ArraySliceT_tensorflow__NodeBuilder__NodeOut_t = {"_p_tensorflow__gtl__ArraySliceT_tensorflow__NodeBuilder__NodeOut_t", "tensorflow::gtl::ArraySlice< tensorflow::NodeBuilder::NodeOut > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__gtl__ArraySliceT_tensorflow__Node_p_t = {"_p_tensorflow__gtl__ArraySliceT_tensorflow__Node_p_t", "tensorflow::gtl::ArraySlice< tensorflow::Node * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t = {"_p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t", "tensorflow::gtl::iterator_range< tensorflow::NeighborIter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__gtl__iterator_rangeT_tensorflow__NodeIter_t = {"_p_tensorflow__gtl__iterator_rangeT_tensorflow__NodeIter_t", "tensorflow::gtl::iterator_range< tensorflow::NodeIter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__protobuf__Message = {"_p_tensorflow__protobuf__Message", "::tensorflow::protobuf::Message *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__protobuf__MessageLite = {"_p_tensorflow__protobuf__MessageLite", "::tensorflow::protobuf::MessageLite *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__register_op__OpDefBuilderReceiver = {"_p_tensorflow__register_op__OpDefBuilderReceiver", "p_tensorflow__register_op__OpDefBuilderReceiver", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__register_op__OpDefBuilderWrapperT_false_t = {"_p_tensorflow__register_op__OpDefBuilderWrapperT_false_t", "tensorflow::register_op::OpDefBuilderWrapper< false > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tensorflow__register_op__OpDefBuilderWrapperT_true_t = {"_p_tensorflow__register_op__OpDefBuilderWrapperT_true_t", "tensorflow::register_op::OpDefBuilderWrapper< true > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16_t = {"_p_uint16_t", "google::protobuf::uint16 *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *|google::protobuf::uint32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64 = {"_p_uint64", "uint64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *|google::protobuf::uint64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "google::protobuf::uint8 *|::google::protobuf::uint8 *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|google::protobuf::uint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_v8__LocalT_v8__Array_t = {"_p_v8__LocalT_v8__Array_t", "v8::Local< v8::Array > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AllocationAttributes,
  &_swigt__p_AllocationDescription,
  &_swigt__p_Allocator,
  &_swigt__p_ArgDef,
  &_swigt__p_AttrDef,
  &_swigt__p_CSession,
  &_swigt__p_ConfigProto,
  &_swigt__p_DataTypeVector,
  &_swigt__p_EdgeSet,
  &_swigt__p_EdgeSet__const_iterator,
  &_swigt__p_FileStatistics,
  &_swigt__p_FileSystemRegistry__Factory,
  &_swigt__p_GraphDef,
  &_swigt__p_ListValue,
  &_swigt__p_NodeDefBuilder,
  &_swigt__p_OpRegistrationDataFactory,
  &_swigt__p_OpRegistryInterface,
  &_swigt__p_Reflection,
  &_swigt__p_RunMetadata,
  &_swigt__p_RunOptions,
  &_swigt__p_TF_AttrMetadata,
  &_swigt__p_TF_AttrType,
  &_swigt__p_TF_Buffer,
  &_swigt__p_TF_Code,
  &_swigt__p_TF_DataType,
  &_swigt__p_TF_DeprecatedSession,
  &_swigt__p_TF_Graph,
  &_swigt__p_TF_ImportGraphDefOptions,
  &_swigt__p_TF_Input,
  &_swigt__p_TF_Library,
  &_swigt__p_TF_Operation,
  &_swigt__p_TF_OperationDescription,
  &_swigt__p_TF_Output,
  &_swigt__p_TF_Session,
  &_swigt__p_TF_SessionOptions,
  &_swigt__p_TF_Status,
  &_swigt__p_TF_Tensor,
  &_swigt__p_TensorDescription,
  &_swigt__p_TensorShapeProto,
  &_swigt__p_VersionDef,
  &_swigt__p_Watcher,
  &_swigt__p_______TF_ManagedBuffer,
  &_swigt__p_char,
  &_swigt__p_condition_variable,
  &_swigt__p_f_p_void_size_t__void,
  &_swigt__p_f_p_void_size_t_p_void__void,
  &_swigt__p_f_r_q_const__string__void,
  &_swigt__p_float,
  &_swigt__p_google__protobuf__Arena,
  &_swigt__p_google__protobuf__Descriptor,
  &_swigt__p_google__protobuf__EnumDescriptor,
  &_swigt__p_google__protobuf__EnumValueDescriptor,
  &_swigt__p_google__protobuf__FieldDescriptor,
  &_swigt__p_google__protobuf__MapT_std__string___tensorflow__AttrValue_t,
  &_swigt__p_google__protobuf__Message,
  &_swigt__p_google__protobuf__MessageFactory,
  &_swigt__p_google__protobuf__MessageLite,
  &_swigt__p_google__protobuf__Metadata,
  &_swigt__p_google__protobuf__OneofDescriptor,
  &_swigt__p_google__protobuf__Reflection,
  &_swigt__p_google__protobuf__RepeatedFieldT_bool_t,
  &_swigt__p_google__protobuf__RepeatedFieldT_double_t,
  &_swigt__p_google__protobuf__RepeatedFieldT_float_t,
  &_swigt__p_google__protobuf__RepeatedFieldT_int32_t_t,
  &_swigt__p_google__protobuf__RepeatedFieldT_int64_t_t,
  &_swigt__p_google__protobuf__RepeatedFieldT_int_t,
  &_swigt__p_google__protobuf__RepeatedPtrFieldT_std__string_t,
  &_swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_ArgDef_t,
  &_swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_AttrDef_t,
  &_swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_t,
  &_swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__ResourceHandle_t,
  &_swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorProto_t,
  &_swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorShapeProto_t,
  &_swigt__p_google__protobuf__UnknownFieldSet,
  &_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_ListValue_t,
  &_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_t,
  &_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NameAttrList_t,
  &_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NodeDef_t,
  &_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_ArgDef_t,
  &_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_AttrDef_t,
  &_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_t,
  &_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDeprecation_t,
  &_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpList_t,
  &_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__SaveSliceInfoDef_t,
  &_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__TensorProto_t,
  &_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__VariableDef_t,
  &_swigt__p_google__protobuf__io__CodedInputStream,
  &_swigt__p_google__protobuf__io__CodedOutputStream,
  &_swigt__p_google__protobuf__io__ZeroCopyInputStream,
  &_swigt__p_google__protobuf__io__ZeroCopyOutputStream,
  &_swigt__p_gtl__ArraySliceT_int32_t,
  &_swigt__p_gtl__ArraySliceT_int64_t,
  &_swigt__p_gtl__ArraySliceT_tensorflow__TensorShape_t,
  &_swigt__p_gtl__InlinedVectorT_int64_4_t,
  &_swigt__p_int,
  &_swigt__p_int16_t,
  &_swigt__p_int32,
  &_swigt__p_int32_t,
  &_swigt__p_int64,
  &_swigt__p_int64_t,
  &_swigt__p_int8_t,
  &_swigt__p_mutex_lock,
  &_swigt__p_p_FileSystem,
  &_swigt__p_p_OpRegistrationData,
  &_swigt__p_p_TF_Buffer,
  &_swigt__p_p_TF_Operation,
  &_swigt__p_p_TF_Tensor,
  &_swigt__p_p_char,
  &_swigt__p_p_int64_t,
  &_swigt__p_p_tensorflow__Edge,
  &_swigt__p_p_tensorflow__Node,
  &_swigt__p_p_tensorflow__OpDef,
  &_swigt__p_p_tensorflow__Session,
  &_swigt__p_p_void,
  &_swigt__p_shape_inference__InferenceContext,
  &_swigt__p_shape_inference__ShapeHandle,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__functionT_tensorflow__Status_fOpRegistrationData_pF_t,
  &_swigt__p_std__functionT_tensorflow__Status_ftensorflow__Status_const_R_tensorflow__OpDef_const_RF_t,
  &_swigt__p_std__functionT_void_fF_t,
  &_swigt__p_std__functionT_void_ftensorflow__Status_const_RF_t,
  &_swigt__p_std__istream,
  &_swigt__p_std__ostream,
  &_swigt__p_std__string,
  &_swigt__p_std__unique_ptrT_RandomAccessFile_t,
  &_swigt__p_std__unique_ptrT_ReadOnlyMemoryRegion_t,
  &_swigt__p_std__unique_ptrT_WritableFile_t,
  &_swigt__p_std__unordered_mapT_tensorflow__string_tensorflow__Node_p_t,
  &_swigt__p_std__vectorT_TF_Operation_p_t,
  &_swigt__p_std__vectorT_google__protobuf__FieldDescriptor_const_p_t,
  &_swigt__p_std__vectorT_std__pairT_TF_Operation_p_TF_Tensor_p_t_t,
  &_swigt__p_std__vectorT_std__pairT_std__string_tensorflow__Tensor_t_t,
  &_swigt__p_std__vectorT_std__pairT_tensorflow__string_tensorflow__Tensor_t_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_tensorflow__OpDef_t,
  &_swigt__p_std__vectorT_tensorflow__Tensor_t,
  &_swigt__p_std__vectorT_tensorflow__string_t,
  &_swigt__p_string,
  &_swigt__p_tensorflow__AttrValue,
  &_swigt__p_tensorflow__AttrValue_ListValue,
  &_swigt__p_tensorflow__DataType,
  &_swigt__p_tensorflow__Edge,
  &_swigt__p_tensorflow__Env,
  &_swigt__p_tensorflow__EnvWrapper,
  &_swigt__p_tensorflow__Graph,
  &_swigt__p_tensorflow__ImportGraphDefOptions,
  &_swigt__p_tensorflow__NameAttrList,
  &_swigt__p_tensorflow__NeighborIter,
  &_swigt__p_tensorflow__Node,
  &_swigt__p_tensorflow__NodeBuilder,
  &_swigt__p_tensorflow__NodeBuilder__NodeOut,
  &_swigt__p_tensorflow__NodeDef,
  &_swigt__p_tensorflow__NodeIter,
  &_swigt__p_tensorflow__OpDef,
  &_swigt__p_tensorflow__OpDef_ArgDef,
  &_swigt__p_tensorflow__OpDef_AttrDef,
  &_swigt__p_tensorflow__OpDeprecation,
  &_swigt__p_tensorflow__OpList,
  &_swigt__p_tensorflow__OpListOpRegistry,
  &_swigt__p_tensorflow__OpRegistry,
  &_swigt__p_tensorflow__OpRegistryInterface,
  &_swigt__p_tensorflow__ResourceHandle,
  &_swigt__p_tensorflow__SaveSliceInfoDef,
  &_swigt__p_tensorflow__Session,
  &_swigt__p_tensorflow__SessionOptions,
  &_swigt__p_tensorflow__ShapeRefiner,
  &_swigt__p_tensorflow__Status,
  &_swigt__p_tensorflow__StringPiece,
  &_swigt__p_tensorflow__Tensor,
  &_swigt__p_tensorflow__TensorBuffer,
  &_swigt__p_tensorflow__TensorCApi,
  &_swigt__p_tensorflow__TensorProto,
  &_swigt__p_tensorflow__TensorShape,
  &_swigt__p_tensorflow__TensorShapeDim,
  &_swigt__p_tensorflow__TensorShapeIter,
  &_swigt__p_tensorflow__TensorShapeProto,
  &_swigt__p_tensorflow__TensorShapeUtils,
  &_swigt__p_tensorflow__Thread,
  &_swigt__p_tensorflow__ThreadOptions,
  &_swigt__p_tensorflow__VariableDef,
  &_swigt__p_tensorflow__error__Code,
  &_swigt__p_tensorflow__gtl__ArraySliceT_tensorflow__NodeBuilder__NodeOut_t,
  &_swigt__p_tensorflow__gtl__ArraySliceT_tensorflow__Node_p_t,
  &_swigt__p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t,
  &_swigt__p_tensorflow__gtl__iterator_rangeT_tensorflow__NodeIter_t,
  &_swigt__p_tensorflow__protobuf__Message,
  &_swigt__p_tensorflow__protobuf__MessageLite,
  &_swigt__p_tensorflow__register_op__OpDefBuilderReceiver,
  &_swigt__p_tensorflow__register_op__OpDefBuilderWrapperT_false_t,
  &_swigt__p_tensorflow__register_op__OpDefBuilderWrapperT_true_t,
  &_swigt__p_uint16_t,
  &_swigt__p_uint32_t,
  &_swigt__p_uint64,
  &_swigt__p_uint64_t,
  &_swigt__p_uint8_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_v8__LocalT_v8__Array_t,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_AllocationAttributes[] = {  {&_swigt__p_AllocationAttributes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AllocationDescription[] = {  {&_swigt__p_AllocationDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Allocator[] = {  {&_swigt__p_Allocator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArgDef[] = {  {&_swigt__p_ArgDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AttrDef[] = {  {&_swigt__p_AttrDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSession[] = {  {&_swigt__p_CSession, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConfigProto[] = {  {&_swigt__p_ConfigProto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataTypeVector[] = {  {&_swigt__p_DataTypeVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EdgeSet[] = {  {&_swigt__p_EdgeSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EdgeSet__const_iterator[] = {  {&_swigt__p_EdgeSet__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileStatistics[] = {  {&_swigt__p_FileStatistics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileSystemRegistry__Factory[] = {  {&_swigt__p_FileSystemRegistry__Factory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GraphDef[] = {  {&_swigt__p_GraphDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListValue[] = {  {&_swigt__p_ListValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodeDefBuilder[] = {  {&_swigt__p_NodeDefBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpRegistrationDataFactory[] = {  {&_swigt__p_OpRegistrationDataFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpRegistryInterface[] = {  {&_swigt__p_OpRegistryInterface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Reflection[] = {  {&_swigt__p_Reflection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RunMetadata[] = {  {&_swigt__p_RunMetadata, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RunOptions[] = {  {&_swigt__p_RunOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_AttrMetadata[] = {  {&_swigt__p_TF_AttrMetadata, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_AttrType[] = {  {&_swigt__p_TF_AttrType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_Buffer[] = {  {&_swigt__p_TF_Buffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_Code[] = {  {&_swigt__p_TF_Code, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_DataType[] = {  {&_swigt__p_TF_DataType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_DeprecatedSession[] = {  {&_swigt__p_TF_DeprecatedSession, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_Graph[] = {  {&_swigt__p_TF_Graph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_ImportGraphDefOptions[] = {  {&_swigt__p_TF_ImportGraphDefOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_Input[] = {  {&_swigt__p_TF_Input, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_Library[] = {  {&_swigt__p_TF_Library, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_Operation[] = {  {&_swigt__p_TF_Operation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_OperationDescription[] = {  {&_swigt__p_TF_OperationDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_Output[] = {  {&_swigt__p_TF_Output, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_Session[] = {  {&_swigt__p_TF_Session, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_SessionOptions[] = {  {&_swigt__p_TF_SessionOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_Status[] = {  {&_swigt__p_TF_Status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TF_Tensor[] = {  {&_swigt__p_TF_Tensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TensorDescription[] = {  {&_swigt__p_TensorDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TensorShapeProto[] = {  {&_swigt__p_TensorShapeProto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VersionDef[] = {  {&_swigt__p_VersionDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Watcher[] = {  {&_swigt__p_Watcher, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_condition_variable[] = {  {&_swigt__p_condition_variable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_size_t__void[] = {  {&_swigt__p_f_p_void_size_t__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_size_t_p_void__void[] = {  {&_swigt__p_f_p_void_size_t_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__string__void[] = {  {&_swigt__p_f_r_q_const__string__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__Arena[] = {  {&_swigt__p_google__protobuf__Arena, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__Descriptor[] = {  {&_swigt__p_google__protobuf__Descriptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__EnumDescriptor[] = {  {&_swigt__p_google__protobuf__EnumDescriptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__EnumValueDescriptor[] = {  {&_swigt__p_google__protobuf__EnumValueDescriptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__FieldDescriptor[] = {  {&_swigt__p_google__protobuf__FieldDescriptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__MapT_std__string___tensorflow__AttrValue_t[] = {  {&_swigt__p_google__protobuf__MapT_std__string___tensorflow__AttrValue_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__Message[] = {  {&_swigt__p_tensorflow__TensorProto, _p_tensorflow__TensorProtoTo_p_google__protobuf__Message, 0, 0},  {&_swigt__p_tensorflow__OpDef_ArgDef, _p_tensorflow__OpDef_ArgDefTo_p_google__protobuf__Message, 0, 0},  {&_swigt__p_tensorflow__OpDef_AttrDef, _p_tensorflow__OpDef_AttrDefTo_p_google__protobuf__Message, 0, 0},  {&_swigt__p_tensorflow__OpDeprecation, _p_tensorflow__OpDeprecationTo_p_google__protobuf__Message, 0, 0},  {&_swigt__p_tensorflow__NameAttrList, _p_tensorflow__NameAttrListTo_p_google__protobuf__Message, 0, 0},  {&_swigt__p_tensorflow__VariableDef, _p_tensorflow__VariableDefTo_p_google__protobuf__Message, 0, 0},  {&_swigt__p_tensorflow__AttrValue, _p_tensorflow__AttrValueTo_p_google__protobuf__Message, 0, 0},  {&_swigt__p_google__protobuf__Message, 0, 0, 0},  {&_swigt__p_tensorflow__OpDef, _p_tensorflow__OpDefTo_p_google__protobuf__Message, 0, 0},  {&_swigt__p_tensorflow__OpList, _p_tensorflow__OpListTo_p_google__protobuf__Message, 0, 0},  {&_swigt__p_tensorflow__NodeDef, _p_tensorflow__NodeDefTo_p_google__protobuf__Message, 0, 0},  {&_swigt__p_tensorflow__SaveSliceInfoDef, _p_tensorflow__SaveSliceInfoDefTo_p_google__protobuf__Message, 0, 0},  {&_swigt__p_tensorflow__AttrValue_ListValue, _p_tensorflow__AttrValue_ListValueTo_p_google__protobuf__Message, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__MessageFactory[] = {  {&_swigt__p_google__protobuf__MessageFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__MessageLite[] = {  {&_swigt__p_tensorflow__OpDef_AttrDef, _p_tensorflow__OpDef_AttrDefTo_p_google__protobuf__MessageLite, 0, 0},  {&_swigt__p_google__protobuf__MessageLite, 0, 0, 0},  {&_swigt__p_tensorflow__OpList, _p_tensorflow__OpListTo_p_google__protobuf__MessageLite, 0, 0},  {&_swigt__p_tensorflow__OpDeprecation, _p_tensorflow__OpDeprecationTo_p_google__protobuf__MessageLite, 0, 0},  {&_swigt__p_tensorflow__AttrValue_ListValue, _p_tensorflow__AttrValue_ListValueTo_p_google__protobuf__MessageLite, 0, 0},  {&_swigt__p_tensorflow__NodeDef, _p_tensorflow__NodeDefTo_p_google__protobuf__MessageLite, 0, 0},  {&_swigt__p_google__protobuf__Message, _p_google__protobuf__MessageTo_p_google__protobuf__MessageLite, 0, 0},  {&_swigt__p_tensorflow__VariableDef, _p_tensorflow__VariableDefTo_p_google__protobuf__MessageLite, 0, 0},  {&_swigt__p_tensorflow__SaveSliceInfoDef, _p_tensorflow__SaveSliceInfoDefTo_p_google__protobuf__MessageLite, 0, 0},  {&_swigt__p_tensorflow__OpDef, _p_tensorflow__OpDefTo_p_google__protobuf__MessageLite, 0, 0},  {&_swigt__p_tensorflow__NameAttrList, _p_tensorflow__NameAttrListTo_p_google__protobuf__MessageLite, 0, 0},  {&_swigt__p_tensorflow__AttrValue, _p_tensorflow__AttrValueTo_p_google__protobuf__MessageLite, 0, 0},  {&_swigt__p_tensorflow__TensorProto, _p_tensorflow__TensorProtoTo_p_google__protobuf__MessageLite, 0, 0},  {&_swigt__p_tensorflow__OpDef_ArgDef, _p_tensorflow__OpDef_ArgDefTo_p_google__protobuf__MessageLite, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__Metadata[] = {  {&_swigt__p_google__protobuf__Metadata, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__OneofDescriptor[] = {  {&_swigt__p_google__protobuf__OneofDescriptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__Reflection[] = {  {&_swigt__p_google__protobuf__Reflection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedFieldT_bool_t[] = {  {&_swigt__p_google__protobuf__RepeatedFieldT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedFieldT_double_t[] = {  {&_swigt__p_google__protobuf__RepeatedFieldT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedFieldT_float_t[] = {  {&_swigt__p_google__protobuf__RepeatedFieldT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedFieldT_int32_t_t[] = {  {&_swigt__p_google__protobuf__RepeatedFieldT_int32_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedFieldT_int64_t_t[] = {  {&_swigt__p_google__protobuf__RepeatedFieldT_int64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedFieldT_int_t[] = {  {&_swigt__p_google__protobuf__RepeatedFieldT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedPtrFieldT_std__string_t[] = {  {&_swigt__p_google__protobuf__RepeatedPtrFieldT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_ArgDef_t[] = {  {&_swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_ArgDef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_AttrDef_t[] = {  {&_swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_AttrDef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_t[] = {  {&_swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedPtrFieldT_tensorflow__ResourceHandle_t[] = {  {&_swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__ResourceHandle_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorProto_t[] = {  {&_swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorProto_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorShapeProto_t[] = {  {&_swigt__p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorShapeProto_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__UnknownFieldSet[] = {  {&_swigt__p_google__protobuf__UnknownFieldSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_ListValue_t[] = {  {&_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_ListValue_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_t[] = {  {&_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NameAttrList_t[] = {  {&_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NameAttrList_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NodeDef_t[] = {  {&_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NodeDef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_ArgDef_t[] = {  {&_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_ArgDef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_AttrDef_t[] = {  {&_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_AttrDef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_t[] = {  {&_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDeprecation_t[] = {  {&_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDeprecation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpList_t[] = {  {&_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpList_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__SaveSliceInfoDef_t[] = {  {&_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__SaveSliceInfoDef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__TensorProto_t[] = {  {&_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__TensorProto_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__VariableDef_t[] = {  {&_swigt__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__VariableDef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__io__CodedInputStream[] = {  {&_swigt__p_google__protobuf__io__CodedInputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__io__CodedOutputStream[] = {  {&_swigt__p_google__protobuf__io__CodedOutputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__io__ZeroCopyInputStream[] = {  {&_swigt__p_google__protobuf__io__ZeroCopyInputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_google__protobuf__io__ZeroCopyOutputStream[] = {  {&_swigt__p_google__protobuf__io__ZeroCopyOutputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gtl__ArraySliceT_int32_t[] = {  {&_swigt__p_gtl__ArraySliceT_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gtl__ArraySliceT_int64_t[] = {  {&_swigt__p_gtl__ArraySliceT_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gtl__ArraySliceT_tensorflow__TensorShape_t[] = {  {&_swigt__p_gtl__ArraySliceT_tensorflow__TensorShape_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gtl__InlinedVectorT_int64_4_t[] = {  {&_swigt__p_gtl__InlinedVectorT_int64_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int16_t[] = {  {&_swigt__p_int16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32[] = {  {&_swigt__p_int32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64[] = {  {&_swigt__p_int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int8_t[] = {  {&_swigt__p_int8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mutex_lock[] = {  {&_swigt__p_mutex_lock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_FileSystem[] = {  {&_swigt__p_p_FileSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_OpRegistrationData[] = {  {&_swigt__p_p_OpRegistrationData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_TF_Buffer[] = {  {&_swigt__p_p_TF_Buffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_TF_Operation[] = {  {&_swigt__p_p_TF_Operation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_TF_Tensor[] = {  {&_swigt__p_p_TF_Tensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int64_t[] = {  {&_swigt__p_p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_tensorflow__Edge[] = {  {&_swigt__p_p_tensorflow__Edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_tensorflow__Node[] = {  {&_swigt__p_p_tensorflow__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_tensorflow__OpDef[] = {  {&_swigt__p_p_tensorflow__OpDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_tensorflow__Session[] = {  {&_swigt__p_p_tensorflow__Session, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shape_inference__InferenceContext[] = {  {&_swigt__p_shape_inference__InferenceContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shape_inference__ShapeHandle[] = {  {&_swigt__p_shape_inference__ShapeHandle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_tensorflow__Status_fOpRegistrationData_pF_t[] = {  {&_swigt__p_std__functionT_tensorflow__Status_fOpRegistrationData_pF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_tensorflow__Status_ftensorflow__Status_const_R_tensorflow__OpDef_const_RF_t[] = {  {&_swigt__p_std__functionT_tensorflow__Status_ftensorflow__Status_const_R_tensorflow__OpDef_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fF_t[] = {  {&_swigt__p_std__functionT_void_fF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_ftensorflow__Status_const_RF_t[] = {  {&_swigt__p_std__functionT_void_ftensorflow__Status_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unique_ptrT_RandomAccessFile_t[] = {  {&_swigt__p_std__unique_ptrT_RandomAccessFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unique_ptrT_ReadOnlyMemoryRegion_t[] = {  {&_swigt__p_std__unique_ptrT_ReadOnlyMemoryRegion_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unique_ptrT_WritableFile_t[] = {  {&_swigt__p_std__unique_ptrT_WritableFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_tensorflow__string_tensorflow__Node_p_t[] = {  {&_swigt__p_std__unordered_mapT_tensorflow__string_tensorflow__Node_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TF_Operation_p_t[] = {  {&_swigt__p_std__vectorT_TF_Operation_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_google__protobuf__FieldDescriptor_const_p_t[] = {  {&_swigt__p_std__vectorT_google__protobuf__FieldDescriptor_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_TF_Operation_p_TF_Tensor_p_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_TF_Operation_p_TF_Tensor_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_std__string_tensorflow__Tensor_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_std__string_tensorflow__Tensor_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_tensorflow__string_tensorflow__Tensor_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_tensorflow__string_tensorflow__Tensor_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_tensorflow__OpDef_t[] = {  {&_swigt__p_std__vectorT_tensorflow__OpDef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_tensorflow__Tensor_t[] = {  {&_swigt__p_std__vectorT_tensorflow__Tensor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_tensorflow__string_t[] = {  {&_swigt__p_std__vectorT_tensorflow__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_string[] = {  {&_swigt__p_string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__AttrValue[] = {  {&_swigt__p_tensorflow__AttrValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__AttrValue_ListValue[] = {  {&_swigt__p_tensorflow__AttrValue_ListValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__DataType[] = {  {&_swigt__p_tensorflow__DataType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__Edge[] = {  {&_swigt__p_tensorflow__Edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__Env[] = {  {&_swigt__p_tensorflow__EnvWrapper, _p_tensorflow__EnvWrapperTo_p_tensorflow__Env, 0, 0},  {&_swigt__p_tensorflow__Env, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__EnvWrapper[] = {  {&_swigt__p_tensorflow__EnvWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__Graph[] = {  {&_swigt__p_tensorflow__Graph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__ImportGraphDefOptions[] = {  {&_swigt__p_tensorflow__ImportGraphDefOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__NameAttrList[] = {  {&_swigt__p_tensorflow__NameAttrList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__NeighborIter[] = {  {&_swigt__p_tensorflow__NeighborIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__Node[] = {  {&_swigt__p_tensorflow__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__NodeBuilder[] = {  {&_swigt__p_tensorflow__NodeBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__NodeBuilder__NodeOut[] = {  {&_swigt__p_tensorflow__NodeBuilder__NodeOut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__NodeDef[] = {  {&_swigt__p_tensorflow__NodeDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__NodeIter[] = {  {&_swigt__p_tensorflow__NodeIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__OpDef[] = {  {&_swigt__p_tensorflow__OpDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__OpDef_ArgDef[] = {  {&_swigt__p_tensorflow__OpDef_ArgDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__OpDef_AttrDef[] = {  {&_swigt__p_tensorflow__OpDef_AttrDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__OpDeprecation[] = {  {&_swigt__p_tensorflow__OpDeprecation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__OpList[] = {  {&_swigt__p_tensorflow__OpList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__OpListOpRegistry[] = {  {&_swigt__p_tensorflow__OpListOpRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__OpRegistry[] = {  {&_swigt__p_tensorflow__OpRegistry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__OpRegistryInterface[] = {  {&_swigt__p_tensorflow__OpRegistryInterface, 0, 0, 0},  {&_swigt__p_tensorflow__OpRegistry, _p_tensorflow__OpRegistryTo_p_tensorflow__OpRegistryInterface, 0, 0},  {&_swigt__p_tensorflow__OpListOpRegistry, _p_tensorflow__OpListOpRegistryTo_p_tensorflow__OpRegistryInterface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__ResourceHandle[] = {  {&_swigt__p_tensorflow__ResourceHandle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__SaveSliceInfoDef[] = {  {&_swigt__p_tensorflow__SaveSliceInfoDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__Session[] = {  {&_swigt__p_tensorflow__Session, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__SessionOptions[] = {  {&_swigt__p_tensorflow__SessionOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__ShapeRefiner[] = {  {&_swigt__p_tensorflow__ShapeRefiner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__Status[] = {  {&_swigt__p_tensorflow__Status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__StringPiece[] = {  {&_swigt__p_tensorflow__StringPiece, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__Tensor[] = {  {&_swigt__p_tensorflow__Tensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_______TF_ManagedBuffer[] = {{&_swigt__p_______TF_ManagedBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__TensorBuffer[] = {  {&_swigt__p_tensorflow__TensorBuffer, 0, 0, 0},  {&_swigt__p_______TF_ManagedBuffer, _p_______TF_ManagedBufferTo_p_tensorflow__TensorBuffer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__TensorCApi[] = {  {&_swigt__p_tensorflow__TensorCApi, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__TensorProto[] = {  {&_swigt__p_tensorflow__TensorProto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__TensorShape[] = {  {&_swigt__p_tensorflow__TensorShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__TensorShapeDim[] = {  {&_swigt__p_tensorflow__TensorShapeDim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__TensorShapeIter[] = {  {&_swigt__p_tensorflow__TensorShapeIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__TensorShapeProto[] = {  {&_swigt__p_tensorflow__TensorShapeProto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__TensorShapeUtils[] = {  {&_swigt__p_tensorflow__TensorShapeUtils, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__Thread[] = {  {&_swigt__p_tensorflow__Thread, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__ThreadOptions[] = {  {&_swigt__p_tensorflow__ThreadOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__VariableDef[] = {  {&_swigt__p_tensorflow__VariableDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__error__Code[] = {  {&_swigt__p_tensorflow__error__Code, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__gtl__ArraySliceT_tensorflow__NodeBuilder__NodeOut_t[] = {  {&_swigt__p_tensorflow__gtl__ArraySliceT_tensorflow__NodeBuilder__NodeOut_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__gtl__ArraySliceT_tensorflow__Node_p_t[] = {  {&_swigt__p_tensorflow__gtl__ArraySliceT_tensorflow__Node_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t[] = {  {&_swigt__p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__gtl__iterator_rangeT_tensorflow__NodeIter_t[] = {  {&_swigt__p_tensorflow__gtl__iterator_rangeT_tensorflow__NodeIter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__protobuf__Message[] = {  {&_swigt__p_tensorflow__protobuf__Message, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__protobuf__MessageLite[] = {  {&_swigt__p_tensorflow__protobuf__MessageLite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__register_op__OpDefBuilderReceiver[] = {  {&_swigt__p_tensorflow__register_op__OpDefBuilderReceiver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__register_op__OpDefBuilderWrapperT_false_t[] = {  {&_swigt__p_tensorflow__register_op__OpDefBuilderWrapperT_false_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tensorflow__register_op__OpDefBuilderWrapperT_true_t[] = {  {&_swigt__p_tensorflow__register_op__OpDefBuilderWrapperT_true_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_t[] = {  {&_swigt__p_uint16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64[] = {  {&_swigt__p_uint64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_v8__LocalT_v8__Array_t[] = {  {&_swigt__p_v8__LocalT_v8__Array_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AllocationAttributes,
  _swigc__p_AllocationDescription,
  _swigc__p_Allocator,
  _swigc__p_ArgDef,
  _swigc__p_AttrDef,
  _swigc__p_CSession,
  _swigc__p_ConfigProto,
  _swigc__p_DataTypeVector,
  _swigc__p_EdgeSet,
  _swigc__p_EdgeSet__const_iterator,
  _swigc__p_FileStatistics,
  _swigc__p_FileSystemRegistry__Factory,
  _swigc__p_GraphDef,
  _swigc__p_ListValue,
  _swigc__p_NodeDefBuilder,
  _swigc__p_OpRegistrationDataFactory,
  _swigc__p_OpRegistryInterface,
  _swigc__p_Reflection,
  _swigc__p_RunMetadata,
  _swigc__p_RunOptions,
  _swigc__p_TF_AttrMetadata,
  _swigc__p_TF_AttrType,
  _swigc__p_TF_Buffer,
  _swigc__p_TF_Code,
  _swigc__p_TF_DataType,
  _swigc__p_TF_DeprecatedSession,
  _swigc__p_TF_Graph,
  _swigc__p_TF_ImportGraphDefOptions,
  _swigc__p_TF_Input,
  _swigc__p_TF_Library,
  _swigc__p_TF_Operation,
  _swigc__p_TF_OperationDescription,
  _swigc__p_TF_Output,
  _swigc__p_TF_Session,
  _swigc__p_TF_SessionOptions,
  _swigc__p_TF_Status,
  _swigc__p_TF_Tensor,
  _swigc__p_TensorDescription,
  _swigc__p_TensorShapeProto,
  _swigc__p_VersionDef,
  _swigc__p_Watcher,
  _swigc__p_______TF_ManagedBuffer,
  _swigc__p_char,
  _swigc__p_condition_variable,
  _swigc__p_f_p_void_size_t__void,
  _swigc__p_f_p_void_size_t_p_void__void,
  _swigc__p_f_r_q_const__string__void,
  _swigc__p_float,
  _swigc__p_google__protobuf__Arena,
  _swigc__p_google__protobuf__Descriptor,
  _swigc__p_google__protobuf__EnumDescriptor,
  _swigc__p_google__protobuf__EnumValueDescriptor,
  _swigc__p_google__protobuf__FieldDescriptor,
  _swigc__p_google__protobuf__MapT_std__string___tensorflow__AttrValue_t,
  _swigc__p_google__protobuf__Message,
  _swigc__p_google__protobuf__MessageFactory,
  _swigc__p_google__protobuf__MessageLite,
  _swigc__p_google__protobuf__Metadata,
  _swigc__p_google__protobuf__OneofDescriptor,
  _swigc__p_google__protobuf__Reflection,
  _swigc__p_google__protobuf__RepeatedFieldT_bool_t,
  _swigc__p_google__protobuf__RepeatedFieldT_double_t,
  _swigc__p_google__protobuf__RepeatedFieldT_float_t,
  _swigc__p_google__protobuf__RepeatedFieldT_int32_t_t,
  _swigc__p_google__protobuf__RepeatedFieldT_int64_t_t,
  _swigc__p_google__protobuf__RepeatedFieldT_int_t,
  _swigc__p_google__protobuf__RepeatedPtrFieldT_std__string_t,
  _swigc__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_ArgDef_t,
  _swigc__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_AttrDef_t,
  _swigc__p_google__protobuf__RepeatedPtrFieldT_tensorflow__OpDef_t,
  _swigc__p_google__protobuf__RepeatedPtrFieldT_tensorflow__ResourceHandle_t,
  _swigc__p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorProto_t,
  _swigc__p_google__protobuf__RepeatedPtrFieldT_tensorflow__TensorShapeProto_t,
  _swigc__p_google__protobuf__UnknownFieldSet,
  _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_ListValue_t,
  _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__AttrValue_t,
  _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NameAttrList_t,
  _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__NodeDef_t,
  _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_ArgDef_t,
  _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_AttrDef_t,
  _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDef_t,
  _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpDeprecation_t,
  _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__OpList_t,
  _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__SaveSliceInfoDef_t,
  _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__TensorProto_t,
  _swigc__p_google__protobuf__internal__ExplicitlyConstructedT_tensorflow__VariableDef_t,
  _swigc__p_google__protobuf__io__CodedInputStream,
  _swigc__p_google__protobuf__io__CodedOutputStream,
  _swigc__p_google__protobuf__io__ZeroCopyInputStream,
  _swigc__p_google__protobuf__io__ZeroCopyOutputStream,
  _swigc__p_gtl__ArraySliceT_int32_t,
  _swigc__p_gtl__ArraySliceT_int64_t,
  _swigc__p_gtl__ArraySliceT_tensorflow__TensorShape_t,
  _swigc__p_gtl__InlinedVectorT_int64_4_t,
  _swigc__p_int,
  _swigc__p_int16_t,
  _swigc__p_int32,
  _swigc__p_int32_t,
  _swigc__p_int64,
  _swigc__p_int64_t,
  _swigc__p_int8_t,
  _swigc__p_mutex_lock,
  _swigc__p_p_FileSystem,
  _swigc__p_p_OpRegistrationData,
  _swigc__p_p_TF_Buffer,
  _swigc__p_p_TF_Operation,
  _swigc__p_p_TF_Tensor,
  _swigc__p_p_char,
  _swigc__p_p_int64_t,
  _swigc__p_p_tensorflow__Edge,
  _swigc__p_p_tensorflow__Node,
  _swigc__p_p_tensorflow__OpDef,
  _swigc__p_p_tensorflow__Session,
  _swigc__p_p_void,
  _swigc__p_shape_inference__InferenceContext,
  _swigc__p_shape_inference__ShapeHandle,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__functionT_tensorflow__Status_fOpRegistrationData_pF_t,
  _swigc__p_std__functionT_tensorflow__Status_ftensorflow__Status_const_R_tensorflow__OpDef_const_RF_t,
  _swigc__p_std__functionT_void_fF_t,
  _swigc__p_std__functionT_void_ftensorflow__Status_const_RF_t,
  _swigc__p_std__istream,
  _swigc__p_std__ostream,
  _swigc__p_std__string,
  _swigc__p_std__unique_ptrT_RandomAccessFile_t,
  _swigc__p_std__unique_ptrT_ReadOnlyMemoryRegion_t,
  _swigc__p_std__unique_ptrT_WritableFile_t,
  _swigc__p_std__unordered_mapT_tensorflow__string_tensorflow__Node_p_t,
  _swigc__p_std__vectorT_TF_Operation_p_t,
  _swigc__p_std__vectorT_google__protobuf__FieldDescriptor_const_p_t,
  _swigc__p_std__vectorT_std__pairT_TF_Operation_p_TF_Tensor_p_t_t,
  _swigc__p_std__vectorT_std__pairT_std__string_tensorflow__Tensor_t_t,
  _swigc__p_std__vectorT_std__pairT_tensorflow__string_tensorflow__Tensor_t_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_tensorflow__OpDef_t,
  _swigc__p_std__vectorT_tensorflow__Tensor_t,
  _swigc__p_std__vectorT_tensorflow__string_t,
  _swigc__p_string,
  _swigc__p_tensorflow__AttrValue,
  _swigc__p_tensorflow__AttrValue_ListValue,
  _swigc__p_tensorflow__DataType,
  _swigc__p_tensorflow__Edge,
  _swigc__p_tensorflow__Env,
  _swigc__p_tensorflow__EnvWrapper,
  _swigc__p_tensorflow__Graph,
  _swigc__p_tensorflow__ImportGraphDefOptions,
  _swigc__p_tensorflow__NameAttrList,
  _swigc__p_tensorflow__NeighborIter,
  _swigc__p_tensorflow__Node,
  _swigc__p_tensorflow__NodeBuilder,
  _swigc__p_tensorflow__NodeBuilder__NodeOut,
  _swigc__p_tensorflow__NodeDef,
  _swigc__p_tensorflow__NodeIter,
  _swigc__p_tensorflow__OpDef,
  _swigc__p_tensorflow__OpDef_ArgDef,
  _swigc__p_tensorflow__OpDef_AttrDef,
  _swigc__p_tensorflow__OpDeprecation,
  _swigc__p_tensorflow__OpList,
  _swigc__p_tensorflow__OpListOpRegistry,
  _swigc__p_tensorflow__OpRegistry,
  _swigc__p_tensorflow__OpRegistryInterface,
  _swigc__p_tensorflow__ResourceHandle,
  _swigc__p_tensorflow__SaveSliceInfoDef,
  _swigc__p_tensorflow__Session,
  _swigc__p_tensorflow__SessionOptions,
  _swigc__p_tensorflow__ShapeRefiner,
  _swigc__p_tensorflow__Status,
  _swigc__p_tensorflow__StringPiece,
  _swigc__p_tensorflow__Tensor,
  _swigc__p_tensorflow__TensorBuffer,
  _swigc__p_tensorflow__TensorCApi,
  _swigc__p_tensorflow__TensorProto,
  _swigc__p_tensorflow__TensorShape,
  _swigc__p_tensorflow__TensorShapeDim,
  _swigc__p_tensorflow__TensorShapeIter,
  _swigc__p_tensorflow__TensorShapeProto,
  _swigc__p_tensorflow__TensorShapeUtils,
  _swigc__p_tensorflow__Thread,
  _swigc__p_tensorflow__ThreadOptions,
  _swigc__p_tensorflow__VariableDef,
  _swigc__p_tensorflow__error__Code,
  _swigc__p_tensorflow__gtl__ArraySliceT_tensorflow__NodeBuilder__NodeOut_t,
  _swigc__p_tensorflow__gtl__ArraySliceT_tensorflow__Node_p_t,
  _swigc__p_tensorflow__gtl__iterator_rangeT_tensorflow__NeighborIter_t,
  _swigc__p_tensorflow__gtl__iterator_rangeT_tensorflow__NodeIter_t,
  _swigc__p_tensorflow__protobuf__Message,
  _swigc__p_tensorflow__protobuf__MessageLite,
  _swigc__p_tensorflow__register_op__OpDefBuilderReceiver,
  _swigc__p_tensorflow__register_op__OpDefBuilderWrapperT_false_t,
  _swigc__p_tensorflow__register_op__OpDefBuilderWrapperT_true_t,
  _swigc__p_uint16_t,
  _swigc__p_uint32_t,
  _swigc__p_uint64,
  _swigc__p_uint64_t,
  _swigc__p_uint8_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_v8__LocalT_v8__Array_t,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




#include <assert.h>

SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));

  if (moduleinfo.IsEmpty())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> exports_obj = exports;


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_MessageLite, Type: p_google__protobuf__MessageLite, Dtor: _wrap_delete_MessageLite */
v8::Handle<v8::FunctionTemplate> _exports_MessageLite_class = SWIGV8_CreateClassTemplate("_exports_MessageLite");
SWIGV8_SET_CLASS_TEMPL(_exports_MessageLite_clientData.class_templ, _exports_MessageLite_class);
_exports_MessageLite_clientData.dtor = _wrap_delete_MessageLite;
if (SWIGTYPE_p_google__protobuf__MessageLite->clientdata == 0) {
  SWIGTYPE_p_google__protobuf__MessageLite->clientdata = &_exports_MessageLite_clientData;
}
/* Name: _exports_Metadata, Type: p_google__protobuf__Metadata, Dtor: _wrap_delete_Metadata */
v8::Handle<v8::FunctionTemplate> _exports_Metadata_class = SWIGV8_CreateClassTemplate("_exports_Metadata");
SWIGV8_SET_CLASS_TEMPL(_exports_Metadata_clientData.class_templ, _exports_Metadata_class);
_exports_Metadata_clientData.dtor = _wrap_delete_Metadata;
if (SWIGTYPE_p_google__protobuf__Metadata->clientdata == 0) {
  SWIGTYPE_p_google__protobuf__Metadata->clientdata = &_exports_Metadata_clientData;
}
/* Name: _exports_Message, Type: p_google__protobuf__Message, Dtor: _wrap_delete_Message */
v8::Handle<v8::FunctionTemplate> _exports_Message_class = SWIGV8_CreateClassTemplate("_exports_Message");
SWIGV8_SET_CLASS_TEMPL(_exports_Message_clientData.class_templ, _exports_Message_class);
_exports_Message_clientData.dtor = _wrap_delete_Message;
if (SWIGTYPE_p_google__protobuf__Message->clientdata == 0) {
  SWIGTYPE_p_google__protobuf__Message->clientdata = &_exports_Message_clientData;
}
/* Name: _exports_Reflection, Type: p_google__protobuf__Reflection, Dtor: _wrap_delete_Reflection */
v8::Handle<v8::FunctionTemplate> _exports_Reflection_class = SWIGV8_CreateClassTemplate("_exports_Reflection");
SWIGV8_SET_CLASS_TEMPL(_exports_Reflection_clientData.class_templ, _exports_Reflection_class);
_exports_Reflection_clientData.dtor = _wrap_delete_Reflection;
if (SWIGTYPE_p_google__protobuf__Reflection->clientdata == 0) {
  SWIGTYPE_p_google__protobuf__Reflection->clientdata = &_exports_Reflection_clientData;
}
/* Name: _exports_MessageFactory, Type: p_google__protobuf__MessageFactory, Dtor: _wrap_delete_MessageFactory */
v8::Handle<v8::FunctionTemplate> _exports_MessageFactory_class = SWIGV8_CreateClassTemplate("_exports_MessageFactory");
SWIGV8_SET_CLASS_TEMPL(_exports_MessageFactory_clientData.class_templ, _exports_MessageFactory_class);
_exports_MessageFactory_clientData.dtor = _wrap_delete_MessageFactory;
if (SWIGTYPE_p_google__protobuf__MessageFactory->clientdata == 0) {
  SWIGTYPE_p_google__protobuf__MessageFactory->clientdata = &_exports_MessageFactory_clientData;
}
/* Name: _exports_TF_Buffer, Type: p_TF_Buffer, Dtor: _wrap_delete_TF_Buffer */
v8::Handle<v8::FunctionTemplate> _exports_TF_Buffer_class = SWIGV8_CreateClassTemplate("_exports_TF_Buffer");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_Buffer_clientData.class_templ, _exports_TF_Buffer_class);
_exports_TF_Buffer_clientData.dtor = _wrap_delete_TF_Buffer;
if (SWIGTYPE_p_TF_Buffer->clientdata == 0) {
  SWIGTYPE_p_TF_Buffer->clientdata = &_exports_TF_Buffer_clientData;
}
/* Name: _exports_TF_Input, Type: p_TF_Input, Dtor: _wrap_delete_TF_Input */
v8::Handle<v8::FunctionTemplate> _exports_TF_Input_class = SWIGV8_CreateClassTemplate("_exports_TF_Input");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_Input_clientData.class_templ, _exports_TF_Input_class);
_exports_TF_Input_clientData.dtor = _wrap_delete_TF_Input;
if (SWIGTYPE_p_TF_Input->clientdata == 0) {
  SWIGTYPE_p_TF_Input->clientdata = &_exports_TF_Input_clientData;
}
/* Name: _exports_TF_Output, Type: p_TF_Output, Dtor: _wrap_delete_TF_Output */
v8::Handle<v8::FunctionTemplate> _exports_TF_Output_class = SWIGV8_CreateClassTemplate("_exports_TF_Output");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_Output_clientData.class_templ, _exports_TF_Output_class);
_exports_TF_Output_clientData.dtor = _wrap_delete_TF_Output;
if (SWIGTYPE_p_TF_Output->clientdata == 0) {
  SWIGTYPE_p_TF_Output->clientdata = &_exports_TF_Output_clientData;
}
/* Name: _exports_TF_AttrMetadata, Type: p_TF_AttrMetadata, Dtor: _wrap_delete_TF_AttrMetadata */
v8::Handle<v8::FunctionTemplate> _exports_TF_AttrMetadata_class = SWIGV8_CreateClassTemplate("_exports_TF_AttrMetadata");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_AttrMetadata_clientData.class_templ, _exports_TF_AttrMetadata_class);
_exports_TF_AttrMetadata_clientData.dtor = _wrap_delete_TF_AttrMetadata;
if (SWIGTYPE_p_TF_AttrMetadata->clientdata == 0) {
  SWIGTYPE_p_TF_AttrMetadata->clientdata = &_exports_TF_AttrMetadata_clientData;
}
/* Name: _exports_NodeDef, Type: p_tensorflow__NodeDef, Dtor: _wrap_delete_NodeDef */
v8::Handle<v8::FunctionTemplate> _exports_NodeDef_class = SWIGV8_CreateClassTemplate("_exports_NodeDef");
SWIGV8_SET_CLASS_TEMPL(_exports_NodeDef_clientData.class_templ, _exports_NodeDef_class);
_exports_NodeDef_clientData.dtor = _wrap_delete_NodeDef;
if (SWIGTYPE_p_tensorflow__NodeDef->clientdata == 0) {
  SWIGTYPE_p_tensorflow__NodeDef->clientdata = &_exports_NodeDef_clientData;
}
/* Name: _exports_VariableDef, Type: p_tensorflow__VariableDef, Dtor: _wrap_delete_VariableDef */
v8::Handle<v8::FunctionTemplate> _exports_VariableDef_class = SWIGV8_CreateClassTemplate("_exports_VariableDef");
SWIGV8_SET_CLASS_TEMPL(_exports_VariableDef_clientData.class_templ, _exports_VariableDef_class);
_exports_VariableDef_clientData.dtor = _wrap_delete_VariableDef;
if (SWIGTYPE_p_tensorflow__VariableDef->clientdata == 0) {
  SWIGTYPE_p_tensorflow__VariableDef->clientdata = &_exports_VariableDef_clientData;
}
/* Name: _exports_SaveSliceInfoDef, Type: p_tensorflow__SaveSliceInfoDef, Dtor: _wrap_delete_SaveSliceInfoDef */
v8::Handle<v8::FunctionTemplate> _exports_SaveSliceInfoDef_class = SWIGV8_CreateClassTemplate("_exports_SaveSliceInfoDef");
SWIGV8_SET_CLASS_TEMPL(_exports_SaveSliceInfoDef_clientData.class_templ, _exports_SaveSliceInfoDef_class);
_exports_SaveSliceInfoDef_clientData.dtor = _wrap_delete_SaveSliceInfoDef;
if (SWIGTYPE_p_tensorflow__SaveSliceInfoDef->clientdata == 0) {
  SWIGTYPE_p_tensorflow__SaveSliceInfoDef->clientdata = &_exports_SaveSliceInfoDef_clientData;
}
/* Name: _exports_AttrValue_ListValue, Type: p_tensorflow__AttrValue_ListValue, Dtor: _wrap_delete_AttrValue_ListValue */
v8::Handle<v8::FunctionTemplate> _exports_AttrValue_ListValue_class = SWIGV8_CreateClassTemplate("_exports_AttrValue_ListValue");
SWIGV8_SET_CLASS_TEMPL(_exports_AttrValue_ListValue_clientData.class_templ, _exports_AttrValue_ListValue_class);
_exports_AttrValue_ListValue_clientData.dtor = _wrap_delete_AttrValue_ListValue;
if (SWIGTYPE_p_tensorflow__AttrValue_ListValue->clientdata == 0) {
  SWIGTYPE_p_tensorflow__AttrValue_ListValue->clientdata = &_exports_AttrValue_ListValue_clientData;
}
/* Name: _exports_AttrValue, Type: p_tensorflow__AttrValue, Dtor: _wrap_delete_AttrValue */
v8::Handle<v8::FunctionTemplate> _exports_AttrValue_class = SWIGV8_CreateClassTemplate("_exports_AttrValue");
SWIGV8_SET_CLASS_TEMPL(_exports_AttrValue_clientData.class_templ, _exports_AttrValue_class);
_exports_AttrValue_clientData.dtor = _wrap_delete_AttrValue;
if (SWIGTYPE_p_tensorflow__AttrValue->clientdata == 0) {
  SWIGTYPE_p_tensorflow__AttrValue->clientdata = &_exports_AttrValue_clientData;
}
/* Name: _exports_NameAttrList, Type: p_tensorflow__NameAttrList, Dtor: _wrap_delete_NameAttrList */
v8::Handle<v8::FunctionTemplate> _exports_NameAttrList_class = SWIGV8_CreateClassTemplate("_exports_NameAttrList");
SWIGV8_SET_CLASS_TEMPL(_exports_NameAttrList_clientData.class_templ, _exports_NameAttrList_class);
_exports_NameAttrList_clientData.dtor = _wrap_delete_NameAttrList;
if (SWIGTYPE_p_tensorflow__NameAttrList->clientdata == 0) {
  SWIGTYPE_p_tensorflow__NameAttrList->clientdata = &_exports_NameAttrList_clientData;
}
/* Name: _exports_TensorProto, Type: p_tensorflow__TensorProto, Dtor: _wrap_delete_TensorProto */
v8::Handle<v8::FunctionTemplate> _exports_TensorProto_class = SWIGV8_CreateClassTemplate("_exports_TensorProto");
SWIGV8_SET_CLASS_TEMPL(_exports_TensorProto_clientData.class_templ, _exports_TensorProto_class);
_exports_TensorProto_clientData.dtor = _wrap_delete_TensorProto;
if (SWIGTYPE_p_tensorflow__TensorProto->clientdata == 0) {
  SWIGTYPE_p_tensorflow__TensorProto->clientdata = &_exports_TensorProto_clientData;
}
/* Name: _exports_OpDef_ArgDef, Type: p_tensorflow__OpDef_ArgDef, Dtor: _wrap_delete_OpDef_ArgDef */
v8::Handle<v8::FunctionTemplate> _exports_OpDef_ArgDef_class = SWIGV8_CreateClassTemplate("_exports_OpDef_ArgDef");
SWIGV8_SET_CLASS_TEMPL(_exports_OpDef_ArgDef_clientData.class_templ, _exports_OpDef_ArgDef_class);
_exports_OpDef_ArgDef_clientData.dtor = _wrap_delete_OpDef_ArgDef;
if (SWIGTYPE_p_tensorflow__OpDef_ArgDef->clientdata == 0) {
  SWIGTYPE_p_tensorflow__OpDef_ArgDef->clientdata = &_exports_OpDef_ArgDef_clientData;
}
/* Name: _exports_OpDef_AttrDef, Type: p_tensorflow__OpDef_AttrDef, Dtor: _wrap_delete_OpDef_AttrDef */
v8::Handle<v8::FunctionTemplate> _exports_OpDef_AttrDef_class = SWIGV8_CreateClassTemplate("_exports_OpDef_AttrDef");
SWIGV8_SET_CLASS_TEMPL(_exports_OpDef_AttrDef_clientData.class_templ, _exports_OpDef_AttrDef_class);
_exports_OpDef_AttrDef_clientData.dtor = _wrap_delete_OpDef_AttrDef;
if (SWIGTYPE_p_tensorflow__OpDef_AttrDef->clientdata == 0) {
  SWIGTYPE_p_tensorflow__OpDef_AttrDef->clientdata = &_exports_OpDef_AttrDef_clientData;
}
/* Name: _exports_OpDef, Type: p_tensorflow__OpDef, Dtor: _wrap_delete_OpDef */
v8::Handle<v8::FunctionTemplate> _exports_OpDef_class = SWIGV8_CreateClassTemplate("_exports_OpDef");
SWIGV8_SET_CLASS_TEMPL(_exports_OpDef_clientData.class_templ, _exports_OpDef_class);
_exports_OpDef_clientData.dtor = _wrap_delete_OpDef;
if (SWIGTYPE_p_tensorflow__OpDef->clientdata == 0) {
  SWIGTYPE_p_tensorflow__OpDef->clientdata = &_exports_OpDef_clientData;
}
/* Name: _exports_OpDeprecation, Type: p_tensorflow__OpDeprecation, Dtor: _wrap_delete_OpDeprecation */
v8::Handle<v8::FunctionTemplate> _exports_OpDeprecation_class = SWIGV8_CreateClassTemplate("_exports_OpDeprecation");
SWIGV8_SET_CLASS_TEMPL(_exports_OpDeprecation_clientData.class_templ, _exports_OpDeprecation_class);
_exports_OpDeprecation_clientData.dtor = _wrap_delete_OpDeprecation;
if (SWIGTYPE_p_tensorflow__OpDeprecation->clientdata == 0) {
  SWIGTYPE_p_tensorflow__OpDeprecation->clientdata = &_exports_OpDeprecation_clientData;
}
/* Name: _exports_OpList, Type: p_tensorflow__OpList, Dtor: _wrap_delete_OpList */
v8::Handle<v8::FunctionTemplate> _exports_OpList_class = SWIGV8_CreateClassTemplate("_exports_OpList");
SWIGV8_SET_CLASS_TEMPL(_exports_OpList_clientData.class_templ, _exports_OpList_class);
_exports_OpList_clientData.dtor = _wrap_delete_OpList;
if (SWIGTYPE_p_tensorflow__OpList->clientdata == 0) {
  SWIGTYPE_p_tensorflow__OpList->clientdata = &_exports_OpList_clientData;
}
/* Name: _exports_StringPiece, Type: p_tensorflow__StringPiece, Dtor: _wrap_delete_StringPiece */
v8::Handle<v8::FunctionTemplate> _exports_StringPiece_class = SWIGV8_CreateClassTemplate("_exports_StringPiece");
SWIGV8_SET_CLASS_TEMPL(_exports_StringPiece_clientData.class_templ, _exports_StringPiece_class);
_exports_StringPiece_clientData.dtor = _wrap_delete_StringPiece;
if (SWIGTYPE_p_tensorflow__StringPiece->clientdata == 0) {
  SWIGTYPE_p_tensorflow__StringPiece->clientdata = &_exports_StringPiece_clientData;
}
/* Name: _exports_Env, Type: p_tensorflow__Env, Dtor: _wrap_delete_Env */
v8::Handle<v8::FunctionTemplate> _exports_Env_class = SWIGV8_CreateClassTemplate("_exports_Env");
SWIGV8_SET_CLASS_TEMPL(_exports_Env_clientData.class_templ, _exports_Env_class);
_exports_Env_clientData.dtor = _wrap_delete_Env;
if (SWIGTYPE_p_tensorflow__Env->clientdata == 0) {
  SWIGTYPE_p_tensorflow__Env->clientdata = &_exports_Env_clientData;
}
/* Name: _exports_EnvWrapper, Type: p_tensorflow__EnvWrapper, Dtor: _wrap_delete_EnvWrapper */
v8::Handle<v8::FunctionTemplate> _exports_EnvWrapper_class = SWIGV8_CreateClassTemplate("_exports_EnvWrapper");
SWIGV8_SET_CLASS_TEMPL(_exports_EnvWrapper_clientData.class_templ, _exports_EnvWrapper_class);
_exports_EnvWrapper_clientData.dtor = _wrap_delete_EnvWrapper;
if (SWIGTYPE_p_tensorflow__EnvWrapper->clientdata == 0) {
  SWIGTYPE_p_tensorflow__EnvWrapper->clientdata = &_exports_EnvWrapper_clientData;
}
/* Name: _exports_Thread, Type: p_tensorflow__Thread, Dtor: _wrap_delete_Thread */
v8::Handle<v8::FunctionTemplate> _exports_Thread_class = SWIGV8_CreateClassTemplate("_exports_Thread");
SWIGV8_SET_CLASS_TEMPL(_exports_Thread_clientData.class_templ, _exports_Thread_class);
_exports_Thread_clientData.dtor = _wrap_delete_Thread;
if (SWIGTYPE_p_tensorflow__Thread->clientdata == 0) {
  SWIGTYPE_p_tensorflow__Thread->clientdata = &_exports_Thread_clientData;
}
/* Name: _exports_ThreadOptions, Type: p_tensorflow__ThreadOptions, Dtor: _wrap_delete_ThreadOptions */
v8::Handle<v8::FunctionTemplate> _exports_ThreadOptions_class = SWIGV8_CreateClassTemplate("_exports_ThreadOptions");
SWIGV8_SET_CLASS_TEMPL(_exports_ThreadOptions_clientData.class_templ, _exports_ThreadOptions_class);
_exports_ThreadOptions_clientData.dtor = _wrap_delete_ThreadOptions;
if (SWIGTYPE_p_tensorflow__ThreadOptions->clientdata == 0) {
  SWIGTYPE_p_tensorflow__ThreadOptions->clientdata = &_exports_ThreadOptions_clientData;
}
/* Name: _exports_Session, Type: p_tensorflow__Session, Dtor: _wrap_delete_Session */
v8::Handle<v8::FunctionTemplate> _exports_Session_class = SWIGV8_CreateClassTemplate("_exports_Session");
SWIGV8_SET_CLASS_TEMPL(_exports_Session_clientData.class_templ, _exports_Session_class);
_exports_Session_clientData.dtor = _wrap_delete_Session;
if (SWIGTYPE_p_tensorflow__Session->clientdata == 0) {
  SWIGTYPE_p_tensorflow__Session->clientdata = &_exports_Session_clientData;
}
/* Name: _exports_SessionOptions, Type: p_tensorflow__SessionOptions, Dtor: _wrap_delete_SessionOptions */
v8::Handle<v8::FunctionTemplate> _exports_SessionOptions_class = SWIGV8_CreateClassTemplate("_exports_SessionOptions");
SWIGV8_SET_CLASS_TEMPL(_exports_SessionOptions_clientData.class_templ, _exports_SessionOptions_class);
_exports_SessionOptions_clientData.dtor = _wrap_delete_SessionOptions;
if (SWIGTYPE_p_tensorflow__SessionOptions->clientdata == 0) {
  SWIGTYPE_p_tensorflow__SessionOptions->clientdata = &_exports_SessionOptions_clientData;
}
/* Name: _exports_Tensor, Type: p_tensorflow__Tensor, Dtor: _wrap_delete_Tensor */
v8::Handle<v8::FunctionTemplate> _exports_Tensor_class = SWIGV8_CreateClassTemplate("_exports_Tensor");
SWIGV8_SET_CLASS_TEMPL(_exports_Tensor_clientData.class_templ, _exports_Tensor_class);
_exports_Tensor_clientData.dtor = _wrap_delete_Tensor;
if (SWIGTYPE_p_tensorflow__Tensor->clientdata == 0) {
  SWIGTYPE_p_tensorflow__Tensor->clientdata = &_exports_Tensor_clientData;
}
/* Name: _exports_TensorBuffer, Type: p_tensorflow__TensorBuffer, Dtor: _wrap_delete_TensorBuffer */
v8::Handle<v8::FunctionTemplate> _exports_TensorBuffer_class = SWIGV8_CreateClassTemplate("_exports_TensorBuffer");
SWIGV8_SET_CLASS_TEMPL(_exports_TensorBuffer_clientData.class_templ, _exports_TensorBuffer_class);
_exports_TensorBuffer_clientData.dtor = _wrap_delete_TensorBuffer;
if (SWIGTYPE_p_tensorflow__TensorBuffer->clientdata == 0) {
  SWIGTYPE_p_tensorflow__TensorBuffer->clientdata = &_exports_TensorBuffer_clientData;
}
/* Name: _exports_TensorShape, Type: p_tensorflow__TensorShape, Dtor: _wrap_delete_TensorShape */
v8::Handle<v8::FunctionTemplate> _exports_TensorShape_class = SWIGV8_CreateClassTemplate("_exports_TensorShape");
SWIGV8_SET_CLASS_TEMPL(_exports_TensorShape_clientData.class_templ, _exports_TensorShape_class);
_exports_TensorShape_clientData.dtor = _wrap_delete_TensorShape;
if (SWIGTYPE_p_tensorflow__TensorShape->clientdata == 0) {
  SWIGTYPE_p_tensorflow__TensorShape->clientdata = &_exports_TensorShape_clientData;
}
/* Name: _exports_TensorShapeDim, Type: p_tensorflow__TensorShapeDim, Dtor: _wrap_delete_TensorShapeDim */
v8::Handle<v8::FunctionTemplate> _exports_TensorShapeDim_class = SWIGV8_CreateClassTemplate("_exports_TensorShapeDim");
SWIGV8_SET_CLASS_TEMPL(_exports_TensorShapeDim_clientData.class_templ, _exports_TensorShapeDim_class);
_exports_TensorShapeDim_clientData.dtor = _wrap_delete_TensorShapeDim;
if (SWIGTYPE_p_tensorflow__TensorShapeDim->clientdata == 0) {
  SWIGTYPE_p_tensorflow__TensorShapeDim->clientdata = &_exports_TensorShapeDim_clientData;
}
/* Name: _exports_TensorShapeIter, Type: p_tensorflow__TensorShapeIter, Dtor: _wrap_delete_TensorShapeIter */
v8::Handle<v8::FunctionTemplate> _exports_TensorShapeIter_class = SWIGV8_CreateClassTemplate("_exports_TensorShapeIter");
SWIGV8_SET_CLASS_TEMPL(_exports_TensorShapeIter_clientData.class_templ, _exports_TensorShapeIter_class);
_exports_TensorShapeIter_clientData.dtor = _wrap_delete_TensorShapeIter;
if (SWIGTYPE_p_tensorflow__TensorShapeIter->clientdata == 0) {
  SWIGTYPE_p_tensorflow__TensorShapeIter->clientdata = &_exports_TensorShapeIter_clientData;
}
/* Name: _exports_TensorShapeUtils, Type: p_tensorflow__TensorShapeUtils, Dtor: _wrap_delete_TensorShapeUtils */
v8::Handle<v8::FunctionTemplate> _exports_TensorShapeUtils_class = SWIGV8_CreateClassTemplate("_exports_TensorShapeUtils");
SWIGV8_SET_CLASS_TEMPL(_exports_TensorShapeUtils_clientData.class_templ, _exports_TensorShapeUtils_class);
_exports_TensorShapeUtils_clientData.dtor = _wrap_delete_TensorShapeUtils;
if (SWIGTYPE_p_tensorflow__TensorShapeUtils->clientdata == 0) {
  SWIGTYPE_p_tensorflow__TensorShapeUtils->clientdata = &_exports_TensorShapeUtils_clientData;
}
/* Name: _exports_Node, Type: p_tensorflow__Node, Dtor: 0 */
v8::Handle<v8::FunctionTemplate> _exports_Node_class = SWIGV8_CreateClassTemplate("_exports_Node");
SWIGV8_SET_CLASS_TEMPL(_exports_Node_clientData.class_templ, _exports_Node_class);
_exports_Node_clientData.dtor = 0;
if (SWIGTYPE_p_tensorflow__Node->clientdata == 0) {
  SWIGTYPE_p_tensorflow__Node->clientdata = &_exports_Node_clientData;
}
/* Name: _exports_Edge, Type: p_tensorflow__Edge, Dtor: _wrap_delete_Edge */
v8::Handle<v8::FunctionTemplate> _exports_Edge_class = SWIGV8_CreateClassTemplate("_exports_Edge");
SWIGV8_SET_CLASS_TEMPL(_exports_Edge_clientData.class_templ, _exports_Edge_class);
_exports_Edge_clientData.dtor = _wrap_delete_Edge;
if (SWIGTYPE_p_tensorflow__Edge->clientdata == 0) {
  SWIGTYPE_p_tensorflow__Edge->clientdata = &_exports_Edge_clientData;
}
/* Name: _exports_Graph, Type: p_tensorflow__Graph, Dtor: _wrap_delete_Graph */
v8::Handle<v8::FunctionTemplate> _exports_Graph_class = SWIGV8_CreateClassTemplate("_exports_Graph");
SWIGV8_SET_CLASS_TEMPL(_exports_Graph_clientData.class_templ, _exports_Graph_class);
_exports_Graph_clientData.dtor = _wrap_delete_Graph;
if (SWIGTYPE_p_tensorflow__Graph->clientdata == 0) {
  SWIGTYPE_p_tensorflow__Graph->clientdata = &_exports_Graph_clientData;
}
/* Name: _exports_NodeIter, Type: p_tensorflow__NodeIter, Dtor: _wrap_delete_NodeIter */
v8::Handle<v8::FunctionTemplate> _exports_NodeIter_class = SWIGV8_CreateClassTemplate("_exports_NodeIter");
SWIGV8_SET_CLASS_TEMPL(_exports_NodeIter_clientData.class_templ, _exports_NodeIter_class);
_exports_NodeIter_clientData.dtor = _wrap_delete_NodeIter;
if (SWIGTYPE_p_tensorflow__NodeIter->clientdata == 0) {
  SWIGTYPE_p_tensorflow__NodeIter->clientdata = &_exports_NodeIter_clientData;
}
/* Name: _exports_NeighborIter, Type: p_tensorflow__NeighborIter, Dtor: _wrap_delete_NeighborIter */
v8::Handle<v8::FunctionTemplate> _exports_NeighborIter_class = SWIGV8_CreateClassTemplate("_exports_NeighborIter");
SWIGV8_SET_CLASS_TEMPL(_exports_NeighborIter_clientData.class_templ, _exports_NeighborIter_class);
_exports_NeighborIter_clientData.dtor = _wrap_delete_NeighborIter;
if (SWIGTYPE_p_tensorflow__NeighborIter->clientdata == 0) {
  SWIGTYPE_p_tensorflow__NeighborIter->clientdata = &_exports_NeighborIter_clientData;
}
/* Name: _exports_ShapeRefiner, Type: p_tensorflow__ShapeRefiner, Dtor: _wrap_delete_ShapeRefiner */
v8::Handle<v8::FunctionTemplate> _exports_ShapeRefiner_class = SWIGV8_CreateClassTemplate("_exports_ShapeRefiner");
SWIGV8_SET_CLASS_TEMPL(_exports_ShapeRefiner_clientData.class_templ, _exports_ShapeRefiner_class);
_exports_ShapeRefiner_clientData.dtor = _wrap_delete_ShapeRefiner;
if (SWIGTYPE_p_tensorflow__ShapeRefiner->clientdata == 0) {
  SWIGTYPE_p_tensorflow__ShapeRefiner->clientdata = &_exports_ShapeRefiner_clientData;
}
/* Name: _exports_NodeBuilder, Type: p_tensorflow__NodeBuilder, Dtor: _wrap_delete_NodeBuilder */
v8::Handle<v8::FunctionTemplate> _exports_NodeBuilder_class = SWIGV8_CreateClassTemplate("_exports_NodeBuilder");
SWIGV8_SET_CLASS_TEMPL(_exports_NodeBuilder_clientData.class_templ, _exports_NodeBuilder_class);
_exports_NodeBuilder_clientData.dtor = _wrap_delete_NodeBuilder;
if (SWIGTYPE_p_tensorflow__NodeBuilder->clientdata == 0) {
  SWIGTYPE_p_tensorflow__NodeBuilder->clientdata = &_exports_NodeBuilder_clientData;
}
/* Name: _exports_Status, Type: p_tensorflow__Status, Dtor: _wrap_delete_Status */
v8::Handle<v8::FunctionTemplate> _exports_Status_class = SWIGV8_CreateClassTemplate("_exports_Status");
SWIGV8_SET_CLASS_TEMPL(_exports_Status_clientData.class_templ, _exports_Status_class);
_exports_Status_clientData.dtor = _wrap_delete_Status;
if (SWIGTYPE_p_tensorflow__Status->clientdata == 0) {
  SWIGTYPE_p_tensorflow__Status->clientdata = &_exports_Status_clientData;
}
/* Name: _exports_OpRegistryInterface, Type: p_tensorflow__OpRegistryInterface, Dtor: _wrap_delete_OpRegistryInterface */
v8::Handle<v8::FunctionTemplate> _exports_OpRegistryInterface_class = SWIGV8_CreateClassTemplate("_exports_OpRegistryInterface");
SWIGV8_SET_CLASS_TEMPL(_exports_OpRegistryInterface_clientData.class_templ, _exports_OpRegistryInterface_class);
_exports_OpRegistryInterface_clientData.dtor = _wrap_delete_OpRegistryInterface;
if (SWIGTYPE_p_tensorflow__OpRegistryInterface->clientdata == 0) {
  SWIGTYPE_p_tensorflow__OpRegistryInterface->clientdata = &_exports_OpRegistryInterface_clientData;
}
/* Name: _exports_OpRegistry, Type: p_tensorflow__OpRegistry, Dtor: _wrap_delete_OpRegistry */
v8::Handle<v8::FunctionTemplate> _exports_OpRegistry_class = SWIGV8_CreateClassTemplate("_exports_OpRegistry");
SWIGV8_SET_CLASS_TEMPL(_exports_OpRegistry_clientData.class_templ, _exports_OpRegistry_class);
_exports_OpRegistry_clientData.dtor = _wrap_delete_OpRegistry;
if (SWIGTYPE_p_tensorflow__OpRegistry->clientdata == 0) {
  SWIGTYPE_p_tensorflow__OpRegistry->clientdata = &_exports_OpRegistry_clientData;
}
/* Name: _exports_OpListOpRegistry, Type: p_tensorflow__OpListOpRegistry, Dtor: _wrap_delete_OpListOpRegistry */
v8::Handle<v8::FunctionTemplate> _exports_OpListOpRegistry_class = SWIGV8_CreateClassTemplate("_exports_OpListOpRegistry");
SWIGV8_SET_CLASS_TEMPL(_exports_OpListOpRegistry_clientData.class_templ, _exports_OpListOpRegistry_class);
_exports_OpListOpRegistry_clientData.dtor = _wrap_delete_OpListOpRegistry;
if (SWIGTYPE_p_tensorflow__OpListOpRegistry->clientdata == 0) {
  SWIGTYPE_p_tensorflow__OpListOpRegistry->clientdata = &_exports_OpListOpRegistry_clientData;
}
/* Name: _exports_OpDefBuilderReceiver, Type: p_tensorflow__register_op__OpDefBuilderReceiver, Dtor: _wrap_delete_OpDefBuilderReceiver */
v8::Handle<v8::FunctionTemplate> _exports_OpDefBuilderReceiver_class = SWIGV8_CreateClassTemplate("_exports_OpDefBuilderReceiver");
SWIGV8_SET_CLASS_TEMPL(_exports_OpDefBuilderReceiver_clientData.class_templ, _exports_OpDefBuilderReceiver_class);
_exports_OpDefBuilderReceiver_clientData.dtor = _wrap_delete_OpDefBuilderReceiver;
if (SWIGTYPE_p_tensorflow__register_op__OpDefBuilderReceiver->clientdata == 0) {
  SWIGTYPE_p_tensorflow__register_op__OpDefBuilderReceiver->clientdata = &_exports_OpDefBuilderReceiver_clientData;
}
/* Name: _exports_TF_Status, Type: p_TF_Status, Dtor: _wrap_delete_TF_Status */
v8::Handle<v8::FunctionTemplate> _exports_TF_Status_class = SWIGV8_CreateClassTemplate("_exports_TF_Status");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_Status_clientData.class_templ, _exports_TF_Status_class);
_exports_TF_Status_clientData.dtor = _wrap_delete_TF_Status;
if (SWIGTYPE_p_TF_Status->clientdata == 0) {
  SWIGTYPE_p_TF_Status->clientdata = &_exports_TF_Status_clientData;
}
/* Name: _exports_TF_Tensor, Type: p_TF_Tensor, Dtor: _wrap_delete_TF_Tensor */
v8::Handle<v8::FunctionTemplate> _exports_TF_Tensor_class = SWIGV8_CreateClassTemplate("_exports_TF_Tensor");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_Tensor_clientData.class_templ, _exports_TF_Tensor_class);
_exports_TF_Tensor_clientData.dtor = _wrap_delete_TF_Tensor;
if (SWIGTYPE_p_TF_Tensor->clientdata == 0) {
  SWIGTYPE_p_TF_Tensor->clientdata = &_exports_TF_Tensor_clientData;
}
/* Name: _exports_TF_SessionOptions, Type: p_TF_SessionOptions, Dtor: _wrap_delete_TF_SessionOptions */
v8::Handle<v8::FunctionTemplate> _exports_TF_SessionOptions_class = SWIGV8_CreateClassTemplate("_exports_TF_SessionOptions");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_SessionOptions_clientData.class_templ, _exports_TF_SessionOptions_class);
_exports_TF_SessionOptions_clientData.dtor = _wrap_delete_TF_SessionOptions;
if (SWIGTYPE_p_TF_SessionOptions->clientdata == 0) {
  SWIGTYPE_p_TF_SessionOptions->clientdata = &_exports_TF_SessionOptions_clientData;
}
/* Name: _exports_TF_DeprecatedSession, Type: p_TF_DeprecatedSession, Dtor: _wrap_delete_TF_DeprecatedSession */
v8::Handle<v8::FunctionTemplate> _exports_TF_DeprecatedSession_class = SWIGV8_CreateClassTemplate("_exports_TF_DeprecatedSession");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_DeprecatedSession_clientData.class_templ, _exports_TF_DeprecatedSession_class);
_exports_TF_DeprecatedSession_clientData.dtor = _wrap_delete_TF_DeprecatedSession;
if (SWIGTYPE_p_TF_DeprecatedSession->clientdata == 0) {
  SWIGTYPE_p_TF_DeprecatedSession->clientdata = &_exports_TF_DeprecatedSession_clientData;
}
/* Name: _exports_TensorCApi, Type: p_tensorflow__TensorCApi, Dtor: _wrap_delete_TensorCApi */
v8::Handle<v8::FunctionTemplate> _exports_TensorCApi_class = SWIGV8_CreateClassTemplate("_exports_TensorCApi");
SWIGV8_SET_CLASS_TEMPL(_exports_TensorCApi_clientData.class_templ, _exports_TensorCApi_class);
_exports_TensorCApi_clientData.dtor = _wrap_delete_TensorCApi;
if (SWIGTYPE_p_tensorflow__TensorCApi->clientdata == 0) {
  SWIGTYPE_p_tensorflow__TensorCApi->clientdata = &_exports_TensorCApi_clientData;
}
/* Name: _exports_TF_Library, Type: p_TF_Library, Dtor: _wrap_delete_TF_Library */
v8::Handle<v8::FunctionTemplate> _exports_TF_Library_class = SWIGV8_CreateClassTemplate("_exports_TF_Library");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_Library_clientData.class_templ, _exports_TF_Library_class);
_exports_TF_Library_clientData.dtor = _wrap_delete_TF_Library;
if (SWIGTYPE_p_TF_Library->clientdata == 0) {
  SWIGTYPE_p_TF_Library->clientdata = &_exports_TF_Library_clientData;
}
/* Name: _exports_TF_Graph, Type: p_TF_Graph, Dtor: _wrap_delete_TF_Graph */
v8::Handle<v8::FunctionTemplate> _exports_TF_Graph_class = SWIGV8_CreateClassTemplate("_exports_TF_Graph");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_Graph_clientData.class_templ, _exports_TF_Graph_class);
_exports_TF_Graph_clientData.dtor = _wrap_delete_TF_Graph;
if (SWIGTYPE_p_TF_Graph->clientdata == 0) {
  SWIGTYPE_p_TF_Graph->clientdata = &_exports_TF_Graph_clientData;
}
/* Name: _exports_TF_OperationDescription, Type: p_TF_OperationDescription, Dtor: _wrap_delete_TF_OperationDescription */
v8::Handle<v8::FunctionTemplate> _exports_TF_OperationDescription_class = SWIGV8_CreateClassTemplate("_exports_TF_OperationDescription");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_OperationDescription_clientData.class_templ, _exports_TF_OperationDescription_class);
_exports_TF_OperationDescription_clientData.dtor = _wrap_delete_TF_OperationDescription;
if (SWIGTYPE_p_TF_OperationDescription->clientdata == 0) {
  SWIGTYPE_p_TF_OperationDescription->clientdata = &_exports_TF_OperationDescription_clientData;
}
/* Name: _exports_TF_Operation, Type: p_TF_Operation, Dtor: 0 */
v8::Handle<v8::FunctionTemplate> _exports_TF_Operation_class = SWIGV8_CreateClassTemplate("_exports_TF_Operation");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_Operation_clientData.class_templ, _exports_TF_Operation_class);
_exports_TF_Operation_clientData.dtor = 0;
if (SWIGTYPE_p_TF_Operation->clientdata == 0) {
  SWIGTYPE_p_TF_Operation->clientdata = &_exports_TF_Operation_clientData;
}
/* Name: _exports_TF_Session, Type: p_TF_Session, Dtor: _wrap_delete_TF_Session */
v8::Handle<v8::FunctionTemplate> _exports_TF_Session_class = SWIGV8_CreateClassTemplate("_exports_TF_Session");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_Session_clientData.class_templ, _exports_TF_Session_class);
_exports_TF_Session_clientData.dtor = _wrap_delete_TF_Session;
if (SWIGTYPE_p_TF_Session->clientdata == 0) {
  SWIGTYPE_p_TF_Session->clientdata = &_exports_TF_Session_clientData;
}
/* Name: _exports_TF_ImportGraphDefOptions, Type: p_TF_ImportGraphDefOptions, Dtor: _wrap_delete_TF_ImportGraphDefOptions */
v8::Handle<v8::FunctionTemplate> _exports_TF_ImportGraphDefOptions_class = SWIGV8_CreateClassTemplate("_exports_TF_ImportGraphDefOptions");
SWIGV8_SET_CLASS_TEMPL(_exports_TF_ImportGraphDefOptions_clientData.class_templ, _exports_TF_ImportGraphDefOptions_class);
_exports_TF_ImportGraphDefOptions_clientData.dtor = _wrap_delete_TF_ImportGraphDefOptions;
if (SWIGTYPE_p_TF_ImportGraphDefOptions->clientdata == 0) {
  SWIGTYPE_p_TF_ImportGraphDefOptions->clientdata = &_exports_TF_ImportGraphDefOptions_clientData;
}
/* Name: _exports_CSession, Type: p_CSession, Dtor: _wrap_delete_CSession */
v8::Handle<v8::FunctionTemplate> _exports_CSession_class = SWIGV8_CreateClassTemplate("_exports_CSession");
SWIGV8_SET_CLASS_TEMPL(_exports_CSession_clientData.class_templ, _exports_CSession_class);
_exports_CSession_clientData.dtor = _wrap_delete_CSession;
if (SWIGTYPE_p_CSession->clientdata == 0) {
  SWIGTYPE_p_CSession->clientdata = &_exports_CSession_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddMemberFunction(_exports_MessageLite_class, "GetTypeName", _wrap_MessageLite_GetTypeName);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "New", _wrap_MessageLite__wrap_MessageLite_New);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "GetArena", _wrap_MessageLite_GetArena);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "GetMaybeArenaPointer", _wrap_MessageLite_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "Clear", _wrap_MessageLite_Clear);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "IsInitialized", _wrap_MessageLite_IsInitialized);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "InitializationErrorString", _wrap_MessageLite_InitializationErrorString);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "CheckTypeAndMergeFrom", _wrap_MessageLite_CheckTypeAndMergeFrom);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "ParseFromCodedStream", _wrap_MessageLite_ParseFromCodedStream);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "ParsePartialFromCodedStream", _wrap_MessageLite_ParsePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "ParseFromZeroCopyStream", _wrap_MessageLite_ParseFromZeroCopyStream);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "ParsePartialFromZeroCopyStream", _wrap_MessageLite_ParsePartialFromZeroCopyStream);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "ParseFromBoundedZeroCopyStream", _wrap_MessageLite_ParseFromBoundedZeroCopyStream);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "ParsePartialFromBoundedZeroCopyStream", _wrap_MessageLite_ParsePartialFromBoundedZeroCopyStream);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "ParseFromString", _wrap_MessageLite_ParseFromString);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "ParsePartialFromString", _wrap_MessageLite_ParsePartialFromString);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "ParseFromArray", _wrap_MessageLite_ParseFromArray);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "ParsePartialFromArray", _wrap_MessageLite_ParsePartialFromArray);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "MergeFromCodedStream", _wrap_MessageLite_MergeFromCodedStream);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "MergePartialFromCodedStream", _wrap_MessageLite_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "SerializeToCodedStream", _wrap_MessageLite_SerializeToCodedStream);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "SerializePartialToCodedStream", _wrap_MessageLite_SerializePartialToCodedStream);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "SerializeToZeroCopyStream", _wrap_MessageLite_SerializeToZeroCopyStream);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "SerializePartialToZeroCopyStream", _wrap_MessageLite_SerializePartialToZeroCopyStream);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "SerializeToString", _wrap_MessageLite_SerializeToString);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "SerializePartialToString", _wrap_MessageLite_SerializePartialToString);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "SerializeToArray", _wrap_MessageLite_SerializeToArray);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "SerializePartialToArray", _wrap_MessageLite_SerializePartialToArray);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "SerializeAsString", _wrap_MessageLite_SerializeAsString);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "SerializePartialAsString", _wrap_MessageLite_SerializePartialAsString);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "AppendToString", _wrap_MessageLite_AppendToString);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "AppendPartialToString", _wrap_MessageLite_AppendPartialToString);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "ByteSize", _wrap_MessageLite_ByteSize);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "ByteSizeLong", _wrap_MessageLite_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "SerializeWithCachedSizes", _wrap_MessageLite_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "SerializeWithCachedSizesToArray", _wrap_MessageLite_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "GetCachedSize", _wrap_MessageLite_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_MessageLite_class, "InternalSerializeWithCachedSizesToArray", _wrap_MessageLite_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberVariable(_exports_Metadata_class, "descriptor", _wrap_Metadata_descriptor_get, _wrap_Metadata_descriptor_set);
SWIGV8_AddMemberVariable(_exports_Metadata_class, "reflection", _wrap_Metadata_reflection_get, _wrap_Metadata_reflection_set);
SWIGV8_AddMemberFunction(_exports_Message_class, "New", _wrap_Message__wrap_Message_New);
SWIGV8_AddMemberFunction(_exports_Message_class, "CopyFrom", _wrap_Message_CopyFrom);
SWIGV8_AddMemberFunction(_exports_Message_class, "MergeFrom", _wrap_Message_MergeFrom);
SWIGV8_AddMemberFunction(_exports_Message_class, "CheckInitialized", _wrap_Message_CheckInitialized);
SWIGV8_AddMemberFunction(_exports_Message_class, "FindInitializationErrors", _wrap_Message_FindInitializationErrors);
SWIGV8_AddMemberFunction(_exports_Message_class, "InitializationErrorString", _wrap_Message_InitializationErrorString);
SWIGV8_AddMemberFunction(_exports_Message_class, "DiscardUnknownFields", _wrap_Message_DiscardUnknownFields);
SWIGV8_AddMemberFunction(_exports_Message_class, "SpaceUsed", _wrap_Message_SpaceUsed);
SWIGV8_AddMemberFunction(_exports_Message_class, "DebugString", _wrap_Message_DebugString);
SWIGV8_AddMemberFunction(_exports_Message_class, "ShortDebugString", _wrap_Message_ShortDebugString);
SWIGV8_AddMemberFunction(_exports_Message_class, "Utf8DebugString", _wrap_Message_Utf8DebugString);
SWIGV8_AddMemberFunction(_exports_Message_class, "PrintDebugString", _wrap_Message_PrintDebugString);
SWIGV8_AddMemberFunction(_exports_Message_class, "ParseFromFileDescriptor", _wrap_Message_ParseFromFileDescriptor);
SWIGV8_AddMemberFunction(_exports_Message_class, "ParsePartialFromFileDescriptor", _wrap_Message_ParsePartialFromFileDescriptor);
SWIGV8_AddMemberFunction(_exports_Message_class, "ParseFromIstream", _wrap_Message_ParseFromIstream);
SWIGV8_AddMemberFunction(_exports_Message_class, "ParsePartialFromIstream", _wrap_Message_ParsePartialFromIstream);
SWIGV8_AddMemberFunction(_exports_Message_class, "SerializeToFileDescriptor", _wrap_Message_SerializeToFileDescriptor);
SWIGV8_AddMemberFunction(_exports_Message_class, "SerializePartialToFileDescriptor", _wrap_Message_SerializePartialToFileDescriptor);
SWIGV8_AddMemberFunction(_exports_Message_class, "SerializeToOstream", _wrap_Message_SerializeToOstream);
SWIGV8_AddMemberFunction(_exports_Message_class, "SerializePartialToOstream", _wrap_Message_SerializePartialToOstream);
SWIGV8_AddMemberFunction(_exports_Message_class, "GetTypeName", _wrap_Message_GetTypeName);
SWIGV8_AddMemberFunction(_exports_Message_class, "Clear", _wrap_Message_Clear);
SWIGV8_AddMemberFunction(_exports_Message_class, "IsInitialized", _wrap_Message_IsInitialized);
SWIGV8_AddMemberFunction(_exports_Message_class, "CheckTypeAndMergeFrom", _wrap_Message_CheckTypeAndMergeFrom);
SWIGV8_AddMemberFunction(_exports_Message_class, "MergePartialFromCodedStream", _wrap_Message_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_Message_class, "ByteSizeLong", _wrap_Message_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_Message_class, "SerializeWithCachedSizes", _wrap_Message_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_Message_class, "GetDescriptor", _wrap_Message_GetDescriptor);
SWIGV8_AddMemberFunction(_exports_Message_class, "GetReflection", _wrap_Message_GetReflection);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetUnknownFields", _wrap_Reflection_GetUnknownFields);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "MutableUnknownFields", _wrap_Reflection_MutableUnknownFields);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SpaceUsed", _wrap_Reflection_SpaceUsed);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "HasField", _wrap_Reflection_HasField);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "FieldSize", _wrap_Reflection_FieldSize);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "ClearField", _wrap_Reflection_ClearField);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "HasOneof", _wrap_Reflection_HasOneof);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "ClearOneof", _wrap_Reflection_ClearOneof);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetOneofFieldDescriptor", _wrap_Reflection_GetOneofFieldDescriptor);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "RemoveLast", _wrap_Reflection_RemoveLast);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "ReleaseLast", _wrap_Reflection_ReleaseLast);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "Swap", _wrap_Reflection_Swap);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SwapFields", _wrap_Reflection_SwapFields);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SwapElements", _wrap_Reflection_SwapElements);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "ListFields", _wrap_Reflection_ListFields);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetInt32", _wrap_Reflection_GetInt32);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetInt64", _wrap_Reflection_GetInt64);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetUInt32", _wrap_Reflection_GetUInt32);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetUInt64", _wrap_Reflection_GetUInt64);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetFloat", _wrap_Reflection_GetFloat);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetDouble", _wrap_Reflection_GetDouble);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetBool", _wrap_Reflection_GetBool);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetString", _wrap_Reflection_GetString);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetEnum", _wrap_Reflection_GetEnum);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetEnumValue", _wrap_Reflection_GetEnumValue);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetMessage", _wrap_Reflection__wrap_Reflection_GetMessage);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetStringReference", _wrap_Reflection_GetStringReference);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetInt32", _wrap_Reflection_SetInt32);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetInt64", _wrap_Reflection_SetInt64);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetUInt32", _wrap_Reflection_SetUInt32);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetUInt64", _wrap_Reflection_SetUInt64);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetFloat", _wrap_Reflection_SetFloat);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetDouble", _wrap_Reflection_SetDouble);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetBool", _wrap_Reflection_SetBool);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetString", _wrap_Reflection_SetString);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetEnum", _wrap_Reflection_SetEnum);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetEnumValue", _wrap_Reflection_SetEnumValue);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "MutableMessage", _wrap_Reflection__wrap_Reflection_MutableMessage);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetAllocatedMessage", _wrap_Reflection_SetAllocatedMessage);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "ReleaseMessage", _wrap_Reflection__wrap_Reflection_ReleaseMessage);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetRepeatedInt32", _wrap_Reflection_GetRepeatedInt32);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetRepeatedInt64", _wrap_Reflection_GetRepeatedInt64);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetRepeatedUInt32", _wrap_Reflection_GetRepeatedUInt32);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetRepeatedUInt64", _wrap_Reflection_GetRepeatedUInt64);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetRepeatedFloat", _wrap_Reflection_GetRepeatedFloat);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetRepeatedDouble", _wrap_Reflection_GetRepeatedDouble);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetRepeatedBool", _wrap_Reflection_GetRepeatedBool);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetRepeatedString", _wrap_Reflection_GetRepeatedString);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetRepeatedEnum", _wrap_Reflection_GetRepeatedEnum);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetRepeatedEnumValue", _wrap_Reflection_GetRepeatedEnumValue);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetRepeatedMessage", _wrap_Reflection_GetRepeatedMessage);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetRepeatedStringReference", _wrap_Reflection_GetRepeatedStringReference);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetRepeatedInt32", _wrap_Reflection_SetRepeatedInt32);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetRepeatedInt64", _wrap_Reflection_SetRepeatedInt64);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetRepeatedUInt32", _wrap_Reflection_SetRepeatedUInt32);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetRepeatedUInt64", _wrap_Reflection_SetRepeatedUInt64);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetRepeatedFloat", _wrap_Reflection_SetRepeatedFloat);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetRepeatedDouble", _wrap_Reflection_SetRepeatedDouble);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetRepeatedBool", _wrap_Reflection_SetRepeatedBool);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetRepeatedString", _wrap_Reflection_SetRepeatedString);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetRepeatedEnum", _wrap_Reflection_SetRepeatedEnum);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SetRepeatedEnumValue", _wrap_Reflection_SetRepeatedEnumValue);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "MutableRepeatedMessage", _wrap_Reflection_MutableRepeatedMessage);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "AddInt32", _wrap_Reflection_AddInt32);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "AddInt64", _wrap_Reflection_AddInt64);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "AddUInt32", _wrap_Reflection_AddUInt32);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "AddUInt64", _wrap_Reflection_AddUInt64);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "AddFloat", _wrap_Reflection_AddFloat);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "AddDouble", _wrap_Reflection_AddDouble);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "AddBool", _wrap_Reflection_AddBool);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "AddString", _wrap_Reflection_AddString);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "AddEnum", _wrap_Reflection_AddEnum);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "AddEnumValue", _wrap_Reflection_AddEnumValue);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "AddMessage", _wrap_Reflection__wrap_Reflection_AddMessage);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "AddAllocatedMessage", _wrap_Reflection_AddAllocatedMessage);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "FindKnownExtensionByName", _wrap_Reflection_FindKnownExtensionByName);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "FindKnownExtensionByNumber", _wrap_Reflection_FindKnownExtensionByNumber);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "SupportsUnknownEnumValues", _wrap_Reflection_SupportsUnknownEnumValues);
SWIGV8_AddMemberFunction(_exports_Reflection_class, "GetMessageFactory", _wrap_Reflection_GetMessageFactory);
SWIGV8_AddMemberFunction(_exports_MessageFactory_class, "GetPrototype", _wrap_MessageFactory_GetPrototype);
SWIGV8_AddStaticVariable(exports_obj, "TF_FLOAT", _wrap_TF_FLOAT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_DOUBLE", _wrap_TF_DOUBLE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_INT32", _wrap_TF_INT32, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_UINT8", _wrap_TF_UINT8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_INT16", _wrap_TF_INT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_INT8", _wrap_TF_INT8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_STRING", _wrap_TF_STRING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_COMPLEX64", _wrap_TF_COMPLEX64, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_COMPLEX", _wrap_TF_COMPLEX, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_INT64", _wrap_TF_INT64, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_BOOL", _wrap_TF_BOOL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_QINT8", _wrap_TF_QINT8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_QUINT8", _wrap_TF_QUINT8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_QINT32", _wrap_TF_QINT32, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_BFLOAT16", _wrap_TF_BFLOAT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_QINT16", _wrap_TF_QINT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_QUINT16", _wrap_TF_QUINT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_UINT16", _wrap_TF_UINT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_COMPLEX128", _wrap_TF_COMPLEX128, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_HALF", _wrap_TF_HALF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_RESOURCE", _wrap_TF_RESOURCE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_OK", _wrap_TF_OK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_CANCELLED", _wrap_TF_CANCELLED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_UNKNOWN", _wrap_TF_UNKNOWN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_INVALID_ARGUMENT", _wrap_TF_INVALID_ARGUMENT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_DEADLINE_EXCEEDED", _wrap_TF_DEADLINE_EXCEEDED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_NOT_FOUND", _wrap_TF_NOT_FOUND, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_ALREADY_EXISTS", _wrap_TF_ALREADY_EXISTS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_PERMISSION_DENIED", _wrap_TF_PERMISSION_DENIED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_UNAUTHENTICATED", _wrap_TF_UNAUTHENTICATED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_RESOURCE_EXHAUSTED", _wrap_TF_RESOURCE_EXHAUSTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_FAILED_PRECONDITION", _wrap_TF_FAILED_PRECONDITION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_ABORTED", _wrap_TF_ABORTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_OUT_OF_RANGE", _wrap_TF_OUT_OF_RANGE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_UNIMPLEMENTED", _wrap_TF_UNIMPLEMENTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_INTERNAL", _wrap_TF_INTERNAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_UNAVAILABLE", _wrap_TF_UNAVAILABLE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_DATA_LOSS", _wrap_TF_DATA_LOSS, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_TF_Buffer_class, "data", _wrap_TF_Buffer_data_get, _wrap_TF_Buffer_data_set);
SWIGV8_AddMemberVariable(_exports_TF_Buffer_class, "length", _wrap_TF_Buffer_length_get, _wrap_TF_Buffer_length_set);
SWIGV8_AddMemberVariable(_exports_TF_Buffer_class, "data_deallocator", _wrap_TF_Buffer_data_deallocator_get, _wrap_TF_Buffer_data_deallocator_set);
SWIGV8_AddMemberVariable(_exports_TF_Input_class, "oper", _wrap_TF_Input_oper_get, _wrap_TF_Input_oper_set);
SWIGV8_AddMemberVariable(_exports_TF_Input_class, "index", _wrap_TF_Input_index_get, _wrap_TF_Input_index_set);
SWIGV8_AddMemberVariable(_exports_TF_Output_class, "oper", _wrap_TF_Output_oper_get, _wrap_TF_Output_oper_set);
SWIGV8_AddMemberVariable(_exports_TF_Output_class, "index", _wrap_TF_Output_index_get, _wrap_TF_Output_index_set);
SWIGV8_AddStaticVariable(exports_obj, "TF_ATTR_STRING", _wrap_TF_ATTR_STRING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_ATTR_INT", _wrap_TF_ATTR_INT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_ATTR_FLOAT", _wrap_TF_ATTR_FLOAT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_ATTR_BOOL", _wrap_TF_ATTR_BOOL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_ATTR_TYPE", _wrap_TF_ATTR_TYPE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_ATTR_SHAPE", _wrap_TF_ATTR_SHAPE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_ATTR_TENSOR", _wrap_TF_ATTR_TENSOR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_ATTR_PLACEHOLDER", _wrap_TF_ATTR_PLACEHOLDER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_ATTR_FUNC", _wrap_TF_ATTR_FUNC, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_TF_AttrMetadata_class, "is_list", _wrap_TF_AttrMetadata_is_list_get, _wrap_TF_AttrMetadata_is_list_set);
SWIGV8_AddMemberVariable(_exports_TF_AttrMetadata_class, "list_size", _wrap_TF_AttrMetadata_list_size_get, _wrap_TF_AttrMetadata_list_size_set);
SWIGV8_AddMemberVariable(_exports_TF_AttrMetadata_class, "type", _wrap_TF_AttrMetadata_type_get, _wrap_TF_AttrMetadata_type_set);
SWIGV8_AddMemberVariable(_exports_TF_AttrMetadata_class, "total_size", _wrap_TF_AttrMetadata_total_size_get, _wrap_TF_AttrMetadata_total_size_set);
SWIGV8_AddStaticVariable(exports_obj, "TF_MAJOR_VERSION", _wrap_TF_MAJOR_VERSION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_MINOR_VERSION", _wrap_TF_MINOR_VERSION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_PATCH_VERSION", _wrap_TF_PATCH_VERSION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_VERSION_SUFFIX", _wrap_TF_VERSION_SUFFIX, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_VERSION_STRING", _wrap_TF_VERSION_STRING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_GRAPH_DEF_VERSION_MIN_PRODUCER", _wrap_TF_GRAPH_DEF_VERSION_MIN_PRODUCER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_GRAPH_DEF_VERSION_MIN_CONSUMER", _wrap_TF_GRAPH_DEF_VERSION_MIN_CONSUMER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_GRAPH_DEF_VERSION", _wrap_TF_GRAPH_DEF_VERSION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_CHECKPOINT_VERSION_MIN_PRODUCER", _wrap_TF_CHECKPOINT_VERSION_MIN_PRODUCER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_CHECKPOINT_VERSION_MIN_CONSUMER", _wrap_TF_CHECKPOINT_VERSION_MIN_CONSUMER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TF_CHECKPOINT_VERSION", _wrap_TF_CHECKPOINT_VERSION, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_INVALID", _wrap_tensorflow_DT_INVALID, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_FLOAT", _wrap_tensorflow_DT_FLOAT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_DOUBLE", _wrap_tensorflow_DT_DOUBLE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_INT32", _wrap_tensorflow_DT_INT32, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_UINT8", _wrap_tensorflow_DT_UINT8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_INT16", _wrap_tensorflow_DT_INT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_INT8", _wrap_tensorflow_DT_INT8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_STRING", _wrap_tensorflow_DT_STRING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_COMPLEX64", _wrap_tensorflow_DT_COMPLEX64, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_INT64", _wrap_tensorflow_DT_INT64, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_BOOL", _wrap_tensorflow_DT_BOOL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_QINT8", _wrap_tensorflow_DT_QINT8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_QUINT8", _wrap_tensorflow_DT_QUINT8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_QINT32", _wrap_tensorflow_DT_QINT32, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_BFLOAT16", _wrap_tensorflow_DT_BFLOAT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_QINT16", _wrap_tensorflow_DT_QINT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_QUINT16", _wrap_tensorflow_DT_QUINT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_UINT16", _wrap_tensorflow_DT_UINT16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_COMPLEX128", _wrap_tensorflow_DT_COMPLEX128, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_HALF", _wrap_tensorflow_DT_HALF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_RESOURCE", _wrap_tensorflow_DT_RESOURCE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_FLOAT_REF", _wrap_tensorflow_DT_FLOAT_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_DOUBLE_REF", _wrap_tensorflow_DT_DOUBLE_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_INT32_REF", _wrap_tensorflow_DT_INT32_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_UINT8_REF", _wrap_tensorflow_DT_UINT8_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_INT16_REF", _wrap_tensorflow_DT_INT16_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_INT8_REF", _wrap_tensorflow_DT_INT8_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_STRING_REF", _wrap_tensorflow_DT_STRING_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_COMPLEX64_REF", _wrap_tensorflow_DT_COMPLEX64_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_INT64_REF", _wrap_tensorflow_DT_INT64_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_BOOL_REF", _wrap_tensorflow_DT_BOOL_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_QINT8_REF", _wrap_tensorflow_DT_QINT8_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_QUINT8_REF", _wrap_tensorflow_DT_QUINT8_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_QINT32_REF", _wrap_tensorflow_DT_QINT32_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_BFLOAT16_REF", _wrap_tensorflow_DT_BFLOAT16_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_QINT16_REF", _wrap_tensorflow_DT_QINT16_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_QUINT16_REF", _wrap_tensorflow_DT_QUINT16_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_UINT16_REF", _wrap_tensorflow_DT_UINT16_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_COMPLEX128_REF", _wrap_tensorflow_DT_COMPLEX128_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_HALF_REF", _wrap_tensorflow_DT_HALF_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DT_RESOURCE_REF", _wrap_tensorflow_DT_RESOURCE_REF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DataType_INT_MIN_SENTINEL_DO_NOT_USE_", _wrap_tensorflow_DataType_INT_MIN_SENTINEL_DO_NOT_USE_, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DataType_INT_MAX_SENTINEL_DO_NOT_USE_", _wrap_tensorflow_DataType_INT_MAX_SENTINEL_DO_NOT_USE_, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DataType_MIN", _wrap_DataType_MIN_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DataType_MAX", _wrap_DataType_MAX_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DataType_ARRAYSIZE", _wrap_DataType_ARRAYSIZE_get, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "GetArena", _wrap_NodeDef_GetArena);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "GetMaybeArenaPointer", _wrap_NodeDef_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "UnsafeArenaSwap", _wrap_NodeDef_UnsafeArenaSwap);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "Swap", _wrap_NodeDef_Swap);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "New", _wrap_NodeDef__wrap_NodeDef_New);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "CopyFrom", _wrap_NodeDef__wrap_NodeDef_CopyFrom);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "MergeFrom", _wrap_NodeDef__wrap_NodeDef_MergeFrom);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "Clear", _wrap_NodeDef_Clear);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "IsInitialized", _wrap_NodeDef_IsInitialized);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "ByteSizeLong", _wrap_NodeDef_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "MergePartialFromCodedStream", _wrap_NodeDef_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "SerializeWithCachedSizes", _wrap_NodeDef_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "InternalSerializeWithCachedSizesToArray", _wrap_NodeDef_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "SerializeWithCachedSizesToArray", _wrap_NodeDef_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "GetCachedSize", _wrap_NodeDef_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "GetMetadata", _wrap_NodeDef_GetMetadata);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "clear_name", _wrap_NodeDef_clear_name);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "name", _wrap_NodeDef_name);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "set_name", _wrap_NodeDef__wrap_NodeDef_set_name);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "mutable_name", _wrap_NodeDef_mutable_name);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "release_name", _wrap_NodeDef_release_name);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "set_allocated_name", _wrap_NodeDef_set_allocated_name);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "unsafe_arena_release_name", _wrap_NodeDef_unsafe_arena_release_name);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "unsafe_arena_set_allocated_name", _wrap_NodeDef_unsafe_arena_set_allocated_name);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "clear_op", _wrap_NodeDef_clear_op);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "op", _wrap_NodeDef_op);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "set_op", _wrap_NodeDef__wrap_NodeDef_set_op);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "mutable_op", _wrap_NodeDef_mutable_op);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "release_op", _wrap_NodeDef_release_op);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "set_allocated_op", _wrap_NodeDef_set_allocated_op);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "unsafe_arena_release_op", _wrap_NodeDef_unsafe_arena_release_op);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "unsafe_arena_set_allocated_op", _wrap_NodeDef_unsafe_arena_set_allocated_op);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "input_size", _wrap_NodeDef_input_size);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "clear_input", _wrap_NodeDef_clear_input);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "set_input", _wrap_NodeDef__wrap_NodeDef_set_input);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "add_input", _wrap_NodeDef__wrap_NodeDef_add_input);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "input", _wrap_NodeDef__wrap_NodeDef_input);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "mutable_input", _wrap_NodeDef__wrap_NodeDef_mutable_input);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "clear_device", _wrap_NodeDef_clear_device);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "device", _wrap_NodeDef_device);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "set_device", _wrap_NodeDef__wrap_NodeDef_set_device);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "mutable_device", _wrap_NodeDef_mutable_device);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "release_device", _wrap_NodeDef_release_device);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "set_allocated_device", _wrap_NodeDef_set_allocated_device);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "unsafe_arena_release_device", _wrap_NodeDef_unsafe_arena_release_device);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "unsafe_arena_set_allocated_device", _wrap_NodeDef_unsafe_arena_set_allocated_device);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "attr_size", _wrap_NodeDef_attr_size);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "clear_attr", _wrap_NodeDef_clear_attr);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "attr", _wrap_NodeDef_attr);
SWIGV8_AddMemberFunction(_exports_NodeDef_class, "mutable_attr", _wrap_NodeDef_mutable_attr);
SWIGV8_AddStaticVariable(exports_obj, "NodeDef_default_instance_", _wrap_NodeDef_default_instance__get, _wrap_NodeDef_default_instance__set);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "GetArena", _wrap_VariableDef_GetArena);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "GetMaybeArenaPointer", _wrap_VariableDef_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "UnsafeArenaSwap", _wrap_VariableDef_UnsafeArenaSwap);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "Swap", _wrap_VariableDef_Swap);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "New", _wrap_VariableDef__wrap_VariableDef_New);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "CopyFrom", _wrap_VariableDef__wrap_VariableDef_CopyFrom);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "MergeFrom", _wrap_VariableDef__wrap_VariableDef_MergeFrom);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "Clear", _wrap_VariableDef_Clear);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "IsInitialized", _wrap_VariableDef_IsInitialized);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "ByteSizeLong", _wrap_VariableDef_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "MergePartialFromCodedStream", _wrap_VariableDef_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "SerializeWithCachedSizes", _wrap_VariableDef_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "InternalSerializeWithCachedSizesToArray", _wrap_VariableDef_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "SerializeWithCachedSizesToArray", _wrap_VariableDef_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "GetCachedSize", _wrap_VariableDef_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "GetMetadata", _wrap_VariableDef_GetMetadata);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "clear_variable_name", _wrap_VariableDef_clear_variable_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "variable_name", _wrap_VariableDef_variable_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "set_variable_name", _wrap_VariableDef__wrap_VariableDef_set_variable_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "mutable_variable_name", _wrap_VariableDef_mutable_variable_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "release_variable_name", _wrap_VariableDef_release_variable_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "set_allocated_variable_name", _wrap_VariableDef_set_allocated_variable_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "unsafe_arena_release_variable_name", _wrap_VariableDef_unsafe_arena_release_variable_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "unsafe_arena_set_allocated_variable_name", _wrap_VariableDef_unsafe_arena_set_allocated_variable_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "clear_initializer_name", _wrap_VariableDef_clear_initializer_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "initializer_name", _wrap_VariableDef_initializer_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "set_initializer_name", _wrap_VariableDef__wrap_VariableDef_set_initializer_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "mutable_initializer_name", _wrap_VariableDef_mutable_initializer_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "release_initializer_name", _wrap_VariableDef_release_initializer_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "set_allocated_initializer_name", _wrap_VariableDef_set_allocated_initializer_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "unsafe_arena_release_initializer_name", _wrap_VariableDef_unsafe_arena_release_initializer_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "unsafe_arena_set_allocated_initializer_name", _wrap_VariableDef_unsafe_arena_set_allocated_initializer_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "clear_snapshot_name", _wrap_VariableDef_clear_snapshot_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "snapshot_name", _wrap_VariableDef_snapshot_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "set_snapshot_name", _wrap_VariableDef__wrap_VariableDef_set_snapshot_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "mutable_snapshot_name", _wrap_VariableDef_mutable_snapshot_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "release_snapshot_name", _wrap_VariableDef_release_snapshot_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "set_allocated_snapshot_name", _wrap_VariableDef_set_allocated_snapshot_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "unsafe_arena_release_snapshot_name", _wrap_VariableDef_unsafe_arena_release_snapshot_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "unsafe_arena_set_allocated_snapshot_name", _wrap_VariableDef_unsafe_arena_set_allocated_snapshot_name);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "has_save_slice_info_def", _wrap_VariableDef_has_save_slice_info_def);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "clear_save_slice_info_def", _wrap_VariableDef_clear_save_slice_info_def);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "save_slice_info_def", _wrap_VariableDef_save_slice_info_def);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "mutable_save_slice_info_def", _wrap_VariableDef_mutable_save_slice_info_def);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "release_save_slice_info_def", _wrap_VariableDef_release_save_slice_info_def);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "set_allocated_save_slice_info_def", _wrap_VariableDef_set_allocated_save_slice_info_def);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "unsafe_arena_release_save_slice_info_def", _wrap_VariableDef_unsafe_arena_release_save_slice_info_def);
SWIGV8_AddMemberFunction(_exports_VariableDef_class, "unsafe_arena_set_allocated_save_slice_info_def", _wrap_VariableDef_unsafe_arena_set_allocated_save_slice_info_def);
SWIGV8_AddStaticVariable(exports_obj, "VariableDef_default_instance_", _wrap_VariableDef_default_instance__get, _wrap_VariableDef_default_instance__set);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "GetArena", _wrap_SaveSliceInfoDef_GetArena);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "GetMaybeArenaPointer", _wrap_SaveSliceInfoDef_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "UnsafeArenaSwap", _wrap_SaveSliceInfoDef_UnsafeArenaSwap);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "Swap", _wrap_SaveSliceInfoDef_Swap);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "New", _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_New);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "CopyFrom", _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_CopyFrom);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "MergeFrom", _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_MergeFrom);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "Clear", _wrap_SaveSliceInfoDef_Clear);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "IsInitialized", _wrap_SaveSliceInfoDef_IsInitialized);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "ByteSizeLong", _wrap_SaveSliceInfoDef_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "MergePartialFromCodedStream", _wrap_SaveSliceInfoDef_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "SerializeWithCachedSizes", _wrap_SaveSliceInfoDef_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "InternalSerializeWithCachedSizesToArray", _wrap_SaveSliceInfoDef_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "SerializeWithCachedSizesToArray", _wrap_SaveSliceInfoDef_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "GetCachedSize", _wrap_SaveSliceInfoDef_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "GetMetadata", _wrap_SaveSliceInfoDef_GetMetadata);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "clear_full_name", _wrap_SaveSliceInfoDef_clear_full_name);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "full_name", _wrap_SaveSliceInfoDef_full_name);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "set_full_name", _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_set_full_name);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "mutable_full_name", _wrap_SaveSliceInfoDef_mutable_full_name);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "release_full_name", _wrap_SaveSliceInfoDef_release_full_name);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "set_allocated_full_name", _wrap_SaveSliceInfoDef_set_allocated_full_name);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "unsafe_arena_release_full_name", _wrap_SaveSliceInfoDef_unsafe_arena_release_full_name);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "unsafe_arena_set_allocated_full_name", _wrap_SaveSliceInfoDef_unsafe_arena_set_allocated_full_name);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "full_shape_size", _wrap_SaveSliceInfoDef_full_shape_size);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "clear_full_shape", _wrap_SaveSliceInfoDef_clear_full_shape);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "set_full_shape", _wrap_SaveSliceInfoDef_set_full_shape);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "add_full_shape", _wrap_SaveSliceInfoDef_add_full_shape);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "full_shape", _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_full_shape);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "mutable_full_shape", _wrap_SaveSliceInfoDef_mutable_full_shape);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "var_offset_size", _wrap_SaveSliceInfoDef_var_offset_size);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "clear_var_offset", _wrap_SaveSliceInfoDef_clear_var_offset);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "set_var_offset", _wrap_SaveSliceInfoDef_set_var_offset);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "add_var_offset", _wrap_SaveSliceInfoDef_add_var_offset);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "var_offset", _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_var_offset);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "mutable_var_offset", _wrap_SaveSliceInfoDef_mutable_var_offset);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "var_shape_size", _wrap_SaveSliceInfoDef_var_shape_size);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "clear_var_shape", _wrap_SaveSliceInfoDef_clear_var_shape);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "set_var_shape", _wrap_SaveSliceInfoDef_set_var_shape);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "add_var_shape", _wrap_SaveSliceInfoDef_add_var_shape);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "var_shape", _wrap_SaveSliceInfoDef__wrap_SaveSliceInfoDef_var_shape);
SWIGV8_AddMemberFunction(_exports_SaveSliceInfoDef_class, "mutable_var_shape", _wrap_SaveSliceInfoDef_mutable_var_shape);
SWIGV8_AddStaticVariable(exports_obj, "SaveSliceInfoDef_default_instance_", _wrap_SaveSliceInfoDef_default_instance__get, _wrap_SaveSliceInfoDef_default_instance__set);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "GetArena", _wrap_AttrValue_ListValue_GetArena);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "GetMaybeArenaPointer", _wrap_AttrValue_ListValue_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "UnsafeArenaSwap", _wrap_AttrValue_ListValue_UnsafeArenaSwap);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "Swap", _wrap_AttrValue_ListValue_Swap);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "New", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_New);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "CopyFrom", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_CopyFrom);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "MergeFrom", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_MergeFrom);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "Clear", _wrap_AttrValue_ListValue_Clear);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "IsInitialized", _wrap_AttrValue_ListValue_IsInitialized);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "ByteSizeLong", _wrap_AttrValue_ListValue_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "MergePartialFromCodedStream", _wrap_AttrValue_ListValue_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "SerializeWithCachedSizes", _wrap_AttrValue_ListValue_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "InternalSerializeWithCachedSizesToArray", _wrap_AttrValue_ListValue_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "SerializeWithCachedSizesToArray", _wrap_AttrValue_ListValue_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "GetCachedSize", _wrap_AttrValue_ListValue_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "GetMetadata", _wrap_AttrValue_ListValue_GetMetadata);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "s_size", _wrap_AttrValue_ListValue_s_size);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "clear_s", _wrap_AttrValue_ListValue_clear_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "set_s", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_set_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "add_s", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_add_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "s", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "mutable_s", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_mutable_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "i_size", _wrap_AttrValue_ListValue_i_size);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "clear_i", _wrap_AttrValue_ListValue_clear_i);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "set_i", _wrap_AttrValue_ListValue_set_i);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "add_i", _wrap_AttrValue_ListValue_add_i);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "i", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_i);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "mutable_i", _wrap_AttrValue_ListValue_mutable_i);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "f_size", _wrap_AttrValue_ListValue_f_size);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "clear_f", _wrap_AttrValue_ListValue_clear_f);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "set_f", _wrap_AttrValue_ListValue_set_f);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "add_f", _wrap_AttrValue_ListValue_add_f);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "f", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_f);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "mutable_f", _wrap_AttrValue_ListValue_mutable_f);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "b_size", _wrap_AttrValue_ListValue_b_size);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "clear_b", _wrap_AttrValue_ListValue_clear_b);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "set_b", _wrap_AttrValue_ListValue_set_b);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "add_b", _wrap_AttrValue_ListValue_add_b);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "b", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_b);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "mutable_b", _wrap_AttrValue_ListValue_mutable_b);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "type_size", _wrap_AttrValue_ListValue_type_size);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "clear_type", _wrap_AttrValue_ListValue_clear_type);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "set_type", _wrap_AttrValue_ListValue_set_type);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "add_type", _wrap_AttrValue_ListValue_add_type);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "type", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_type);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "mutable_type", _wrap_AttrValue_ListValue_mutable_type);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "shape_size", _wrap_AttrValue_ListValue_shape_size);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "clear_shape", _wrap_AttrValue_ListValue_clear_shape);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "add_shape", _wrap_AttrValue_ListValue_add_shape);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "mutable_shape", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_mutable_shape);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "shape", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_shape);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "tensor_size", _wrap_AttrValue_ListValue_tensor_size);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "clear_tensor", _wrap_AttrValue_ListValue_clear_tensor);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "add_tensor", _wrap_AttrValue_ListValue_add_tensor);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "mutable_tensor", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_mutable_tensor);
SWIGV8_AddMemberFunction(_exports_AttrValue_ListValue_class, "tensor", _wrap_AttrValue_ListValue__wrap_AttrValue_ListValue_tensor);
SWIGV8_AddStaticVariable(exports_obj, "AttrValue_ListValue_default_instance_", _wrap_AttrValue_ListValue_default_instance__get, _wrap_AttrValue_ListValue_default_instance__set);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "GetArena", _wrap_AttrValue_GetArena);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "GetMaybeArenaPointer", _wrap_AttrValue_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "UnsafeArenaSwap", _wrap_AttrValue_UnsafeArenaSwap);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "Swap", _wrap_AttrValue_Swap);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "New", _wrap_AttrValue__wrap_AttrValue_New);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "CopyFrom", _wrap_AttrValue__wrap_AttrValue_CopyFrom);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "MergeFrom", _wrap_AttrValue__wrap_AttrValue_MergeFrom);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "Clear", _wrap_AttrValue_Clear);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "IsInitialized", _wrap_AttrValue_IsInitialized);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "ByteSizeLong", _wrap_AttrValue_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "MergePartialFromCodedStream", _wrap_AttrValue_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "SerializeWithCachedSizes", _wrap_AttrValue_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "InternalSerializeWithCachedSizesToArray", _wrap_AttrValue_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "SerializeWithCachedSizesToArray", _wrap_AttrValue_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "GetCachedSize", _wrap_AttrValue_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "GetMetadata", _wrap_AttrValue_GetMetadata);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "clear_s", _wrap_AttrValue_clear_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "s", _wrap_AttrValue_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "set_s", _wrap_AttrValue__wrap_AttrValue_set_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "mutable_s", _wrap_AttrValue_mutable_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "release_s", _wrap_AttrValue_release_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "set_allocated_s", _wrap_AttrValue_set_allocated_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "unsafe_arena_release_s", _wrap_AttrValue_unsafe_arena_release_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "unsafe_arena_set_allocated_s", _wrap_AttrValue_unsafe_arena_set_allocated_s);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "clear_i", _wrap_AttrValue_clear_i);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "i", _wrap_AttrValue_i);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "set_i", _wrap_AttrValue_set_i);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "clear_f", _wrap_AttrValue_clear_f);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "f", _wrap_AttrValue_f);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "set_f", _wrap_AttrValue_set_f);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "clear_b", _wrap_AttrValue_clear_b);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "b", _wrap_AttrValue_b);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "set_b", _wrap_AttrValue_set_b);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "clear_type", _wrap_AttrValue_clear_type);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "type", _wrap_AttrValue_type);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "set_type", _wrap_AttrValue_set_type);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "has_shape", _wrap_AttrValue_has_shape);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "clear_shape", _wrap_AttrValue_clear_shape);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "shape", _wrap_AttrValue_shape);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "mutable_shape", _wrap_AttrValue_mutable_shape);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "release_shape", _wrap_AttrValue_release_shape);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "set_allocated_shape", _wrap_AttrValue_set_allocated_shape);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "unsafe_arena_release_shape", _wrap_AttrValue_unsafe_arena_release_shape);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "unsafe_arena_set_allocated_shape", _wrap_AttrValue_unsafe_arena_set_allocated_shape);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "has_tensor", _wrap_AttrValue_has_tensor);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "clear_tensor", _wrap_AttrValue_clear_tensor);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "tensor", _wrap_AttrValue_tensor);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "mutable_tensor", _wrap_AttrValue_mutable_tensor);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "release_tensor", _wrap_AttrValue_release_tensor);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "set_allocated_tensor", _wrap_AttrValue_set_allocated_tensor);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "unsafe_arena_release_tensor", _wrap_AttrValue_unsafe_arena_release_tensor);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "unsafe_arena_set_allocated_tensor", _wrap_AttrValue_unsafe_arena_set_allocated_tensor);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "has_list", _wrap_AttrValue_has_list);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "clear_list", _wrap_AttrValue_clear_list);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "list", _wrap_AttrValue_list);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "mutable_list", _wrap_AttrValue_mutable_list);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "release_list", _wrap_AttrValue_release_list);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "set_allocated_list", _wrap_AttrValue_set_allocated_list);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "unsafe_arena_release_list", _wrap_AttrValue_unsafe_arena_release_list);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "unsafe_arena_set_allocated_list", _wrap_AttrValue_unsafe_arena_set_allocated_list);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "has_func", _wrap_AttrValue_has_func);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "clear_func", _wrap_AttrValue_clear_func);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "func", _wrap_AttrValue_func);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "mutable_func", _wrap_AttrValue_mutable_func);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "release_func", _wrap_AttrValue_release_func);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "set_allocated_func", _wrap_AttrValue_set_allocated_func);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "unsafe_arena_release_func", _wrap_AttrValue_unsafe_arena_release_func);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "unsafe_arena_set_allocated_func", _wrap_AttrValue_unsafe_arena_set_allocated_func);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "clear_placeholder", _wrap_AttrValue_clear_placeholder);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "placeholder", _wrap_AttrValue_placeholder);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "set_placeholder", _wrap_AttrValue__wrap_AttrValue_set_placeholder);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "mutable_placeholder", _wrap_AttrValue_mutable_placeholder);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "release_placeholder", _wrap_AttrValue_release_placeholder);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "set_allocated_placeholder", _wrap_AttrValue_set_allocated_placeholder);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "unsafe_arena_release_placeholder", _wrap_AttrValue_unsafe_arena_release_placeholder);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "unsafe_arena_set_allocated_placeholder", _wrap_AttrValue_unsafe_arena_set_allocated_placeholder);
SWIGV8_AddMemberFunction(_exports_AttrValue_class, "value_case", _wrap_AttrValue_value_case);
SWIGV8_AddStaticVariable(exports_obj, "AttrValue_default_instance_", _wrap_AttrValue_default_instance__get, _wrap_AttrValue_default_instance__set);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "GetArena", _wrap_NameAttrList_GetArena);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "GetMaybeArenaPointer", _wrap_NameAttrList_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "UnsafeArenaSwap", _wrap_NameAttrList_UnsafeArenaSwap);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "Swap", _wrap_NameAttrList_Swap);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "New", _wrap_NameAttrList__wrap_NameAttrList_New);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "CopyFrom", _wrap_NameAttrList__wrap_NameAttrList_CopyFrom);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "MergeFrom", _wrap_NameAttrList__wrap_NameAttrList_MergeFrom);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "Clear", _wrap_NameAttrList_Clear);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "IsInitialized", _wrap_NameAttrList_IsInitialized);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "ByteSizeLong", _wrap_NameAttrList_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "MergePartialFromCodedStream", _wrap_NameAttrList_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "SerializeWithCachedSizes", _wrap_NameAttrList_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "InternalSerializeWithCachedSizesToArray", _wrap_NameAttrList_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "SerializeWithCachedSizesToArray", _wrap_NameAttrList_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "GetCachedSize", _wrap_NameAttrList_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "GetMetadata", _wrap_NameAttrList_GetMetadata);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "clear_name", _wrap_NameAttrList_clear_name);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "name", _wrap_NameAttrList_name);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "set_name", _wrap_NameAttrList__wrap_NameAttrList_set_name);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "mutable_name", _wrap_NameAttrList_mutable_name);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "release_name", _wrap_NameAttrList_release_name);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "set_allocated_name", _wrap_NameAttrList_set_allocated_name);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "unsafe_arena_release_name", _wrap_NameAttrList_unsafe_arena_release_name);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "unsafe_arena_set_allocated_name", _wrap_NameAttrList_unsafe_arena_set_allocated_name);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "attr_size", _wrap_NameAttrList_attr_size);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "clear_attr", _wrap_NameAttrList_clear_attr);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "attr", _wrap_NameAttrList_attr);
SWIGV8_AddMemberFunction(_exports_NameAttrList_class, "mutable_attr", _wrap_NameAttrList_mutable_attr);
SWIGV8_AddStaticVariable(exports_obj, "NameAttrList_default_instance_", _wrap_NameAttrList_default_instance__get, _wrap_NameAttrList_default_instance__set);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "GetArena", _wrap_TensorProto_GetArena);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "GetMaybeArenaPointer", _wrap_TensorProto_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "UnsafeArenaSwap", _wrap_TensorProto_UnsafeArenaSwap);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "Swap", _wrap_TensorProto_Swap);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "New", _wrap_TensorProto__wrap_TensorProto_New);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "CopyFrom", _wrap_TensorProto__wrap_TensorProto_CopyFrom);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "MergeFrom", _wrap_TensorProto__wrap_TensorProto_MergeFrom);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "Clear", _wrap_TensorProto_Clear);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "IsInitialized", _wrap_TensorProto_IsInitialized);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "ByteSizeLong", _wrap_TensorProto_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "MergePartialFromCodedStream", _wrap_TensorProto_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "SerializeWithCachedSizes", _wrap_TensorProto_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "InternalSerializeWithCachedSizesToArray", _wrap_TensorProto_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "SerializeWithCachedSizesToArray", _wrap_TensorProto_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "GetCachedSize", _wrap_TensorProto_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "GetMetadata", _wrap_TensorProto_GetMetadata);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_dtype", _wrap_TensorProto_clear_dtype);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "dtype", _wrap_TensorProto_dtype);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_dtype", _wrap_TensorProto_set_dtype);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "has_tensor_shape", _wrap_TensorProto_has_tensor_shape);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_tensor_shape", _wrap_TensorProto_clear_tensor_shape);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "tensor_shape", _wrap_TensorProto_tensor_shape);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "mutable_tensor_shape", _wrap_TensorProto_mutable_tensor_shape);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "release_tensor_shape", _wrap_TensorProto_release_tensor_shape);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_allocated_tensor_shape", _wrap_TensorProto_set_allocated_tensor_shape);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "unsafe_arena_release_tensor_shape", _wrap_TensorProto_unsafe_arena_release_tensor_shape);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "unsafe_arena_set_allocated_tensor_shape", _wrap_TensorProto_unsafe_arena_set_allocated_tensor_shape);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_version_number", _wrap_TensorProto_clear_version_number);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "version_number", _wrap_TensorProto_version_number);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_version_number", _wrap_TensorProto_set_version_number);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_tensor_content", _wrap_TensorProto_clear_tensor_content);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "tensor_content", _wrap_TensorProto_tensor_content);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_tensor_content", _wrap_TensorProto__wrap_TensorProto_set_tensor_content);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "mutable_tensor_content", _wrap_TensorProto_mutable_tensor_content);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "release_tensor_content", _wrap_TensorProto_release_tensor_content);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_allocated_tensor_content", _wrap_TensorProto_set_allocated_tensor_content);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "unsafe_arena_release_tensor_content", _wrap_TensorProto_unsafe_arena_release_tensor_content);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "unsafe_arena_set_allocated_tensor_content", _wrap_TensorProto_unsafe_arena_set_allocated_tensor_content);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "half_val_size", _wrap_TensorProto_half_val_size);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_half_val", _wrap_TensorProto_clear_half_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_half_val", _wrap_TensorProto_set_half_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "add_half_val", _wrap_TensorProto_add_half_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "half_val", _wrap_TensorProto__wrap_TensorProto_half_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "mutable_half_val", _wrap_TensorProto_mutable_half_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "float_val_size", _wrap_TensorProto_float_val_size);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_float_val", _wrap_TensorProto_clear_float_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_float_val", _wrap_TensorProto_set_float_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "add_float_val", _wrap_TensorProto_add_float_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "float_val", _wrap_TensorProto__wrap_TensorProto_float_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "mutable_float_val", _wrap_TensorProto_mutable_float_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "double_val_size", _wrap_TensorProto_double_val_size);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_double_val", _wrap_TensorProto_clear_double_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_double_val", _wrap_TensorProto_set_double_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "add_double_val", _wrap_TensorProto_add_double_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "double_val", _wrap_TensorProto__wrap_TensorProto_double_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "mutable_double_val", _wrap_TensorProto_mutable_double_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "int_val_size", _wrap_TensorProto_int_val_size);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_int_val", _wrap_TensorProto_clear_int_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_int_val", _wrap_TensorProto_set_int_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "add_int_val", _wrap_TensorProto_add_int_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "int_val", _wrap_TensorProto__wrap_TensorProto_int_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "mutable_int_val", _wrap_TensorProto_mutable_int_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "string_val_size", _wrap_TensorProto_string_val_size);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_string_val", _wrap_TensorProto_clear_string_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_string_val", _wrap_TensorProto__wrap_TensorProto_set_string_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "add_string_val", _wrap_TensorProto__wrap_TensorProto_add_string_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "string_val", _wrap_TensorProto__wrap_TensorProto_string_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "mutable_string_val", _wrap_TensorProto__wrap_TensorProto_mutable_string_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "scomplex_val_size", _wrap_TensorProto_scomplex_val_size);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_scomplex_val", _wrap_TensorProto_clear_scomplex_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_scomplex_val", _wrap_TensorProto_set_scomplex_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "add_scomplex_val", _wrap_TensorProto_add_scomplex_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "scomplex_val", _wrap_TensorProto__wrap_TensorProto_scomplex_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "mutable_scomplex_val", _wrap_TensorProto_mutable_scomplex_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "int64_val_size", _wrap_TensorProto_int64_val_size);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_int64_val", _wrap_TensorProto_clear_int64_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_int64_val", _wrap_TensorProto_set_int64_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "add_int64_val", _wrap_TensorProto_add_int64_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "int64_val", _wrap_TensorProto__wrap_TensorProto_int64_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "mutable_int64_val", _wrap_TensorProto_mutable_int64_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "bool_val_size", _wrap_TensorProto_bool_val_size);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_bool_val", _wrap_TensorProto_clear_bool_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_bool_val", _wrap_TensorProto_set_bool_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "add_bool_val", _wrap_TensorProto_add_bool_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "bool_val", _wrap_TensorProto__wrap_TensorProto_bool_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "mutable_bool_val", _wrap_TensorProto_mutable_bool_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "dcomplex_val_size", _wrap_TensorProto_dcomplex_val_size);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_dcomplex_val", _wrap_TensorProto_clear_dcomplex_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "set_dcomplex_val", _wrap_TensorProto_set_dcomplex_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "add_dcomplex_val", _wrap_TensorProto_add_dcomplex_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "dcomplex_val", _wrap_TensorProto__wrap_TensorProto_dcomplex_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "mutable_dcomplex_val", _wrap_TensorProto_mutable_dcomplex_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "resource_handle_val_size", _wrap_TensorProto_resource_handle_val_size);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "clear_resource_handle_val", _wrap_TensorProto_clear_resource_handle_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "add_resource_handle_val", _wrap_TensorProto_add_resource_handle_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "mutable_resource_handle_val", _wrap_TensorProto__wrap_TensorProto_mutable_resource_handle_val);
SWIGV8_AddMemberFunction(_exports_TensorProto_class, "resource_handle_val", _wrap_TensorProto__wrap_TensorProto_resource_handle_val);
SWIGV8_AddStaticVariable(exports_obj, "TensorProto_default_instance_", _wrap_TensorProto_default_instance__get, _wrap_TensorProto_default_instance__set);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "GetArena", _wrap_OpDef_ArgDef_GetArena);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "GetMaybeArenaPointer", _wrap_OpDef_ArgDef_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "UnsafeArenaSwap", _wrap_OpDef_ArgDef_UnsafeArenaSwap);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "Swap", _wrap_OpDef_ArgDef_Swap);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "New", _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_New);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "CopyFrom", _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_CopyFrom);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "MergeFrom", _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_MergeFrom);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "Clear", _wrap_OpDef_ArgDef_Clear);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "IsInitialized", _wrap_OpDef_ArgDef_IsInitialized);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "ByteSizeLong", _wrap_OpDef_ArgDef_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "MergePartialFromCodedStream", _wrap_OpDef_ArgDef_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "SerializeWithCachedSizes", _wrap_OpDef_ArgDef_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "InternalSerializeWithCachedSizesToArray", _wrap_OpDef_ArgDef_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "SerializeWithCachedSizesToArray", _wrap_OpDef_ArgDef_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "GetCachedSize", _wrap_OpDef_ArgDef_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "GetMetadata", _wrap_OpDef_ArgDef_GetMetadata);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "clear_name", _wrap_OpDef_ArgDef_clear_name);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "name", _wrap_OpDef_ArgDef_name);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "set_name", _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_set_name);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "mutable_name", _wrap_OpDef_ArgDef_mutable_name);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "release_name", _wrap_OpDef_ArgDef_release_name);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "set_allocated_name", _wrap_OpDef_ArgDef_set_allocated_name);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "unsafe_arena_release_name", _wrap_OpDef_ArgDef_unsafe_arena_release_name);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "unsafe_arena_set_allocated_name", _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_name);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "clear_description", _wrap_OpDef_ArgDef_clear_description);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "description", _wrap_OpDef_ArgDef_description);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "set_description", _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_set_description);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "mutable_description", _wrap_OpDef_ArgDef_mutable_description);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "release_description", _wrap_OpDef_ArgDef_release_description);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "set_allocated_description", _wrap_OpDef_ArgDef_set_allocated_description);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "unsafe_arena_release_description", _wrap_OpDef_ArgDef_unsafe_arena_release_description);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "unsafe_arena_set_allocated_description", _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_description);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "clear_type", _wrap_OpDef_ArgDef_clear_type);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "type", _wrap_OpDef_ArgDef_type);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "set_type", _wrap_OpDef_ArgDef_set_type);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "clear_type_attr", _wrap_OpDef_ArgDef_clear_type_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "type_attr", _wrap_OpDef_ArgDef_type_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "set_type_attr", _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_set_type_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "mutable_type_attr", _wrap_OpDef_ArgDef_mutable_type_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "release_type_attr", _wrap_OpDef_ArgDef_release_type_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "set_allocated_type_attr", _wrap_OpDef_ArgDef_set_allocated_type_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "unsafe_arena_release_type_attr", _wrap_OpDef_ArgDef_unsafe_arena_release_type_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "unsafe_arena_set_allocated_type_attr", _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_type_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "clear_number_attr", _wrap_OpDef_ArgDef_clear_number_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "number_attr", _wrap_OpDef_ArgDef_number_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "set_number_attr", _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_set_number_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "mutable_number_attr", _wrap_OpDef_ArgDef_mutable_number_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "release_number_attr", _wrap_OpDef_ArgDef_release_number_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "set_allocated_number_attr", _wrap_OpDef_ArgDef_set_allocated_number_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "unsafe_arena_release_number_attr", _wrap_OpDef_ArgDef_unsafe_arena_release_number_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "unsafe_arena_set_allocated_number_attr", _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_number_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "clear_type_list_attr", _wrap_OpDef_ArgDef_clear_type_list_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "type_list_attr", _wrap_OpDef_ArgDef_type_list_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "set_type_list_attr", _wrap_OpDef_ArgDef__wrap_OpDef_ArgDef_set_type_list_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "mutable_type_list_attr", _wrap_OpDef_ArgDef_mutable_type_list_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "release_type_list_attr", _wrap_OpDef_ArgDef_release_type_list_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "set_allocated_type_list_attr", _wrap_OpDef_ArgDef_set_allocated_type_list_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "unsafe_arena_release_type_list_attr", _wrap_OpDef_ArgDef_unsafe_arena_release_type_list_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "unsafe_arena_set_allocated_type_list_attr", _wrap_OpDef_ArgDef_unsafe_arena_set_allocated_type_list_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "clear_is_ref", _wrap_OpDef_ArgDef_clear_is_ref);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "is_ref", _wrap_OpDef_ArgDef_is_ref);
SWIGV8_AddMemberFunction(_exports_OpDef_ArgDef_class, "set_is_ref", _wrap_OpDef_ArgDef_set_is_ref);
SWIGV8_AddStaticVariable(exports_obj, "OpDef_ArgDef_default_instance_", _wrap_OpDef_ArgDef_default_instance__get, _wrap_OpDef_ArgDef_default_instance__set);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "GetArena", _wrap_OpDef_AttrDef_GetArena);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "GetMaybeArenaPointer", _wrap_OpDef_AttrDef_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "UnsafeArenaSwap", _wrap_OpDef_AttrDef_UnsafeArenaSwap);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "Swap", _wrap_OpDef_AttrDef_Swap);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "New", _wrap_OpDef_AttrDef__wrap_OpDef_AttrDef_New);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "CopyFrom", _wrap_OpDef_AttrDef__wrap_OpDef_AttrDef_CopyFrom);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "MergeFrom", _wrap_OpDef_AttrDef__wrap_OpDef_AttrDef_MergeFrom);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "Clear", _wrap_OpDef_AttrDef_Clear);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "IsInitialized", _wrap_OpDef_AttrDef_IsInitialized);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "ByteSizeLong", _wrap_OpDef_AttrDef_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "MergePartialFromCodedStream", _wrap_OpDef_AttrDef_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "SerializeWithCachedSizes", _wrap_OpDef_AttrDef_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "InternalSerializeWithCachedSizesToArray", _wrap_OpDef_AttrDef_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "SerializeWithCachedSizesToArray", _wrap_OpDef_AttrDef_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "GetCachedSize", _wrap_OpDef_AttrDef_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "GetMetadata", _wrap_OpDef_AttrDef_GetMetadata);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "clear_name", _wrap_OpDef_AttrDef_clear_name);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "name", _wrap_OpDef_AttrDef_name);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "set_name", _wrap_OpDef_AttrDef__wrap_OpDef_AttrDef_set_name);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "mutable_name", _wrap_OpDef_AttrDef_mutable_name);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "release_name", _wrap_OpDef_AttrDef_release_name);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "set_allocated_name", _wrap_OpDef_AttrDef_set_allocated_name);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "unsafe_arena_release_name", _wrap_OpDef_AttrDef_unsafe_arena_release_name);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "unsafe_arena_set_allocated_name", _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_name);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "clear_type", _wrap_OpDef_AttrDef_clear_type);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "type", _wrap_OpDef_AttrDef_type);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "set_type", _wrap_OpDef_AttrDef__wrap_OpDef_AttrDef_set_type);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "mutable_type", _wrap_OpDef_AttrDef_mutable_type);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "release_type", _wrap_OpDef_AttrDef_release_type);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "set_allocated_type", _wrap_OpDef_AttrDef_set_allocated_type);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "unsafe_arena_release_type", _wrap_OpDef_AttrDef_unsafe_arena_release_type);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "unsafe_arena_set_allocated_type", _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_type);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "has_default_value", _wrap_OpDef_AttrDef_has_default_value);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "clear_default_value", _wrap_OpDef_AttrDef_clear_default_value);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "default_value", _wrap_OpDef_AttrDef_default_value);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "mutable_default_value", _wrap_OpDef_AttrDef_mutable_default_value);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "release_default_value", _wrap_OpDef_AttrDef_release_default_value);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "set_allocated_default_value", _wrap_OpDef_AttrDef_set_allocated_default_value);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "unsafe_arena_release_default_value", _wrap_OpDef_AttrDef_unsafe_arena_release_default_value);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "unsafe_arena_set_allocated_default_value", _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_default_value);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "clear_description", _wrap_OpDef_AttrDef_clear_description);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "description", _wrap_OpDef_AttrDef_description);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "set_description", _wrap_OpDef_AttrDef__wrap_OpDef_AttrDef_set_description);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "mutable_description", _wrap_OpDef_AttrDef_mutable_description);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "release_description", _wrap_OpDef_AttrDef_release_description);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "set_allocated_description", _wrap_OpDef_AttrDef_set_allocated_description);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "unsafe_arena_release_description", _wrap_OpDef_AttrDef_unsafe_arena_release_description);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "unsafe_arena_set_allocated_description", _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_description);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "clear_has_minimum", _wrap_OpDef_AttrDef_clear_has_minimum);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "has_minimum", _wrap_OpDef_AttrDef_has_minimum);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "set_has_minimum", _wrap_OpDef_AttrDef_set_has_minimum);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "clear_minimum", _wrap_OpDef_AttrDef_clear_minimum);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "minimum", _wrap_OpDef_AttrDef_minimum);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "set_minimum", _wrap_OpDef_AttrDef_set_minimum);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "has_allowed_values", _wrap_OpDef_AttrDef_has_allowed_values);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "clear_allowed_values", _wrap_OpDef_AttrDef_clear_allowed_values);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "allowed_values", _wrap_OpDef_AttrDef_allowed_values);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "mutable_allowed_values", _wrap_OpDef_AttrDef_mutable_allowed_values);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "release_allowed_values", _wrap_OpDef_AttrDef_release_allowed_values);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "set_allocated_allowed_values", _wrap_OpDef_AttrDef_set_allocated_allowed_values);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "unsafe_arena_release_allowed_values", _wrap_OpDef_AttrDef_unsafe_arena_release_allowed_values);
SWIGV8_AddMemberFunction(_exports_OpDef_AttrDef_class, "unsafe_arena_set_allocated_allowed_values", _wrap_OpDef_AttrDef_unsafe_arena_set_allocated_allowed_values);
SWIGV8_AddStaticVariable(exports_obj, "OpDef_AttrDef_default_instance_", _wrap_OpDef_AttrDef_default_instance__get, _wrap_OpDef_AttrDef_default_instance__set);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "GetArena", _wrap_OpDef_GetArena);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "GetMaybeArenaPointer", _wrap_OpDef_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "UnsafeArenaSwap", _wrap_OpDef_UnsafeArenaSwap);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "Swap", _wrap_OpDef_Swap);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "New", _wrap_OpDef__wrap_OpDef_New);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "CopyFrom", _wrap_OpDef__wrap_OpDef_CopyFrom);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "MergeFrom", _wrap_OpDef__wrap_OpDef_MergeFrom);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "Clear", _wrap_OpDef_Clear);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "IsInitialized", _wrap_OpDef_IsInitialized);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "ByteSizeLong", _wrap_OpDef_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "MergePartialFromCodedStream", _wrap_OpDef_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "SerializeWithCachedSizes", _wrap_OpDef_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "InternalSerializeWithCachedSizesToArray", _wrap_OpDef_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "SerializeWithCachedSizesToArray", _wrap_OpDef_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "GetCachedSize", _wrap_OpDef_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "GetMetadata", _wrap_OpDef_GetMetadata);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "clear_name", _wrap_OpDef_clear_name);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "name", _wrap_OpDef_name);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "set_name", _wrap_OpDef__wrap_OpDef_set_name);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "mutable_name", _wrap_OpDef_mutable_name);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "release_name", _wrap_OpDef_release_name);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "set_allocated_name", _wrap_OpDef_set_allocated_name);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "unsafe_arena_release_name", _wrap_OpDef_unsafe_arena_release_name);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "unsafe_arena_set_allocated_name", _wrap_OpDef_unsafe_arena_set_allocated_name);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "input_arg_size", _wrap_OpDef_input_arg_size);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "clear_input_arg", _wrap_OpDef_clear_input_arg);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "add_input_arg", _wrap_OpDef_add_input_arg);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "mutable_input_arg", _wrap_OpDef__wrap_OpDef_mutable_input_arg);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "input_arg", _wrap_OpDef__wrap_OpDef_input_arg);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "output_arg_size", _wrap_OpDef_output_arg_size);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "clear_output_arg", _wrap_OpDef_clear_output_arg);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "add_output_arg", _wrap_OpDef_add_output_arg);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "mutable_output_arg", _wrap_OpDef__wrap_OpDef_mutable_output_arg);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "output_arg", _wrap_OpDef__wrap_OpDef_output_arg);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "attr_size", _wrap_OpDef_attr_size);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "clear_attr", _wrap_OpDef_clear_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "add_attr", _wrap_OpDef_add_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "mutable_attr", _wrap_OpDef__wrap_OpDef_mutable_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "attr", _wrap_OpDef__wrap_OpDef_attr);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "has_deprecation", _wrap_OpDef_has_deprecation);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "clear_deprecation", _wrap_OpDef_clear_deprecation);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "deprecation", _wrap_OpDef_deprecation);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "mutable_deprecation", _wrap_OpDef_mutable_deprecation);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "release_deprecation", _wrap_OpDef_release_deprecation);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "set_allocated_deprecation", _wrap_OpDef_set_allocated_deprecation);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "unsafe_arena_release_deprecation", _wrap_OpDef_unsafe_arena_release_deprecation);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "unsafe_arena_set_allocated_deprecation", _wrap_OpDef_unsafe_arena_set_allocated_deprecation);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "clear_summary", _wrap_OpDef_clear_summary);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "summary", _wrap_OpDef_summary);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "set_summary", _wrap_OpDef__wrap_OpDef_set_summary);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "mutable_summary", _wrap_OpDef_mutable_summary);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "release_summary", _wrap_OpDef_release_summary);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "set_allocated_summary", _wrap_OpDef_set_allocated_summary);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "unsafe_arena_release_summary", _wrap_OpDef_unsafe_arena_release_summary);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "unsafe_arena_set_allocated_summary", _wrap_OpDef_unsafe_arena_set_allocated_summary);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "clear_description", _wrap_OpDef_clear_description);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "description", _wrap_OpDef_description);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "set_description", _wrap_OpDef__wrap_OpDef_set_description);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "mutable_description", _wrap_OpDef_mutable_description);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "release_description", _wrap_OpDef_release_description);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "set_allocated_description", _wrap_OpDef_set_allocated_description);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "unsafe_arena_release_description", _wrap_OpDef_unsafe_arena_release_description);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "unsafe_arena_set_allocated_description", _wrap_OpDef_unsafe_arena_set_allocated_description);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "clear_is_commutative", _wrap_OpDef_clear_is_commutative);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "is_commutative", _wrap_OpDef_is_commutative);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "set_is_commutative", _wrap_OpDef_set_is_commutative);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "clear_is_aggregate", _wrap_OpDef_clear_is_aggregate);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "is_aggregate", _wrap_OpDef_is_aggregate);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "set_is_aggregate", _wrap_OpDef_set_is_aggregate);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "clear_is_stateful", _wrap_OpDef_clear_is_stateful);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "is_stateful", _wrap_OpDef_is_stateful);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "set_is_stateful", _wrap_OpDef_set_is_stateful);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "clear_allows_uninitialized_input", _wrap_OpDef_clear_allows_uninitialized_input);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "allows_uninitialized_input", _wrap_OpDef_allows_uninitialized_input);
SWIGV8_AddMemberFunction(_exports_OpDef_class, "set_allows_uninitialized_input", _wrap_OpDef_set_allows_uninitialized_input);
SWIGV8_AddStaticVariable(exports_obj, "OpDef_default_instance_", _wrap_OpDef_default_instance__get, _wrap_OpDef_default_instance__set);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "GetArena", _wrap_OpDeprecation_GetArena);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "GetMaybeArenaPointer", _wrap_OpDeprecation_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "UnsafeArenaSwap", _wrap_OpDeprecation_UnsafeArenaSwap);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "Swap", _wrap_OpDeprecation_Swap);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "New", _wrap_OpDeprecation__wrap_OpDeprecation_New);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "CopyFrom", _wrap_OpDeprecation__wrap_OpDeprecation_CopyFrom);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "MergeFrom", _wrap_OpDeprecation__wrap_OpDeprecation_MergeFrom);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "Clear", _wrap_OpDeprecation_Clear);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "IsInitialized", _wrap_OpDeprecation_IsInitialized);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "ByteSizeLong", _wrap_OpDeprecation_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "MergePartialFromCodedStream", _wrap_OpDeprecation_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "SerializeWithCachedSizes", _wrap_OpDeprecation_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "InternalSerializeWithCachedSizesToArray", _wrap_OpDeprecation_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "SerializeWithCachedSizesToArray", _wrap_OpDeprecation_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "GetCachedSize", _wrap_OpDeprecation_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "GetMetadata", _wrap_OpDeprecation_GetMetadata);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "clear_version", _wrap_OpDeprecation_clear_version);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "version", _wrap_OpDeprecation_version);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "set_version", _wrap_OpDeprecation_set_version);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "clear_explanation", _wrap_OpDeprecation_clear_explanation);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "explanation", _wrap_OpDeprecation_explanation);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "set_explanation", _wrap_OpDeprecation__wrap_OpDeprecation_set_explanation);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "mutable_explanation", _wrap_OpDeprecation_mutable_explanation);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "release_explanation", _wrap_OpDeprecation_release_explanation);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "set_allocated_explanation", _wrap_OpDeprecation_set_allocated_explanation);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "unsafe_arena_release_explanation", _wrap_OpDeprecation_unsafe_arena_release_explanation);
SWIGV8_AddMemberFunction(_exports_OpDeprecation_class, "unsafe_arena_set_allocated_explanation", _wrap_OpDeprecation_unsafe_arena_set_allocated_explanation);
SWIGV8_AddStaticVariable(exports_obj, "OpDeprecation_default_instance_", _wrap_OpDeprecation_default_instance__get, _wrap_OpDeprecation_default_instance__set);
SWIGV8_AddMemberFunction(_exports_OpList_class, "GetArena", _wrap_OpList_GetArena);
SWIGV8_AddMemberFunction(_exports_OpList_class, "GetMaybeArenaPointer", _wrap_OpList_GetMaybeArenaPointer);
SWIGV8_AddMemberFunction(_exports_OpList_class, "UnsafeArenaSwap", _wrap_OpList_UnsafeArenaSwap);
SWIGV8_AddMemberFunction(_exports_OpList_class, "Swap", _wrap_OpList_Swap);
SWIGV8_AddMemberFunction(_exports_OpList_class, "New", _wrap_OpList__wrap_OpList_New);
SWIGV8_AddMemberFunction(_exports_OpList_class, "CopyFrom", _wrap_OpList__wrap_OpList_CopyFrom);
SWIGV8_AddMemberFunction(_exports_OpList_class, "MergeFrom", _wrap_OpList__wrap_OpList_MergeFrom);
SWIGV8_AddMemberFunction(_exports_OpList_class, "Clear", _wrap_OpList_Clear);
SWIGV8_AddMemberFunction(_exports_OpList_class, "IsInitialized", _wrap_OpList_IsInitialized);
SWIGV8_AddMemberFunction(_exports_OpList_class, "ByteSizeLong", _wrap_OpList_ByteSizeLong);
SWIGV8_AddMemberFunction(_exports_OpList_class, "MergePartialFromCodedStream", _wrap_OpList_MergePartialFromCodedStream);
SWIGV8_AddMemberFunction(_exports_OpList_class, "SerializeWithCachedSizes", _wrap_OpList_SerializeWithCachedSizes);
SWIGV8_AddMemberFunction(_exports_OpList_class, "InternalSerializeWithCachedSizesToArray", _wrap_OpList_InternalSerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_OpList_class, "SerializeWithCachedSizesToArray", _wrap_OpList_SerializeWithCachedSizesToArray);
SWIGV8_AddMemberFunction(_exports_OpList_class, "GetCachedSize", _wrap_OpList_GetCachedSize);
SWIGV8_AddMemberFunction(_exports_OpList_class, "GetMetadata", _wrap_OpList_GetMetadata);
SWIGV8_AddMemberFunction(_exports_OpList_class, "op_size", _wrap_OpList_op_size);
SWIGV8_AddMemberFunction(_exports_OpList_class, "clear_op", _wrap_OpList_clear_op);
SWIGV8_AddMemberFunction(_exports_OpList_class, "add_op", _wrap_OpList_add_op);
SWIGV8_AddMemberFunction(_exports_OpList_class, "mutable_op", _wrap_OpList__wrap_OpList_mutable_op);
SWIGV8_AddMemberFunction(_exports_OpList_class, "op", _wrap_OpList__wrap_OpList_op);
SWIGV8_AddStaticVariable(exports_obj, "OpList_default_instance_", _wrap_OpList_default_instance__get, _wrap_OpList_default_instance__set);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "set", _wrap_StringPiece_set);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "data", _wrap_StringPiece_data);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "size", _wrap_StringPiece_size);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "empty", _wrap_StringPiece_empty);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "begin", _wrap_StringPiece_begin);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "end", _wrap_StringPiece_end);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "clear", _wrap_StringPiece_clear);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "remove_prefix", _wrap_StringPiece_remove_prefix);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "remove_suffix", _wrap_StringPiece_remove_suffix);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "find", _wrap_StringPiece__wrap_StringPiece_find);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "rfind", _wrap_StringPiece__wrap_StringPiece_rfind);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "contains", _wrap_StringPiece_contains);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "Consume", _wrap_StringPiece_Consume);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "substr", _wrap_StringPiece__wrap_StringPiece_substr);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "ToString", _wrap_StringPiece_ToString);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "compare", _wrap_StringPiece_compare);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "starts_with", _wrap_StringPiece_starts_with);
SWIGV8_AddMemberFunction(_exports_StringPiece_class, "ends_with", _wrap_StringPiece_ends_with);
SWIGV8_AddMemberFunction(_exports_Env_class, "GetFileSystemForFile", _wrap_Env_GetFileSystemForFile);
SWIGV8_AddMemberFunction(_exports_Env_class, "GetRegisteredFileSystemSchemes", _wrap_Env_GetRegisteredFileSystemSchemes);
SWIGV8_AddMemberFunction(_exports_Env_class, "RegisterFileSystem", _wrap_Env_RegisterFileSystem);
SWIGV8_AddMemberFunction(_exports_Env_class, "NewRandomAccessFile", _wrap_Env_NewRandomAccessFile);
SWIGV8_AddMemberFunction(_exports_Env_class, "NewWritableFile", _wrap_Env_NewWritableFile);
SWIGV8_AddMemberFunction(_exports_Env_class, "NewAppendableFile", _wrap_Env_NewAppendableFile);
SWIGV8_AddMemberFunction(_exports_Env_class, "NewReadOnlyMemoryRegionFromFile", _wrap_Env_NewReadOnlyMemoryRegionFromFile);
SWIGV8_AddMemberFunction(_exports_Env_class, "FileExists", _wrap_Env_FileExists);
SWIGV8_AddMemberFunction(_exports_Env_class, "GetChildren", _wrap_Env_GetChildren);
SWIGV8_AddMemberFunction(_exports_Env_class, "MatchPath", _wrap_Env_MatchPath);
SWIGV8_AddMemberFunction(_exports_Env_class, "GetMatchingPaths", _wrap_Env_GetMatchingPaths);
SWIGV8_AddMemberFunction(_exports_Env_class, "DeleteFile", _wrap_Env_DeleteFile);
SWIGV8_AddMemberFunction(_exports_Env_class, "DeleteRecursively", _wrap_Env_DeleteRecursively);
SWIGV8_AddMemberFunction(_exports_Env_class, "RecursivelyCreateDir", _wrap_Env_RecursivelyCreateDir);
SWIGV8_AddMemberFunction(_exports_Env_class, "CreateDir", _wrap_Env_CreateDir);
SWIGV8_AddMemberFunction(_exports_Env_class, "DeleteDir", _wrap_Env_DeleteDir);
SWIGV8_AddMemberFunction(_exports_Env_class, "Stat", _wrap_Env_Stat);
SWIGV8_AddMemberFunction(_exports_Env_class, "IsDirectory", _wrap_Env_IsDirectory);
SWIGV8_AddMemberFunction(_exports_Env_class, "GetFileSize", _wrap_Env_GetFileSize);
SWIGV8_AddMemberFunction(_exports_Env_class, "RenameFile", _wrap_Env_RenameFile);
SWIGV8_AddMemberFunction(_exports_Env_class, "NowMicros", _wrap_Env_NowMicros);
SWIGV8_AddMemberFunction(_exports_Env_class, "NowSeconds", _wrap_Env_NowSeconds);
SWIGV8_AddMemberFunction(_exports_Env_class, "SleepForMicroseconds", _wrap_Env_SleepForMicroseconds);
SWIGV8_AddMemberFunction(_exports_Env_class, "StartThread", _wrap_Env_StartThread);
SWIGV8_AddMemberFunction(_exports_Env_class, "SchedClosure", _wrap_Env_SchedClosure);
SWIGV8_AddMemberFunction(_exports_Env_class, "SchedClosureAfter", _wrap_Env_SchedClosureAfter);
SWIGV8_AddMemberFunction(_exports_Env_class, "LoadLibrary", _wrap_Env_LoadLibrary);
SWIGV8_AddMemberFunction(_exports_Env_class, "GetSymbolFromLibrary", _wrap_Env_GetSymbolFromLibrary);
SWIGV8_AddMemberFunction(_exports_Env_class, "FormatLibraryFileName", _wrap_Env_FormatLibraryFileName);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "target", _wrap_EnvWrapper_target);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "GetFileSystemForFile", _wrap_EnvWrapper_GetFileSystemForFile);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "GetRegisteredFileSystemSchemes", _wrap_EnvWrapper_GetRegisteredFileSystemSchemes);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "RegisterFileSystem", _wrap_EnvWrapper_RegisterFileSystem);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "MatchPath", _wrap_EnvWrapper_MatchPath);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "NowMicros", _wrap_EnvWrapper_NowMicros);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "SleepForMicroseconds", _wrap_EnvWrapper_SleepForMicroseconds);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "StartThread", _wrap_EnvWrapper_StartThread);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "SchedClosure", _wrap_EnvWrapper_SchedClosure);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "SchedClosureAfter", _wrap_EnvWrapper_SchedClosureAfter);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "LoadLibrary", _wrap_EnvWrapper_LoadLibrary);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "GetSymbolFromLibrary", _wrap_EnvWrapper_GetSymbolFromLibrary);
SWIGV8_AddMemberFunction(_exports_EnvWrapper_class, "FormatLibraryFileName", _wrap_EnvWrapper_FormatLibraryFileName);
SWIGV8_AddMemberVariable(_exports_ThreadOptions_class, "stack_size", _wrap_ThreadOptions_stack_size_get, _wrap_ThreadOptions_stack_size_set);
SWIGV8_AddMemberVariable(_exports_ThreadOptions_class, "guard_size", _wrap_ThreadOptions_guard_size_get, _wrap_ThreadOptions_guard_size_set);
SWIGV8_AddMemberFunction(_exports_Session_class, "Create", _wrap_Session__wrap_Session_Create);
SWIGV8_AddMemberFunction(_exports_Session_class, "Extend", _wrap_Session__wrap_Session_Extend);
SWIGV8_AddMemberFunction(_exports_Session_class, "Run", _wrap_Session__wrap_Session_Run);
SWIGV8_AddMemberFunction(_exports_Session_class, "PRunSetup", _wrap_Session_PRunSetup);
SWIGV8_AddMemberFunction(_exports_Session_class, "PRun", _wrap_Session_PRun);
SWIGV8_AddMemberFunction(_exports_Session_class, "Close", _wrap_Session__wrap_Session_Close);
SWIGV8_AddMemberVariable(_exports_SessionOptions_class, "env", _wrap_SessionOptions_env_get, _wrap_SessionOptions_env_set);
SWIGV8_AddMemberVariable(_exports_SessionOptions_class, "target", _wrap_SessionOptions_target_get, _wrap_SessionOptions_target_set);
SWIGV8_AddMemberVariable(_exports_SessionOptions_class, "config", _wrap_SessionOptions_config_get, _wrap_SessionOptions_config_set);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "dtype", _wrap_Tensor_dtype);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "shape", _wrap_Tensor_shape);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "dims", _wrap_Tensor_dims);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "dim_size", _wrap_Tensor_dim_size);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "NumElements", _wrap_Tensor_NumElements);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "IsSameSize", _wrap_Tensor_IsSameSize);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "SharesBufferWith", _wrap_Tensor_SharesBufferWith);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "IsInitialized", _wrap_Tensor_IsInitialized);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "TotalBytes", _wrap_Tensor_TotalBytes);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "IsAligned", _wrap_Tensor_IsAligned);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "CopyFrom", _wrap_Tensor_CopyFrom);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "Slice", _wrap_Tensor_Slice);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "FromProto", _wrap_Tensor__wrap_Tensor_FromProto);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "AsProtoField", _wrap_Tensor_AsProtoField);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "AsProtoTensorContent", _wrap_Tensor_AsProtoTensorContent);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "SummarizeValue", _wrap_Tensor_SummarizeValue);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "DebugString", _wrap_Tensor_DebugString);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "FillDescription", _wrap_Tensor_FillDescription);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "tensor_data", _wrap_Tensor_tensor_data);
SWIGV8_AddMemberFunction(_exports_Tensor_class, "UnsafeCopyFromInternal", _wrap_Tensor_UnsafeCopyFromInternal);
SWIGV8_AddMemberFunction(_exports_TensorBuffer_class, "data", _wrap_TensorBuffer_data);
SWIGV8_AddMemberFunction(_exports_TensorBuffer_class, "size", _wrap_TensorBuffer_size);
SWIGV8_AddMemberFunction(_exports_TensorBuffer_class, "root_buffer", _wrap_TensorBuffer_root_buffer);
SWIGV8_AddMemberFunction(_exports_TensorBuffer_class, "FillAllocationDescription", _wrap_TensorBuffer_FillAllocationDescription);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "Clear", _wrap_TensorShape_Clear);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "AddDim", _wrap_TensorShape_AddDim);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "AppendShape", _wrap_TensorShape_AppendShape);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "MaxDimensions", _wrap_TensorShape_MaxDimensions);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "InsertDim", _wrap_TensorShape_InsertDim);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "set_dim", _wrap_TensorShape_set_dim);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "RemoveDim", _wrap_TensorShape_RemoveDim);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "dims", _wrap_TensorShape_dims);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "dim_size", _wrap_TensorShape_dim_size);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "dim_sizes", _wrap_TensorShape_dim_sizes);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "num_elements", _wrap_TensorShape_num_elements);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "IsSameSize", _wrap_TensorShape_IsSameSize);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "AsProto", _wrap_TensorShape_AsProto);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "begin", _wrap_TensorShape_begin);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "end", _wrap_TensorShape_end);
SWIGV8_AddMemberFunction(_exports_TensorShape_class, "DumpRep", _wrap_TensorShape_DumpRep);
SWIGV8_AddMemberVariable(_exports_TensorShapeDim_class, "size", _wrap_TensorShapeDim_size_get, _wrap_TensorShapeDim_size_set);
SWIGV8_AddMemberFunction(_exports_TensorShapeIter_class, "__ref__", _wrap_TensorShapeIter___ref__);
SWIGV8_AddStaticVariable(exports_obj, "kCond_Timeout", _wrap_tensorflow_kCond_Timeout, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "kCond_MaybeNotified", _wrap_tensorflow_kCond_MaybeNotified, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_Node_class, "DebugString", _wrap_Node_DebugString);
SWIGV8_AddMemberFunction(_exports_Node_class, "id", _wrap_Node_id);
SWIGV8_AddMemberFunction(_exports_Node_class, "cost_id", _wrap_Node_cost_id);
SWIGV8_AddMemberFunction(_exports_Node_class, "name", _wrap_Node_name);
SWIGV8_AddMemberFunction(_exports_Node_class, "type_string", _wrap_Node_type_string);
SWIGV8_AddMemberFunction(_exports_Node_class, "def", _wrap_Node_def);
SWIGV8_AddMemberFunction(_exports_Node_class, "op_def", _wrap_Node_op_def);
SWIGV8_AddMemberFunction(_exports_Node_class, "num_inputs", _wrap_Node_num_inputs);
SWIGV8_AddMemberFunction(_exports_Node_class, "input_type", _wrap_Node_input_type);
SWIGV8_AddMemberFunction(_exports_Node_class, "input_types", _wrap_Node_input_types);
SWIGV8_AddMemberFunction(_exports_Node_class, "num_outputs", _wrap_Node_num_outputs);
SWIGV8_AddMemberFunction(_exports_Node_class, "output_type", _wrap_Node_output_type);
SWIGV8_AddMemberFunction(_exports_Node_class, "output_types", _wrap_Node_output_types);
SWIGV8_AddMemberFunction(_exports_Node_class, "assigned_device_name", _wrap_Node_assigned_device_name);
SWIGV8_AddMemberFunction(_exports_Node_class, "set_assigned_device_name", _wrap_Node_set_assigned_device_name);
SWIGV8_AddMemberFunction(_exports_Node_class, "in_nodes", _wrap_Node_in_nodes);
SWIGV8_AddMemberFunction(_exports_Node_class, "out_nodes", _wrap_Node_out_nodes);
SWIGV8_AddMemberFunction(_exports_Node_class, "in_edges", _wrap_Node_in_edges);
SWIGV8_AddMemberFunction(_exports_Node_class, "out_edges", _wrap_Node_out_edges);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsSource", _wrap_Node_IsSource);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsSink", _wrap_Node_IsSink);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsOp", _wrap_Node_IsOp);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsSwitch", _wrap_Node_IsSwitch);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsMerge", _wrap_Node_IsMerge);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsEnter", _wrap_Node_IsEnter);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsExit", _wrap_Node_IsExit);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsNextIteration", _wrap_Node_IsNextIteration);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsLoopCond", _wrap_Node_IsLoopCond);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsControlTrigger", _wrap_Node_IsControlTrigger);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsSend", _wrap_Node_IsSend);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsRecv", _wrap_Node_IsRecv);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsConstant", _wrap_Node_IsConstant);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsVariable", _wrap_Node_IsVariable);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsIdentity", _wrap_Node_IsIdentity);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsGetSessionHandle", _wrap_Node_IsGetSessionHandle);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsGetSessionTensor", _wrap_Node_IsGetSessionTensor);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsDeleteSessionTensor", _wrap_Node_IsDeleteSessionTensor);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsControlFlow", _wrap_Node_IsControlFlow);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsHostSend", _wrap_Node_IsHostSend);
SWIGV8_AddMemberFunction(_exports_Node_class, "IsHostRecv", _wrap_Node_IsHostRecv);
SWIGV8_AddMemberFunction(_exports_Node_class, "ClearAttr", _wrap_Node_ClearAttr);
SWIGV8_AddMemberFunction(_exports_Node_class, "input_edge", _wrap_Node_input_edge);
SWIGV8_AddMemberFunction(_exports_Node_class, "input_node", _wrap_Node_input_node);
SWIGV8_AddMemberFunction(_exports_Edge_class, "src", _wrap_Edge_src);
SWIGV8_AddMemberFunction(_exports_Edge_class, "dst", _wrap_Edge_dst);
SWIGV8_AddMemberFunction(_exports_Edge_class, "id", _wrap_Edge_id);
SWIGV8_AddMemberFunction(_exports_Edge_class, "src_output", _wrap_Edge_src_output);
SWIGV8_AddMemberFunction(_exports_Edge_class, "dst_input", _wrap_Edge_dst_input);
SWIGV8_AddMemberFunction(_exports_Edge_class, "IsControlEdge", _wrap_Edge_IsControlEdge);
SWIGV8_AddMemberFunction(_exports_Graph_class, "versions", _wrap_Graph_versions);
SWIGV8_AddMemberFunction(_exports_Graph_class, "set_versions", _wrap_Graph_set_versions);
SWIGV8_AddMemberFunction(_exports_Graph_class, "AddNode", _wrap_Graph_AddNode);
SWIGV8_AddMemberFunction(_exports_Graph_class, "CopyNode", _wrap_Graph_CopyNode);
SWIGV8_AddMemberFunction(_exports_Graph_class, "RemoveNode", _wrap_Graph_RemoveNode);
SWIGV8_AddMemberFunction(_exports_Graph_class, "AddEdge", _wrap_Graph_AddEdge);
SWIGV8_AddMemberFunction(_exports_Graph_class, "AddControlEdge", _wrap_Graph_AddControlEdge);
SWIGV8_AddMemberFunction(_exports_Graph_class, "RemoveEdge", _wrap_Graph_RemoveEdge);
SWIGV8_AddMemberFunction(_exports_Graph_class, "num_nodes", _wrap_Graph_num_nodes);
SWIGV8_AddMemberFunction(_exports_Graph_class, "num_edges", _wrap_Graph_num_edges);
SWIGV8_AddMemberFunction(_exports_Graph_class, "ToGraphDefSubRange", _wrap_Graph_ToGraphDefSubRange);
SWIGV8_AddMemberFunction(_exports_Graph_class, "ToGraphDef", _wrap_Graph_ToGraphDef);
SWIGV8_AddMemberFunction(_exports_Graph_class, "NewName", _wrap_Graph_NewName);
SWIGV8_AddMemberFunction(_exports_Graph_class, "nodes", _wrap_Graph_nodes);
SWIGV8_AddMemberFunction(_exports_Graph_class, "num_node_ids", _wrap_Graph_num_node_ids);
SWIGV8_AddMemberFunction(_exports_Graph_class, "FindNodeId", _wrap_Graph_FindNodeId);
SWIGV8_AddMemberFunction(_exports_Graph_class, "num_edge_ids", _wrap_Graph_num_edge_ids);
SWIGV8_AddMemberFunction(_exports_Graph_class, "FindEdgeId", _wrap_Graph_FindEdgeId);
SWIGV8_AddMemberFunction(_exports_Graph_class, "edges", _wrap_Graph_edges);
SWIGV8_AddMemberFunction(_exports_Graph_class, "source_node", _wrap_Graph_source_node);
SWIGV8_AddMemberFunction(_exports_Graph_class, "sink_node", _wrap_Graph_sink_node);
SWIGV8_AddMemberFunction(_exports_Graph_class, "op_registry", _wrap_Graph_op_registry);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "__ref__", _wrap_NodeIter___ref__);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "__deref__", _wrap_NodeIter___deref__);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "DebugString", _wrap_NodeIter_DebugString);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "id", _wrap_NodeIter_id);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "cost_id", _wrap_NodeIter_cost_id);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "name", _wrap_NodeIter_name);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "type_string", _wrap_NodeIter_type_string);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "def", _wrap_NodeIter_def);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "op_def", _wrap_NodeIter_op_def);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "num_inputs", _wrap_NodeIter_num_inputs);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "input_type", _wrap_NodeIter_input_type);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "input_types", _wrap_NodeIter_input_types);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "num_outputs", _wrap_NodeIter_num_outputs);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "output_type", _wrap_NodeIter_output_type);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "output_types", _wrap_NodeIter_output_types);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "assigned_device_name", _wrap_NodeIter_assigned_device_name);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "set_assigned_device_name", _wrap_NodeIter_set_assigned_device_name);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "in_nodes", _wrap_NodeIter_in_nodes);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "out_nodes", _wrap_NodeIter_out_nodes);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "in_edges", _wrap_NodeIter_in_edges);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "out_edges", _wrap_NodeIter_out_edges);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsSource", _wrap_NodeIter_IsSource);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsSink", _wrap_NodeIter_IsSink);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsOp", _wrap_NodeIter_IsOp);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsSwitch", _wrap_NodeIter_IsSwitch);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsMerge", _wrap_NodeIter_IsMerge);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsEnter", _wrap_NodeIter_IsEnter);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsExit", _wrap_NodeIter_IsExit);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsNextIteration", _wrap_NodeIter_IsNextIteration);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsLoopCond", _wrap_NodeIter_IsLoopCond);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsControlTrigger", _wrap_NodeIter_IsControlTrigger);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsSend", _wrap_NodeIter_IsSend);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsRecv", _wrap_NodeIter_IsRecv);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsConstant", _wrap_NodeIter_IsConstant);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsVariable", _wrap_NodeIter_IsVariable);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsIdentity", _wrap_NodeIter_IsIdentity);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsGetSessionHandle", _wrap_NodeIter_IsGetSessionHandle);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsGetSessionTensor", _wrap_NodeIter_IsGetSessionTensor);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsDeleteSessionTensor", _wrap_NodeIter_IsDeleteSessionTensor);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsControlFlow", _wrap_NodeIter_IsControlFlow);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsHostSend", _wrap_NodeIter_IsHostSend);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "IsHostRecv", _wrap_NodeIter_IsHostRecv);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "ClearAttr", _wrap_NodeIter_ClearAttr);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "input_edge", _wrap_NodeIter_input_edge);
SWIGV8_AddMemberFunction(_exports_NodeIter_class, "input_node", _wrap_NodeIter_input_node);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "__ref__", _wrap_NeighborIter___ref__);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "__deref__", _wrap_NeighborIter___deref__);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "DebugString", _wrap_NeighborIter_DebugString);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "id", _wrap_NeighborIter_id);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "cost_id", _wrap_NeighborIter_cost_id);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "name", _wrap_NeighborIter_name);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "type_string", _wrap_NeighborIter_type_string);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "def", _wrap_NeighborIter_def);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "op_def", _wrap_NeighborIter_op_def);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "num_inputs", _wrap_NeighborIter_num_inputs);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "input_type", _wrap_NeighborIter_input_type);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "input_types", _wrap_NeighborIter_input_types);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "num_outputs", _wrap_NeighborIter_num_outputs);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "output_type", _wrap_NeighborIter_output_type);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "output_types", _wrap_NeighborIter_output_types);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "assigned_device_name", _wrap_NeighborIter_assigned_device_name);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "set_assigned_device_name", _wrap_NeighborIter_set_assigned_device_name);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "in_nodes", _wrap_NeighborIter_in_nodes);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "out_nodes", _wrap_NeighborIter_out_nodes);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "in_edges", _wrap_NeighborIter_in_edges);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "out_edges", _wrap_NeighborIter_out_edges);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsSource", _wrap_NeighborIter_IsSource);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsSink", _wrap_NeighborIter_IsSink);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsOp", _wrap_NeighborIter_IsOp);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsSwitch", _wrap_NeighborIter_IsSwitch);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsMerge", _wrap_NeighborIter_IsMerge);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsEnter", _wrap_NeighborIter_IsEnter);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsExit", _wrap_NeighborIter_IsExit);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsNextIteration", _wrap_NeighborIter_IsNextIteration);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsLoopCond", _wrap_NeighborIter_IsLoopCond);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsControlTrigger", _wrap_NeighborIter_IsControlTrigger);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsSend", _wrap_NeighborIter_IsSend);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsRecv", _wrap_NeighborIter_IsRecv);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsConstant", _wrap_NeighborIter_IsConstant);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsVariable", _wrap_NeighborIter_IsVariable);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsIdentity", _wrap_NeighborIter_IsIdentity);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsGetSessionHandle", _wrap_NeighborIter_IsGetSessionHandle);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsGetSessionTensor", _wrap_NeighborIter_IsGetSessionTensor);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsDeleteSessionTensor", _wrap_NeighborIter_IsDeleteSessionTensor);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsControlFlow", _wrap_NeighborIter_IsControlFlow);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsHostSend", _wrap_NeighborIter_IsHostSend);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "IsHostRecv", _wrap_NeighborIter_IsHostRecv);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "ClearAttr", _wrap_NeighborIter_ClearAttr);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "input_edge", _wrap_NeighborIter_input_edge);
SWIGV8_AddMemberFunction(_exports_NeighborIter_class, "input_node", _wrap_NeighborIter_input_node);
SWIGV8_AddMemberFunction(_exports_ShapeRefiner_class, "AddNode", _wrap_ShapeRefiner_AddNode);
SWIGV8_AddMemberFunction(_exports_ShapeRefiner_class, "SetShape", _wrap_ShapeRefiner_SetShape);
SWIGV8_AddMemberFunction(_exports_ShapeRefiner_class, "GetContext", _wrap_ShapeRefiner_GetContext);
SWIGV8_AddMemberFunction(_exports_NodeBuilder_class, "Input", _wrap_NodeBuilder__wrap_NodeBuilder_Input);
SWIGV8_AddMemberFunction(_exports_NodeBuilder_class, "ControlInput", _wrap_NodeBuilder_ControlInput);
SWIGV8_AddMemberFunction(_exports_NodeBuilder_class, "ControlInputs", _wrap_NodeBuilder_ControlInputs);
SWIGV8_AddMemberFunction(_exports_NodeBuilder_class, "Device", _wrap_NodeBuilder_Device);
SWIGV8_AddMemberFunction(_exports_NodeBuilder_class, "Finalize", _wrap_NodeBuilder_Finalize);
SWIGV8_AddMemberFunction(_exports_NodeBuilder_class, "node_name", _wrap_NodeBuilder_node_name);
SWIGV8_AddMemberFunction(_exports_NodeBuilder_class, "op_def", _wrap_NodeBuilder_op_def);
SWIGV8_AddMemberFunction(_exports_Status_class, "ok", _wrap_Status_ok);
SWIGV8_AddMemberFunction(_exports_Status_class, "code", _wrap_Status_code);
SWIGV8_AddMemberFunction(_exports_Status_class, "error_message", _wrap_Status_error_message);
SWIGV8_AddMemberFunction(_exports_Status_class, "Update", _wrap_Status_Update);
SWIGV8_AddMemberFunction(_exports_Status_class, "ToString", _wrap_Status_ToString);
SWIGV8_AddMemberFunction(_exports_OpRegistryInterface_class, "LookUp", _wrap_OpRegistryInterface_LookUp);
SWIGV8_AddMemberFunction(_exports_OpRegistryInterface_class, "LookUpOpDef", _wrap_OpRegistryInterface_LookUpOpDef);
SWIGV8_AddMemberFunction(_exports_OpRegistry_class, "Register", _wrap_OpRegistry_Register);
SWIGV8_AddMemberFunction(_exports_OpRegistry_class, "LookUp", _wrap_OpRegistry_LookUp);
SWIGV8_AddMemberFunction(_exports_OpRegistry_class, "Export", _wrap_OpRegistry_Export);
SWIGV8_AddMemberFunction(_exports_OpRegistry_class, "DebugString", _wrap_OpRegistry_DebugString);
SWIGV8_AddMemberFunction(_exports_OpRegistry_class, "GetRegisteredOps", _wrap_OpRegistry_GetRegisteredOps);
SWIGV8_AddMemberFunction(_exports_OpRegistry_class, "SetWatcher", _wrap_OpRegistry_SetWatcher);
SWIGV8_AddMemberFunction(_exports_OpRegistry_class, "ProcessRegistrations", _wrap_OpRegistry_ProcessRegistrations);
SWIGV8_AddMemberFunction(_exports_OpRegistry_class, "DeferRegistrations", _wrap_OpRegistry_DeferRegistrations);
SWIGV8_AddMemberFunction(_exports_OpRegistry_class, "ClearDeferredRegistrations", _wrap_OpRegistry_ClearDeferredRegistrations);
SWIGV8_AddMemberFunction(_exports_OpListOpRegistry_class, "LookUp", _wrap_OpListOpRegistry_LookUp);
SWIGV8_AddMemberVariable(_exports_TF_Status_class, "status", _wrap_TF_Status_status_get, _wrap_TF_Status_status_set);
SWIGV8_AddMemberVariable(_exports_TF_Tensor_class, "dtype", _wrap_TF_Tensor_dtype_get, _wrap_TF_Tensor_dtype_set);
SWIGV8_AddMemberVariable(_exports_TF_Tensor_class, "shape", _wrap_TF_Tensor_shape_get, _wrap_TF_Tensor_shape_set);
SWIGV8_AddMemberVariable(_exports_TF_Tensor_class, "buffer", _wrap_TF_Tensor_buffer_get, _wrap_TF_Tensor_buffer_set);
SWIGV8_AddMemberVariable(_exports_TF_SessionOptions_class, "options", _wrap_TF_SessionOptions_options_get, _wrap_TF_SessionOptions_options_set);
SWIGV8_AddMemberVariable(_exports_TF_DeprecatedSession_class, "session", _wrap_TF_DeprecatedSession_session_get, _wrap_TF_DeprecatedSession_session_set);
SWIGV8_AddMemberVariable(_exports_TF_Library_class, "lib_handle", _wrap_TF_Library_lib_handle_get, _wrap_TF_Library_lib_handle_set);
SWIGV8_AddMemberVariable(_exports_TF_Library_class, "op_list", _wrap_TF_Library_op_list_get, _wrap_TF_Library_op_list_set);
SWIGV8_AddMemberVariable(_exports_TF_Graph_class, "graph", _wrap_TF_Graph_graph_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_TF_Graph_class, "refiner", _wrap_TF_Graph_refiner_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_TF_Graph_class, "name_map", _wrap_TF_Graph_name_map_get, _wrap_TF_Graph_name_map_set);
SWIGV8_AddMemberVariable(_exports_TF_Graph_class, "num_sessions", _wrap_TF_Graph_num_sessions_get, _wrap_TF_Graph_num_sessions_set);
SWIGV8_AddMemberVariable(_exports_TF_Graph_class, "delete_requested", _wrap_TF_Graph_delete_requested_get, _wrap_TF_Graph_delete_requested_set);
SWIGV8_AddMemberVariable(_exports_TF_OperationDescription_class, "node_builder", _wrap_TF_OperationDescription_node_builder_get, _wrap_TF_OperationDescription_node_builder_set);
SWIGV8_AddMemberVariable(_exports_TF_OperationDescription_class, "graph", _wrap_TF_OperationDescription_graph_get, _wrap_TF_OperationDescription_graph_set);
SWIGV8_AddMemberVariable(_exports_TF_OperationDescription_class, "colocation_constraints", _wrap_TF_OperationDescription_colocation_constraints_get, _wrap_TF_OperationDescription_colocation_constraints_set);
SWIGV8_AddMemberVariable(_exports_TF_Operation_class, "node", _wrap_TF_Operation_node_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_TF_Session_class, "session", _wrap_TF_Session_session_get, _wrap_TF_Session_session_set);
SWIGV8_AddMemberVariable(_exports_TF_Session_class, "graph", _wrap_TF_Session_graph_get, _wrap_TF_Session_graph_set);
SWIGV8_AddMemberVariable(_exports_TF_Session_class, "last_num_graph_nodes", _wrap_TF_Session_last_num_graph_nodes_get, _wrap_TF_Session_last_num_graph_nodes_set);
SWIGV8_AddMemberVariable(_exports_TF_ImportGraphDefOptions_class, "opts", _wrap_TF_ImportGraphDefOptions_opts_get, _wrap_TF_ImportGraphDefOptions_opts_set);
SWIGV8_AddMemberFunction(_exports_CSession_class, "SetInputs", _wrap_CSession_SetInputs);
SWIGV8_AddMemberFunction(_exports_CSession_class, "SetOutputs", _wrap_CSession_SetOutputs);
SWIGV8_AddMemberFunction(_exports_CSession_class, "SetTargets", _wrap_CSession_SetTargets);
SWIGV8_AddMemberFunction(_exports_CSession_class, "Run", _wrap_CSession_Run);
SWIGV8_AddMemberFunction(_exports_CSession_class, "CloseAndDelete", _wrap_CSession_CloseAndDelete);
SWIGV8_AddMemberFunction(_exports_CSession_class, "output_tensor", _wrap_CSession_output_tensor);


  /* setup inheritances */
  if (SWIGTYPE_p_google__protobuf__MessageLite->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__MessageLite->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Message_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__MessageLite->clientdata)->class_templ);
#else
  _exports_Message_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__MessageLite->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Message _google__protobuf__MessageLite\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Message _google__protobuf__MessageLite\n");
#endif
}
if (SWIGTYPE_p_google__protobuf__Message->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_NodeDef_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ);
#else
  _exports_NodeDef_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_NodeDef _google__protobuf__Message\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_NodeDef _google__protobuf__Message\n");
#endif
}
if (SWIGTYPE_p_google__protobuf__Message->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_VariableDef_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ);
#else
  _exports_VariableDef_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_VariableDef _google__protobuf__Message\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_VariableDef _google__protobuf__Message\n");
#endif
}
if (SWIGTYPE_p_google__protobuf__Message->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_SaveSliceInfoDef_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ);
#else
  _exports_SaveSliceInfoDef_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_SaveSliceInfoDef _google__protobuf__Message\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_SaveSliceInfoDef _google__protobuf__Message\n");
#endif
}
if (SWIGTYPE_p_google__protobuf__Message->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_AttrValue_ListValue_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ);
#else
  _exports_AttrValue_ListValue_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_AttrValue_ListValue _google__protobuf__Message\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_AttrValue_ListValue _google__protobuf__Message\n");
#endif
}
if (SWIGTYPE_p_google__protobuf__Message->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_AttrValue_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ);
#else
  _exports_AttrValue_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_AttrValue _google__protobuf__Message\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_AttrValue _google__protobuf__Message\n");
#endif
}
if (SWIGTYPE_p_google__protobuf__Message->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_NameAttrList_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ);
#else
  _exports_NameAttrList_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_NameAttrList _google__protobuf__Message\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_NameAttrList _google__protobuf__Message\n");
#endif
}
if (SWIGTYPE_p_google__protobuf__Message->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_TensorProto_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ);
#else
  _exports_TensorProto_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_TensorProto _google__protobuf__Message\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_TensorProto _google__protobuf__Message\n");
#endif
}
if (SWIGTYPE_p_google__protobuf__Message->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_OpDef_ArgDef_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ);
#else
  _exports_OpDef_ArgDef_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_OpDef_ArgDef _google__protobuf__Message\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_OpDef_ArgDef _google__protobuf__Message\n");
#endif
}
if (SWIGTYPE_p_google__protobuf__Message->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_OpDef_AttrDef_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ);
#else
  _exports_OpDef_AttrDef_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_OpDef_AttrDef _google__protobuf__Message\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_OpDef_AttrDef _google__protobuf__Message\n");
#endif
}
if (SWIGTYPE_p_google__protobuf__Message->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_OpDef_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ);
#else
  _exports_OpDef_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_OpDef _google__protobuf__Message\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_OpDef _google__protobuf__Message\n");
#endif
}
if (SWIGTYPE_p_google__protobuf__Message->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_OpDeprecation_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ);
#else
  _exports_OpDeprecation_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_OpDeprecation _google__protobuf__Message\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_OpDeprecation _google__protobuf__Message\n");
#endif
}
if (SWIGTYPE_p_google__protobuf__Message->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_OpList_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ);
#else
  _exports_OpList_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_google__protobuf__Message->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_OpList _google__protobuf__Message\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_OpList _google__protobuf__Message\n");
#endif
}
if (SWIGTYPE_p_tensorflow__Env->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_tensorflow__Env->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_EnvWrapper_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_tensorflow__Env->clientdata)->class_templ);
#else
  _exports_EnvWrapper_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_tensorflow__Env->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_EnvWrapper _tensorflow__Env\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_EnvWrapper _tensorflow__Env\n");
#endif
}
if (SWIGTYPE_p_tensorflow__OpRegistryInterface->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_tensorflow__OpRegistryInterface->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_OpRegistry_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_tensorflow__OpRegistryInterface->clientdata)->class_templ);
#else
  _exports_OpRegistry_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_tensorflow__OpRegistryInterface->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_OpRegistry _tensorflow__OpRegistryInterface\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_OpRegistry _tensorflow__OpRegistryInterface\n");
#endif
}
if (SWIGTYPE_p_tensorflow__OpRegistryInterface->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_tensorflow__OpRegistryInterface->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_OpListOpRegistry_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_tensorflow__OpRegistryInterface->clientdata)->class_templ);
#else
  _exports_OpListOpRegistry_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_tensorflow__OpRegistryInterface->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_OpListOpRegistry _tensorflow__OpRegistryInterface\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_OpListOpRegistry _tensorflow__OpRegistryInterface\n");
#endif
}


  /* class instances */
  /* Class: MessageLite (_exports_MessageLite) */
v8::Handle<v8::FunctionTemplate> _exports_MessageLite_class_0 = SWIGV8_CreateClassTemplate("MessageLite");
_exports_MessageLite_class_0->SetCallHandler(_wrap_new_veto_MessageLite);
_exports_MessageLite_class_0->Inherit(_exports_MessageLite_class);
_exports_MessageLite_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_MessageLite_obj = _exports_MessageLite_class_0->GetFunction();
/* Class: Metadata (_exports_Metadata) */
v8::Handle<v8::FunctionTemplate> _exports_Metadata_class_0 = SWIGV8_CreateClassTemplate("Metadata");
_exports_Metadata_class_0->SetCallHandler(_wrap_new_Metadata);
_exports_Metadata_class_0->Inherit(_exports_Metadata_class);
_exports_Metadata_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Metadata_obj = _exports_Metadata_class_0->GetFunction();
/* Class: Message (_exports_Message) */
v8::Handle<v8::FunctionTemplate> _exports_Message_class_0 = SWIGV8_CreateClassTemplate("Message");
_exports_Message_class_0->SetCallHandler(_wrap_new_veto_Message);
_exports_Message_class_0->Inherit(_exports_Message_class);
_exports_Message_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Message_obj = _exports_Message_class_0->GetFunction();
/* Class: Reflection (_exports_Reflection) */
v8::Handle<v8::FunctionTemplate> _exports_Reflection_class_0 = SWIGV8_CreateClassTemplate("Reflection");
_exports_Reflection_class_0->SetCallHandler(_wrap_new_veto_Reflection);
_exports_Reflection_class_0->Inherit(_exports_Reflection_class);
_exports_Reflection_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Reflection_obj = _exports_Reflection_class_0->GetFunction();
/* Class: MessageFactory (_exports_MessageFactory) */
v8::Handle<v8::FunctionTemplate> _exports_MessageFactory_class_0 = SWIGV8_CreateClassTemplate("MessageFactory");
_exports_MessageFactory_class_0->SetCallHandler(_wrap_new_veto_MessageFactory);
_exports_MessageFactory_class_0->Inherit(_exports_MessageFactory_class);
_exports_MessageFactory_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_MessageFactory_obj = _exports_MessageFactory_class_0->GetFunction();
/* Class: TF_Buffer (_exports_TF_Buffer) */
v8::Handle<v8::FunctionTemplate> _exports_TF_Buffer_class_0 = SWIGV8_CreateClassTemplate("TF_Buffer");
_exports_TF_Buffer_class_0->SetCallHandler(_wrap_new_TF_Buffer);
_exports_TF_Buffer_class_0->Inherit(_exports_TF_Buffer_class);
_exports_TF_Buffer_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_Buffer_obj = _exports_TF_Buffer_class_0->GetFunction();
/* Class: TF_Input (_exports_TF_Input) */
v8::Handle<v8::FunctionTemplate> _exports_TF_Input_class_0 = SWIGV8_CreateClassTemplate("TF_Input");
_exports_TF_Input_class_0->SetCallHandler(_wrap_new_TF_Input);
_exports_TF_Input_class_0->Inherit(_exports_TF_Input_class);
_exports_TF_Input_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_Input_obj = _exports_TF_Input_class_0->GetFunction();
/* Class: TF_Output (_exports_TF_Output) */
v8::Handle<v8::FunctionTemplate> _exports_TF_Output_class_0 = SWIGV8_CreateClassTemplate("TF_Output");
_exports_TF_Output_class_0->SetCallHandler(_wrap_new_TF_Output);
_exports_TF_Output_class_0->Inherit(_exports_TF_Output_class);
_exports_TF_Output_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_Output_obj = _exports_TF_Output_class_0->GetFunction();
/* Class: TF_AttrMetadata (_exports_TF_AttrMetadata) */
v8::Handle<v8::FunctionTemplate> _exports_TF_AttrMetadata_class_0 = SWIGV8_CreateClassTemplate("TF_AttrMetadata");
_exports_TF_AttrMetadata_class_0->SetCallHandler(_wrap_new_TF_AttrMetadata);
_exports_TF_AttrMetadata_class_0->Inherit(_exports_TF_AttrMetadata_class);
_exports_TF_AttrMetadata_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_AttrMetadata_obj = _exports_TF_AttrMetadata_class_0->GetFunction();
/* Class: NodeDef (_exports_NodeDef) */
v8::Handle<v8::FunctionTemplate> _exports_NodeDef_class_0 = SWIGV8_CreateClassTemplate("NodeDef");
_exports_NodeDef_class_0->SetCallHandler(_wrap_new_NodeDef);
_exports_NodeDef_class_0->Inherit(_exports_NodeDef_class);
_exports_NodeDef_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_NodeDef_obj = _exports_NodeDef_class_0->GetFunction();
/* Class: VariableDef (_exports_VariableDef) */
v8::Handle<v8::FunctionTemplate> _exports_VariableDef_class_0 = SWIGV8_CreateClassTemplate("VariableDef");
_exports_VariableDef_class_0->SetCallHandler(_wrap_new_VariableDef);
_exports_VariableDef_class_0->Inherit(_exports_VariableDef_class);
_exports_VariableDef_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_VariableDef_obj = _exports_VariableDef_class_0->GetFunction();
/* Class: SaveSliceInfoDef (_exports_SaveSliceInfoDef) */
v8::Handle<v8::FunctionTemplate> _exports_SaveSliceInfoDef_class_0 = SWIGV8_CreateClassTemplate("SaveSliceInfoDef");
_exports_SaveSliceInfoDef_class_0->SetCallHandler(_wrap_new_SaveSliceInfoDef);
_exports_SaveSliceInfoDef_class_0->Inherit(_exports_SaveSliceInfoDef_class);
_exports_SaveSliceInfoDef_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_SaveSliceInfoDef_obj = _exports_SaveSliceInfoDef_class_0->GetFunction();
/* Class: AttrValue_ListValue (_exports_AttrValue_ListValue) */
v8::Handle<v8::FunctionTemplate> _exports_AttrValue_ListValue_class_0 = SWIGV8_CreateClassTemplate("AttrValue_ListValue");
_exports_AttrValue_ListValue_class_0->SetCallHandler(_wrap_new_AttrValue_ListValue);
_exports_AttrValue_ListValue_class_0->Inherit(_exports_AttrValue_ListValue_class);
_exports_AttrValue_ListValue_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AttrValue_ListValue_obj = _exports_AttrValue_ListValue_class_0->GetFunction();
/* Class: AttrValue (_exports_AttrValue) */
v8::Handle<v8::FunctionTemplate> _exports_AttrValue_class_0 = SWIGV8_CreateClassTemplate("AttrValue");
_exports_AttrValue_class_0->SetCallHandler(_wrap_new_AttrValue);
_exports_AttrValue_class_0->Inherit(_exports_AttrValue_class);
_exports_AttrValue_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_AttrValue_obj = _exports_AttrValue_class_0->GetFunction();
/* Class: NameAttrList (_exports_NameAttrList) */
v8::Handle<v8::FunctionTemplate> _exports_NameAttrList_class_0 = SWIGV8_CreateClassTemplate("NameAttrList");
_exports_NameAttrList_class_0->SetCallHandler(_wrap_new_NameAttrList);
_exports_NameAttrList_class_0->Inherit(_exports_NameAttrList_class);
_exports_NameAttrList_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_NameAttrList_obj = _exports_NameAttrList_class_0->GetFunction();
/* Class: TensorProto (_exports_TensorProto) */
v8::Handle<v8::FunctionTemplate> _exports_TensorProto_class_0 = SWIGV8_CreateClassTemplate("TensorProto");
_exports_TensorProto_class_0->SetCallHandler(_wrap_new_TensorProto);
_exports_TensorProto_class_0->Inherit(_exports_TensorProto_class);
_exports_TensorProto_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TensorProto_obj = _exports_TensorProto_class_0->GetFunction();
/* Class: OpDef_ArgDef (_exports_OpDef_ArgDef) */
v8::Handle<v8::FunctionTemplate> _exports_OpDef_ArgDef_class_0 = SWIGV8_CreateClassTemplate("OpDef_ArgDef");
_exports_OpDef_ArgDef_class_0->SetCallHandler(_wrap_new_OpDef_ArgDef);
_exports_OpDef_ArgDef_class_0->Inherit(_exports_OpDef_ArgDef_class);
_exports_OpDef_ArgDef_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_OpDef_ArgDef_obj = _exports_OpDef_ArgDef_class_0->GetFunction();
/* Class: OpDef_AttrDef (_exports_OpDef_AttrDef) */
v8::Handle<v8::FunctionTemplate> _exports_OpDef_AttrDef_class_0 = SWIGV8_CreateClassTemplate("OpDef_AttrDef");
_exports_OpDef_AttrDef_class_0->SetCallHandler(_wrap_new_OpDef_AttrDef);
_exports_OpDef_AttrDef_class_0->Inherit(_exports_OpDef_AttrDef_class);
_exports_OpDef_AttrDef_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_OpDef_AttrDef_obj = _exports_OpDef_AttrDef_class_0->GetFunction();
/* Class: OpDef (_exports_OpDef) */
v8::Handle<v8::FunctionTemplate> _exports_OpDef_class_0 = SWIGV8_CreateClassTemplate("OpDef");
_exports_OpDef_class_0->SetCallHandler(_wrap_new_OpDef);
_exports_OpDef_class_0->Inherit(_exports_OpDef_class);
_exports_OpDef_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_OpDef_obj = _exports_OpDef_class_0->GetFunction();
/* Class: OpDeprecation (_exports_OpDeprecation) */
v8::Handle<v8::FunctionTemplate> _exports_OpDeprecation_class_0 = SWIGV8_CreateClassTemplate("OpDeprecation");
_exports_OpDeprecation_class_0->SetCallHandler(_wrap_new_OpDeprecation);
_exports_OpDeprecation_class_0->Inherit(_exports_OpDeprecation_class);
_exports_OpDeprecation_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_OpDeprecation_obj = _exports_OpDeprecation_class_0->GetFunction();
/* Class: OpList (_exports_OpList) */
v8::Handle<v8::FunctionTemplate> _exports_OpList_class_0 = SWIGV8_CreateClassTemplate("OpList");
_exports_OpList_class_0->SetCallHandler(_wrap_new_OpList);
_exports_OpList_class_0->Inherit(_exports_OpList_class);
_exports_OpList_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_OpList_obj = _exports_OpList_class_0->GetFunction();
/* Class: StringPiece (_exports_StringPiece) */
v8::Handle<v8::FunctionTemplate> _exports_StringPiece_class_0 = SWIGV8_CreateClassTemplate("StringPiece");
_exports_StringPiece_class_0->SetCallHandler(_wrap_new_StringPiece);
_exports_StringPiece_class_0->Inherit(_exports_StringPiece_class);
_exports_StringPiece_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_StringPiece_obj = _exports_StringPiece_class_0->GetFunction();
/* Class: Env (_exports_Env) */
v8::Handle<v8::FunctionTemplate> _exports_Env_class_0 = SWIGV8_CreateClassTemplate("Env");
_exports_Env_class_0->SetCallHandler(_wrap_new_veto_Env);
_exports_Env_class_0->Inherit(_exports_Env_class);
_exports_Env_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Env_obj = _exports_Env_class_0->GetFunction();
/* Class: EnvWrapper (_exports_EnvWrapper) */
v8::Handle<v8::FunctionTemplate> _exports_EnvWrapper_class_0 = SWIGV8_CreateClassTemplate("EnvWrapper");
_exports_EnvWrapper_class_0->SetCallHandler(_wrap_new_EnvWrapper);
_exports_EnvWrapper_class_0->Inherit(_exports_EnvWrapper_class);
_exports_EnvWrapper_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_EnvWrapper_obj = _exports_EnvWrapper_class_0->GetFunction();
/* Class: Thread (_exports_Thread) */
v8::Handle<v8::FunctionTemplate> _exports_Thread_class_0 = SWIGV8_CreateClassTemplate("Thread");
_exports_Thread_class_0->SetCallHandler(_wrap_new_Thread);
_exports_Thread_class_0->Inherit(_exports_Thread_class);
_exports_Thread_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Thread_obj = _exports_Thread_class_0->GetFunction();
/* Class: ThreadOptions (_exports_ThreadOptions) */
v8::Handle<v8::FunctionTemplate> _exports_ThreadOptions_class_0 = SWIGV8_CreateClassTemplate("ThreadOptions");
_exports_ThreadOptions_class_0->SetCallHandler(_wrap_new_ThreadOptions);
_exports_ThreadOptions_class_0->Inherit(_exports_ThreadOptions_class);
_exports_ThreadOptions_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ThreadOptions_obj = _exports_ThreadOptions_class_0->GetFunction();
/* Class: Session (_exports_Session) */
v8::Handle<v8::FunctionTemplate> _exports_Session_class_0 = SWIGV8_CreateClassTemplate("Session");
_exports_Session_class_0->SetCallHandler(_wrap_new_veto_Session);
_exports_Session_class_0->Inherit(_exports_Session_class);
_exports_Session_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Session_obj = _exports_Session_class_0->GetFunction();
/* Class: SessionOptions (_exports_SessionOptions) */
v8::Handle<v8::FunctionTemplate> _exports_SessionOptions_class_0 = SWIGV8_CreateClassTemplate("SessionOptions");
_exports_SessionOptions_class_0->SetCallHandler(_wrap_new_SessionOptions);
_exports_SessionOptions_class_0->Inherit(_exports_SessionOptions_class);
_exports_SessionOptions_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_SessionOptions_obj = _exports_SessionOptions_class_0->GetFunction();
/* Class: Tensor (_exports_Tensor) */
v8::Handle<v8::FunctionTemplate> _exports_Tensor_class_0 = SWIGV8_CreateClassTemplate("Tensor");
_exports_Tensor_class_0->SetCallHandler(_wrap_new_Tensor);
_exports_Tensor_class_0->Inherit(_exports_Tensor_class);
_exports_Tensor_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Tensor_obj = _exports_Tensor_class_0->GetFunction();
/* Class: TensorBuffer (_exports_TensorBuffer) */
v8::Handle<v8::FunctionTemplate> _exports_TensorBuffer_class_0 = SWIGV8_CreateClassTemplate("TensorBuffer");
_exports_TensorBuffer_class_0->SetCallHandler(_wrap_new_veto_TensorBuffer);
_exports_TensorBuffer_class_0->Inherit(_exports_TensorBuffer_class);
_exports_TensorBuffer_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TensorBuffer_obj = _exports_TensorBuffer_class_0->GetFunction();
/* Class: TensorShape (_exports_TensorShape) */
v8::Handle<v8::FunctionTemplate> _exports_TensorShape_class_0 = SWIGV8_CreateClassTemplate("TensorShape");
_exports_TensorShape_class_0->SetCallHandler(_wrap_new_TensorShape);
_exports_TensorShape_class_0->Inherit(_exports_TensorShape_class);
_exports_TensorShape_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TensorShape_obj = _exports_TensorShape_class_0->GetFunction();
/* Class: TensorShapeDim (_exports_TensorShapeDim) */
v8::Handle<v8::FunctionTemplate> _exports_TensorShapeDim_class_0 = SWIGV8_CreateClassTemplate("TensorShapeDim");
_exports_TensorShapeDim_class_0->SetCallHandler(_wrap_new_TensorShapeDim);
_exports_TensorShapeDim_class_0->Inherit(_exports_TensorShapeDim_class);
_exports_TensorShapeDim_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TensorShapeDim_obj = _exports_TensorShapeDim_class_0->GetFunction();
/* Class: TensorShapeIter (_exports_TensorShapeIter) */
v8::Handle<v8::FunctionTemplate> _exports_TensorShapeIter_class_0 = SWIGV8_CreateClassTemplate("TensorShapeIter");
_exports_TensorShapeIter_class_0->SetCallHandler(_wrap_new_TensorShapeIter);
_exports_TensorShapeIter_class_0->Inherit(_exports_TensorShapeIter_class);
_exports_TensorShapeIter_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TensorShapeIter_obj = _exports_TensorShapeIter_class_0->GetFunction();
/* Class: TensorShapeUtils (_exports_TensorShapeUtils) */
v8::Handle<v8::FunctionTemplate> _exports_TensorShapeUtils_class_0 = SWIGV8_CreateClassTemplate("TensorShapeUtils");
_exports_TensorShapeUtils_class_0->SetCallHandler(_wrap_new_TensorShapeUtils);
_exports_TensorShapeUtils_class_0->Inherit(_exports_TensorShapeUtils_class);
_exports_TensorShapeUtils_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TensorShapeUtils_obj = _exports_TensorShapeUtils_class_0->GetFunction();
/* Class: Node (_exports_Node) */
v8::Handle<v8::FunctionTemplate> _exports_Node_class_0 = SWIGV8_CreateClassTemplate("Node");
_exports_Node_class_0->SetCallHandler(_wrap_new_veto_Node);
_exports_Node_class_0->Inherit(_exports_Node_class);
_exports_Node_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Node_obj = _exports_Node_class_0->GetFunction();
/* Class: Edge (_exports_Edge) */
v8::Handle<v8::FunctionTemplate> _exports_Edge_class_0 = SWIGV8_CreateClassTemplate("Edge");
_exports_Edge_class_0->SetCallHandler(_wrap_new_veto_Edge);
_exports_Edge_class_0->Inherit(_exports_Edge_class);
_exports_Edge_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Edge_obj = _exports_Edge_class_0->GetFunction();
/* Class: Graph (_exports_Graph) */
v8::Handle<v8::FunctionTemplate> _exports_Graph_class_0 = SWIGV8_CreateClassTemplate("Graph");
_exports_Graph_class_0->SetCallHandler(_wrap_new_Graph);
_exports_Graph_class_0->Inherit(_exports_Graph_class);
_exports_Graph_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Graph_obj = _exports_Graph_class_0->GetFunction();
/* Class: NodeIter (_exports_NodeIter) */
v8::Handle<v8::FunctionTemplate> _exports_NodeIter_class_0 = SWIGV8_CreateClassTemplate("NodeIter");
_exports_NodeIter_class_0->SetCallHandler(_wrap_new_NodeIter);
_exports_NodeIter_class_0->Inherit(_exports_NodeIter_class);
_exports_NodeIter_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_NodeIter_obj = _exports_NodeIter_class_0->GetFunction();
/* Class: NeighborIter (_exports_NeighborIter) */
v8::Handle<v8::FunctionTemplate> _exports_NeighborIter_class_0 = SWIGV8_CreateClassTemplate("NeighborIter");
_exports_NeighborIter_class_0->SetCallHandler(_wrap_new_NeighborIter);
_exports_NeighborIter_class_0->Inherit(_exports_NeighborIter_class);
_exports_NeighborIter_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_NeighborIter_obj = _exports_NeighborIter_class_0->GetFunction();
/* Class: ShapeRefiner (_exports_ShapeRefiner) */
v8::Handle<v8::FunctionTemplate> _exports_ShapeRefiner_class_0 = SWIGV8_CreateClassTemplate("ShapeRefiner");
_exports_ShapeRefiner_class_0->SetCallHandler(_wrap_new_ShapeRefiner);
_exports_ShapeRefiner_class_0->Inherit(_exports_ShapeRefiner_class);
_exports_ShapeRefiner_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ShapeRefiner_obj = _exports_ShapeRefiner_class_0->GetFunction();
/* Class: NodeBuilder (_exports_NodeBuilder) */
v8::Handle<v8::FunctionTemplate> _exports_NodeBuilder_class_0 = SWIGV8_CreateClassTemplate("NodeBuilder");
_exports_NodeBuilder_class_0->SetCallHandler(_wrap_new_NodeBuilder);
_exports_NodeBuilder_class_0->Inherit(_exports_NodeBuilder_class);
_exports_NodeBuilder_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_NodeBuilder_obj = _exports_NodeBuilder_class_0->GetFunction();
/* Class: Status (_exports_Status) */
v8::Handle<v8::FunctionTemplate> _exports_Status_class_0 = SWIGV8_CreateClassTemplate("Status");
_exports_Status_class_0->SetCallHandler(_wrap_new_Status);
_exports_Status_class_0->Inherit(_exports_Status_class);
_exports_Status_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Status_obj = _exports_Status_class_0->GetFunction();
/* Class: OpRegistryInterface (_exports_OpRegistryInterface) */
v8::Handle<v8::FunctionTemplate> _exports_OpRegistryInterface_class_0 = SWIGV8_CreateClassTemplate("OpRegistryInterface");
_exports_OpRegistryInterface_class_0->SetCallHandler(_wrap_new_veto_OpRegistryInterface);
_exports_OpRegistryInterface_class_0->Inherit(_exports_OpRegistryInterface_class);
_exports_OpRegistryInterface_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_OpRegistryInterface_obj = _exports_OpRegistryInterface_class_0->GetFunction();
/* Class: OpRegistry (_exports_OpRegistry) */
v8::Handle<v8::FunctionTemplate> _exports_OpRegistry_class_0 = SWIGV8_CreateClassTemplate("OpRegistry");
_exports_OpRegistry_class_0->SetCallHandler(_wrap_new_OpRegistry);
_exports_OpRegistry_class_0->Inherit(_exports_OpRegistry_class);
_exports_OpRegistry_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_OpRegistry_obj = _exports_OpRegistry_class_0->GetFunction();
/* Class: OpListOpRegistry (_exports_OpListOpRegistry) */
v8::Handle<v8::FunctionTemplate> _exports_OpListOpRegistry_class_0 = SWIGV8_CreateClassTemplate("OpListOpRegistry");
_exports_OpListOpRegistry_class_0->SetCallHandler(_wrap_new_OpListOpRegistry);
_exports_OpListOpRegistry_class_0->Inherit(_exports_OpListOpRegistry_class);
_exports_OpListOpRegistry_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_OpListOpRegistry_obj = _exports_OpListOpRegistry_class_0->GetFunction();
/* Class: OpDefBuilderReceiver (_exports_OpDefBuilderReceiver) */
v8::Handle<v8::FunctionTemplate> _exports_OpDefBuilderReceiver_class_0 = SWIGV8_CreateClassTemplate("OpDefBuilderReceiver");
_exports_OpDefBuilderReceiver_class_0->SetCallHandler(_wrap_new_OpDefBuilderReceiver);
_exports_OpDefBuilderReceiver_class_0->Inherit(_exports_OpDefBuilderReceiver_class);
_exports_OpDefBuilderReceiver_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_OpDefBuilderReceiver_obj = _exports_OpDefBuilderReceiver_class_0->GetFunction();
/* Class: TF_Status (_exports_TF_Status) */
v8::Handle<v8::FunctionTemplate> _exports_TF_Status_class_0 = SWIGV8_CreateClassTemplate("TF_Status");
_exports_TF_Status_class_0->SetCallHandler(_wrap_new_TF_Status);
_exports_TF_Status_class_0->Inherit(_exports_TF_Status_class);
_exports_TF_Status_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_Status_obj = _exports_TF_Status_class_0->GetFunction();
/* Class: TF_Tensor (_exports_TF_Tensor) */
v8::Handle<v8::FunctionTemplate> _exports_TF_Tensor_class_0 = SWIGV8_CreateClassTemplate("TF_Tensor");
_exports_TF_Tensor_class_0->SetCallHandler(_wrap_new_TF_Tensor);
_exports_TF_Tensor_class_0->Inherit(_exports_TF_Tensor_class);
_exports_TF_Tensor_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_Tensor_obj = _exports_TF_Tensor_class_0->GetFunction();
/* Class: TF_SessionOptions (_exports_TF_SessionOptions) */
v8::Handle<v8::FunctionTemplate> _exports_TF_SessionOptions_class_0 = SWIGV8_CreateClassTemplate("TF_SessionOptions");
_exports_TF_SessionOptions_class_0->SetCallHandler(_wrap_new_TF_SessionOptions);
_exports_TF_SessionOptions_class_0->Inherit(_exports_TF_SessionOptions_class);
_exports_TF_SessionOptions_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_SessionOptions_obj = _exports_TF_SessionOptions_class_0->GetFunction();
/* Class: TF_DeprecatedSession (_exports_TF_DeprecatedSession) */
v8::Handle<v8::FunctionTemplate> _exports_TF_DeprecatedSession_class_0 = SWIGV8_CreateClassTemplate("TF_DeprecatedSession");
_exports_TF_DeprecatedSession_class_0->SetCallHandler(_wrap_new_TF_DeprecatedSession);
_exports_TF_DeprecatedSession_class_0->Inherit(_exports_TF_DeprecatedSession_class);
_exports_TF_DeprecatedSession_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_DeprecatedSession_obj = _exports_TF_DeprecatedSession_class_0->GetFunction();
/* Class: TensorCApi (_exports_TensorCApi) */
v8::Handle<v8::FunctionTemplate> _exports_TensorCApi_class_0 = SWIGV8_CreateClassTemplate("TensorCApi");
_exports_TensorCApi_class_0->SetCallHandler(_wrap_new_TensorCApi);
_exports_TensorCApi_class_0->Inherit(_exports_TensorCApi_class);
_exports_TensorCApi_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TensorCApi_obj = _exports_TensorCApi_class_0->GetFunction();
/* Class: TF_Library (_exports_TF_Library) */
v8::Handle<v8::FunctionTemplate> _exports_TF_Library_class_0 = SWIGV8_CreateClassTemplate("TF_Library");
_exports_TF_Library_class_0->SetCallHandler(_wrap_new_TF_Library);
_exports_TF_Library_class_0->Inherit(_exports_TF_Library_class);
_exports_TF_Library_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_Library_obj = _exports_TF_Library_class_0->GetFunction();
/* Class: TF_Graph (_exports_TF_Graph) */
v8::Handle<v8::FunctionTemplate> _exports_TF_Graph_class_0 = SWIGV8_CreateClassTemplate("TF_Graph");
_exports_TF_Graph_class_0->SetCallHandler(_wrap_new_TF_Graph);
_exports_TF_Graph_class_0->Inherit(_exports_TF_Graph_class);
_exports_TF_Graph_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_Graph_obj = _exports_TF_Graph_class_0->GetFunction();
/* Class: TF_OperationDescription (_exports_TF_OperationDescription) */
v8::Handle<v8::FunctionTemplate> _exports_TF_OperationDescription_class_0 = SWIGV8_CreateClassTemplate("TF_OperationDescription");
_exports_TF_OperationDescription_class_0->SetCallHandler(_wrap_new_TF_OperationDescription);
_exports_TF_OperationDescription_class_0->Inherit(_exports_TF_OperationDescription_class);
_exports_TF_OperationDescription_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_OperationDescription_obj = _exports_TF_OperationDescription_class_0->GetFunction();
/* Class: TF_Operation (_exports_TF_Operation) */
v8::Handle<v8::FunctionTemplate> _exports_TF_Operation_class_0 = SWIGV8_CreateClassTemplate("TF_Operation");
_exports_TF_Operation_class_0->SetCallHandler(_wrap_new_veto_TF_Operation);
_exports_TF_Operation_class_0->Inherit(_exports_TF_Operation_class);
_exports_TF_Operation_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_Operation_obj = _exports_TF_Operation_class_0->GetFunction();
/* Class: TF_Session (_exports_TF_Session) */
v8::Handle<v8::FunctionTemplate> _exports_TF_Session_class_0 = SWIGV8_CreateClassTemplate("TF_Session");
_exports_TF_Session_class_0->SetCallHandler(_wrap_new_TF_Session);
_exports_TF_Session_class_0->Inherit(_exports_TF_Session_class);
_exports_TF_Session_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_Session_obj = _exports_TF_Session_class_0->GetFunction();
/* Class: TF_ImportGraphDefOptions (_exports_TF_ImportGraphDefOptions) */
v8::Handle<v8::FunctionTemplate> _exports_TF_ImportGraphDefOptions_class_0 = SWIGV8_CreateClassTemplate("TF_ImportGraphDefOptions");
_exports_TF_ImportGraphDefOptions_class_0->SetCallHandler(_wrap_new_TF_ImportGraphDefOptions);
_exports_TF_ImportGraphDefOptions_class_0->Inherit(_exports_TF_ImportGraphDefOptions_class);
_exports_TF_ImportGraphDefOptions_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TF_ImportGraphDefOptions_obj = _exports_TF_ImportGraphDefOptions_class_0->GetFunction();
/* Class: CSession (_exports_CSession) */
v8::Handle<v8::FunctionTemplate> _exports_CSession_class_0 = SWIGV8_CreateClassTemplate("CSession");
_exports_CSession_class_0->SetCallHandler(_wrap_new_CSession);
_exports_CSession_class_0->Inherit(_exports_CSession_class);
_exports_CSession_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_CSession_obj = _exports_CSession_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(_exports_MessageFactory_obj, "generated_factory", _wrap_MessageFactory_generated_factory);
SWIGV8_AddStaticFunction(_exports_MessageFactory_obj, "InternalRegisterGeneratedFile", _wrap_MessageFactory_InternalRegisterGeneratedFile);
SWIGV8_AddStaticFunction(_exports_MessageFactory_obj, "InternalRegisterGeneratedMessage", _wrap_MessageFactory_InternalRegisterGeneratedMessage);
SWIGV8_AddStaticFunction(exports_obj, "TF_Version", _wrap_TF_Version);
SWIGV8_AddStaticFunction(exports_obj, "TF_NewStatus", _wrap_TF_NewStatus);
SWIGV8_AddStaticFunction(exports_obj, "TF_DeleteStatus", _wrap_TF_DeleteStatus);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetStatus", _wrap_TF_SetStatus);
SWIGV8_AddStaticFunction(exports_obj, "TF_GetCode", _wrap_TF_GetCode);
SWIGV8_AddStaticFunction(exports_obj, "TF_Message", _wrap_TF_Message);
SWIGV8_AddStaticFunction(exports_obj, "TF_NewBufferFromString", _wrap_TF_NewBufferFromString);
SWIGV8_AddStaticFunction(exports_obj, "TF_NewBuffer", _wrap_TF_NewBuffer);
SWIGV8_AddStaticFunction(exports_obj, "TF_DeleteBuffer", _wrap_TF_DeleteBuffer);
SWIGV8_AddStaticFunction(exports_obj, "TF_GetBuffer", _wrap_TF_GetBuffer);
SWIGV8_AddStaticFunction(exports_obj, "TF_NewTensor", _wrap_TF_NewTensor);
SWIGV8_AddStaticFunction(exports_obj, "TF_AllocateTensor", _wrap_TF_AllocateTensor);
SWIGV8_AddStaticFunction(exports_obj, "TF_DeleteTensor", _wrap_TF_DeleteTensor);
SWIGV8_AddStaticFunction(exports_obj, "TF_TensorType", _wrap_TF_TensorType);
SWIGV8_AddStaticFunction(exports_obj, "TF_NumDims", _wrap_TF_NumDims);
SWIGV8_AddStaticFunction(exports_obj, "TF_Dim", _wrap_TF_Dim);
SWIGV8_AddStaticFunction(exports_obj, "TF_TensorByteSize", _wrap_TF_TensorByteSize);
SWIGV8_AddStaticFunction(exports_obj, "TF_TensorData", _wrap_TF_TensorData);
SWIGV8_AddStaticFunction(exports_obj, "TF_StringEncode", _wrap_TF_StringEncode);
SWIGV8_AddStaticFunction(exports_obj, "TF_StringDecode", _wrap_TF_StringDecode);
SWIGV8_AddStaticFunction(exports_obj, "TF_StringEncodedSize", _wrap_TF_StringEncodedSize);
SWIGV8_AddStaticFunction(exports_obj, "TF_NewSessionOptions", _wrap_TF_NewSessionOptions);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetTarget", _wrap_TF_SetTarget);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetConfig", _wrap_TF_SetConfig);
SWIGV8_AddStaticFunction(exports_obj, "TF_DeleteSessionOptions", _wrap_TF_DeleteSessionOptions);
SWIGV8_AddStaticFunction(exports_obj, "TF_NewGraph", _wrap_TF_NewGraph);
SWIGV8_AddStaticFunction(exports_obj, "TF_DeleteGraph", _wrap_TF_DeleteGraph);
SWIGV8_AddStaticFunction(exports_obj, "TF_GraphSetTensorShape", _wrap_TF_GraphSetTensorShape);
SWIGV8_AddStaticFunction(exports_obj, "TF_GraphGetTensorNumDims", _wrap_TF_GraphGetTensorNumDims);
SWIGV8_AddStaticFunction(exports_obj, "TF_GraphGetTensorShape", _wrap_TF_GraphGetTensorShape);
SWIGV8_AddStaticFunction(exports_obj, "TF_NewOperation", _wrap_TF_NewOperation);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetDevice", _wrap_TF_SetDevice);
SWIGV8_AddStaticFunction(exports_obj, "TF_AddInput", _wrap_TF_AddInput);
SWIGV8_AddStaticFunction(exports_obj, "TF_AddInputList", _wrap_TF_AddInputList);
SWIGV8_AddStaticFunction(exports_obj, "TF_AddControlInput", _wrap_TF_AddControlInput);
SWIGV8_AddStaticFunction(exports_obj, "TF_ColocateWith", _wrap_TF_ColocateWith);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrString", _wrap_TF_SetAttrString);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrStringList", _wrap_TF_SetAttrStringList);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrInt", _wrap_TF_SetAttrInt);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrIntList", _wrap_TF_SetAttrIntList);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrFloat", _wrap_TF_SetAttrFloat);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrFloatList", _wrap_TF_SetAttrFloatList);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrBool", _wrap_TF_SetAttrBool);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrBoolList", _wrap_TF_SetAttrBoolList);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrType", _wrap_TF_SetAttrType);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrTypeList", _wrap_TF_SetAttrTypeList);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrShape", _wrap_TF_SetAttrShape);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrShapeList", _wrap_TF_SetAttrShapeList);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrTensorShapeProto", _wrap_TF_SetAttrTensorShapeProto);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrTensorShapeProtoList", _wrap_TF_SetAttrTensorShapeProtoList);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrTensor", _wrap_TF_SetAttrTensor);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrTensorList", _wrap_TF_SetAttrTensorList);
SWIGV8_AddStaticFunction(exports_obj, "TF_SetAttrValueProto", _wrap_TF_SetAttrValueProto);
SWIGV8_AddStaticFunction(exports_obj, "TF_FinishOperation", _wrap_TF_FinishOperation);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationName", _wrap_TF_OperationName);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationOpType", _wrap_TF_OperationOpType);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationDevice", _wrap_TF_OperationDevice);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationNumOutputs", _wrap_TF_OperationNumOutputs);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationOutputType", _wrap_TF_OperationOutputType);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationOutputListLength", _wrap_TF_OperationOutputListLength);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationNumInputs", _wrap_TF_OperationNumInputs);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationInputType", _wrap_TF_OperationInputType);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationInputListLength", _wrap_TF_OperationInputListLength);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationInput", _wrap_TF_OperationInput);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationOutputNumConsumers", _wrap_TF_OperationOutputNumConsumers);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationOutputConsumers", _wrap_TF_OperationOutputConsumers);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationNumControlInputs", _wrap_TF_OperationNumControlInputs);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetControlInputs", _wrap_TF_OperationGetControlInputs);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationNumControlOutputs", _wrap_TF_OperationNumControlOutputs);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetControlOutputs", _wrap_TF_OperationGetControlOutputs);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrMetadata", _wrap_TF_OperationGetAttrMetadata);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrString", _wrap_TF_OperationGetAttrString);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrStringList", _wrap_TF_OperationGetAttrStringList);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrInt", _wrap_TF_OperationGetAttrInt);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrIntList", _wrap_TF_OperationGetAttrIntList);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrFloat", _wrap_TF_OperationGetAttrFloat);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrFloatList", _wrap_TF_OperationGetAttrFloatList);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrBool", _wrap_TF_OperationGetAttrBool);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrBoolList", _wrap_TF_OperationGetAttrBoolList);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrType", _wrap_TF_OperationGetAttrType);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrTypeList", _wrap_TF_OperationGetAttrTypeList);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrShape", _wrap_TF_OperationGetAttrShape);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrShapeList", _wrap_TF_OperationGetAttrShapeList);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrTensorShapeProto", _wrap_TF_OperationGetAttrTensorShapeProto);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrTensorShapeProtoList", _wrap_TF_OperationGetAttrTensorShapeProtoList);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrTensor", _wrap_TF_OperationGetAttrTensor);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrTensorList", _wrap_TF_OperationGetAttrTensorList);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationGetAttrValueProto", _wrap_TF_OperationGetAttrValueProto);
SWIGV8_AddStaticFunction(exports_obj, "TF_GraphOperationByName", _wrap_TF_GraphOperationByName);
SWIGV8_AddStaticFunction(exports_obj, "TF_GraphNextOperation", _wrap_TF_GraphNextOperation);
SWIGV8_AddStaticFunction(exports_obj, "TF_GraphToGraphDef", _wrap_TF_GraphToGraphDef);
SWIGV8_AddStaticFunction(exports_obj, "TF_NewImportGraphDefOptions", _wrap_TF_NewImportGraphDefOptions);
SWIGV8_AddStaticFunction(exports_obj, "TF_DeleteImportGraphDefOptions", _wrap_TF_DeleteImportGraphDefOptions);
SWIGV8_AddStaticFunction(exports_obj, "TF_ImportGraphDefOptionsSetPrefix", _wrap_TF_ImportGraphDefOptionsSetPrefix);
SWIGV8_AddStaticFunction(exports_obj, "TF_GraphImportGraphDef", _wrap_TF_GraphImportGraphDef);
SWIGV8_AddStaticFunction(exports_obj, "TF_OperationToNodeDef", _wrap_TF_OperationToNodeDef);
SWIGV8_AddStaticFunction(exports_obj, "TF_NewSession", _wrap_TF_NewSession);
SWIGV8_AddStaticFunction(exports_obj, "TF_CloseSession", _wrap_TF_CloseSession);
SWIGV8_AddStaticFunction(exports_obj, "TF_DeleteSession", _wrap_TF_DeleteSession);
SWIGV8_AddStaticFunction(exports_obj, "TF_SessionRun", _wrap_TF_SessionRun);
SWIGV8_AddStaticFunction(exports_obj, "TF_SessionPRunSetup", _wrap_TF_SessionPRunSetup);
SWIGV8_AddStaticFunction(exports_obj, "TF_SessionPRun", _wrap_TF_SessionPRun);
SWIGV8_AddStaticFunction(exports_obj, "TF_NewDeprecatedSession", _wrap_TF_NewDeprecatedSession);
SWIGV8_AddStaticFunction(exports_obj, "TF_CloseDeprecatedSession", _wrap_TF_CloseDeprecatedSession);
SWIGV8_AddStaticFunction(exports_obj, "TF_DeleteDeprecatedSession", _wrap_TF_DeleteDeprecatedSession);
SWIGV8_AddStaticFunction(exports_obj, "TF_Reset", _wrap_TF_Reset);
SWIGV8_AddStaticFunction(exports_obj, "TF_ExtendGraph", _wrap_TF_ExtendGraph);
SWIGV8_AddStaticFunction(exports_obj, "TF_Run", _wrap_TF_Run);
SWIGV8_AddStaticFunction(exports_obj, "TF_PRunSetup", _wrap_TF_PRunSetup);
SWIGV8_AddStaticFunction(exports_obj, "TF_PRun", _wrap_TF_PRun);
SWIGV8_AddStaticFunction(exports_obj, "TF_LoadLibrary", _wrap_TF_LoadLibrary);
SWIGV8_AddStaticFunction(exports_obj, "TF_GetOpList", _wrap_TF_GetOpList);
SWIGV8_AddStaticFunction(exports_obj, "TF_DeleteLibraryHandle", _wrap_TF_DeleteLibraryHandle);
SWIGV8_AddStaticFunction(exports_obj, "TF_GetAllOpList", _wrap_TF_GetAllOpList);
SWIGV8_AddStaticFunction(exports_obj, "IsGoogleCudaEnabled", _wrap_IsGoogleCudaEnabled);
SWIGV8_AddStaticFunction(exports_obj, "CudaSupportsHalfMatMulAndConv", _wrap_CudaSupportsHalfMatMulAndConv);
SWIGV8_AddStaticFunction(exports_obj, "tf_compiler_version", _wrap_tf_compiler_version);
SWIGV8_AddStaticFunction(exports_obj, "tf_git_version", _wrap_tf_git_version);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto", _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftypes_2eproto", _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftypes_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_AssignDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto", _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2ftypes_2eproto", _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2ftypes_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "DataType_IsValid", _wrap_DataType_IsValid);
SWIGV8_AddStaticFunction(exports_obj, "DataType_descriptor", _wrap_DataType_descriptor);
SWIGV8_AddStaticFunction(exports_obj, "DataType_Name", _wrap_DataType_Name);
SWIGV8_AddStaticFunction(exports_obj, "DataType_Parse", _wrap_DataType_Parse);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_AddDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto", _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto", _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto", _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto", _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto);
SWIGV8_AddStaticFunction(_exports_NodeDef_obj, "descriptor", _wrap_NodeDef_descriptor);
SWIGV8_AddStaticFunction(_exports_NodeDef_obj, "default_instance", _wrap_NodeDef_default_instance);
SWIGV8_AddStaticFunction(_exports_NodeDef_obj, "internal_default_instance", _wrap_NodeDef_internal_default_instance);
SWIGV8_AddStaticVariable(_exports_NodeDef_obj, "kNameFieldNumber", _wrap_tensorflow_NodeDef_kNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_NodeDef_obj, "kNameFieldNumber", _wrap_tensorflow_NodeDef_kNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_NodeDef_obj, "kOpFieldNumber", _wrap_tensorflow_NodeDef_kOpFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_NodeDef_obj, "kOpFieldNumber", _wrap_tensorflow_NodeDef_kOpFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_NodeDef_obj, "kInputFieldNumber", _wrap_tensorflow_NodeDef_kInputFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_NodeDef_obj, "kInputFieldNumber", _wrap_tensorflow_NodeDef_kInputFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_NodeDef_obj, "kDeviceFieldNumber", _wrap_tensorflow_NodeDef_kDeviceFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_NodeDef_obj, "kDeviceFieldNumber", _wrap_tensorflow_NodeDef_kDeviceFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_NodeDef_obj, "kAttrFieldNumber", _wrap_tensorflow_NodeDef_kAttrFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_NodeDef_obj, "kAttrFieldNumber", _wrap_tensorflow_NodeDef_kAttrFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_AddDesc_tensorflow_2fcore_2fframework_2fvariable_2eproto", _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2fvariable_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fvariable_2eproto", _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fvariable_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fvariable_2eproto", _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fvariable_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fvariable_2eproto", _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fvariable_2eproto);
SWIGV8_AddStaticFunction(_exports_VariableDef_obj, "descriptor", _wrap_VariableDef_descriptor);
SWIGV8_AddStaticFunction(_exports_VariableDef_obj, "default_instance", _wrap_VariableDef_default_instance);
SWIGV8_AddStaticFunction(_exports_VariableDef_obj, "internal_default_instance", _wrap_VariableDef_internal_default_instance);
SWIGV8_AddStaticVariable(_exports_VariableDef_obj, "kVariableNameFieldNumber", _wrap_tensorflow_VariableDef_kVariableNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_VariableDef_obj, "kVariableNameFieldNumber", _wrap_tensorflow_VariableDef_kVariableNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_VariableDef_obj, "kInitializerNameFieldNumber", _wrap_tensorflow_VariableDef_kInitializerNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_VariableDef_obj, "kInitializerNameFieldNumber", _wrap_tensorflow_VariableDef_kInitializerNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_VariableDef_obj, "kSnapshotNameFieldNumber", _wrap_tensorflow_VariableDef_kSnapshotNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_VariableDef_obj, "kSnapshotNameFieldNumber", _wrap_tensorflow_VariableDef_kSnapshotNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_VariableDef_obj, "kSaveSliceInfoDefFieldNumber", _wrap_tensorflow_VariableDef_kSaveSliceInfoDefFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_VariableDef_obj, "kSaveSliceInfoDefFieldNumber", _wrap_tensorflow_VariableDef_kSaveSliceInfoDefFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_SaveSliceInfoDef_obj, "descriptor", _wrap_SaveSliceInfoDef_descriptor);
SWIGV8_AddStaticFunction(_exports_SaveSliceInfoDef_obj, "default_instance", _wrap_SaveSliceInfoDef_default_instance);
SWIGV8_AddStaticFunction(_exports_SaveSliceInfoDef_obj, "internal_default_instance", _wrap_SaveSliceInfoDef_internal_default_instance);
SWIGV8_AddStaticVariable(_exports_SaveSliceInfoDef_obj, "kFullNameFieldNumber", _wrap_tensorflow_SaveSliceInfoDef_kFullNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_SaveSliceInfoDef_obj, "kFullNameFieldNumber", _wrap_tensorflow_SaveSliceInfoDef_kFullNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_SaveSliceInfoDef_obj, "kFullShapeFieldNumber", _wrap_tensorflow_SaveSliceInfoDef_kFullShapeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_SaveSliceInfoDef_obj, "kFullShapeFieldNumber", _wrap_tensorflow_SaveSliceInfoDef_kFullShapeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_SaveSliceInfoDef_obj, "kVarOffsetFieldNumber", _wrap_tensorflow_SaveSliceInfoDef_kVarOffsetFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_SaveSliceInfoDef_obj, "kVarOffsetFieldNumber", _wrap_tensorflow_SaveSliceInfoDef_kVarOffsetFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_SaveSliceInfoDef_obj, "kVarShapeFieldNumber", _wrap_tensorflow_SaveSliceInfoDef_kVarShapeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_SaveSliceInfoDef_obj, "kVarShapeFieldNumber", _wrap_tensorflow_SaveSliceInfoDef_kVarShapeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_AddDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto", _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto", _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto", _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto", _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto);
SWIGV8_AddStaticFunction(_exports_AttrValue_ListValue_obj, "descriptor", _wrap_AttrValue_ListValue_descriptor);
SWIGV8_AddStaticFunction(_exports_AttrValue_ListValue_obj, "default_instance", _wrap_AttrValue_ListValue_default_instance);
SWIGV8_AddStaticFunction(_exports_AttrValue_ListValue_obj, "internal_default_instance", _wrap_AttrValue_ListValue_internal_default_instance);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kSFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kSFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kSFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kSFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kIFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kIFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kIFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kIFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kFFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kFFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kFFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kFFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kBFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kBFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kBFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kBFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kTypeFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kTypeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kTypeFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kTypeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kShapeFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kShapeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kShapeFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kShapeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kTensorFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kTensorFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_ListValue_obj, "kTensorFieldNumber", _wrap_tensorflow_AttrValue_ListValue_kTensorFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_AttrValue_obj, "descriptor", _wrap_AttrValue_descriptor);
SWIGV8_AddStaticFunction(_exports_AttrValue_obj, "default_instance", _wrap_AttrValue_default_instance);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kS", _wrap_tensorflow_AttrValue_kS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kI", _wrap_tensorflow_AttrValue_kI, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kF", _wrap_tensorflow_AttrValue_kF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kB", _wrap_tensorflow_AttrValue_kB, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kType", _wrap_tensorflow_AttrValue_kType, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kShape", _wrap_tensorflow_AttrValue_kShape, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kTensor", _wrap_tensorflow_AttrValue_kTensor, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kList", _wrap_tensorflow_AttrValue_kList, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kFunc", _wrap_tensorflow_AttrValue_kFunc, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kPlaceholder", _wrap_tensorflow_AttrValue_kPlaceholder, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "VALUE_NOT_SET", _wrap_tensorflow_AttrValue_VALUE_NOT_SET, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_AttrValue_obj, "internal_default_instance", _wrap_AttrValue_internal_default_instance);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kSFieldNumber", _wrap_tensorflow_AttrValue_kSFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kSFieldNumber", _wrap_tensorflow_AttrValue_kSFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kIFieldNumber", _wrap_tensorflow_AttrValue_kIFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kIFieldNumber", _wrap_tensorflow_AttrValue_kIFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kFFieldNumber", _wrap_tensorflow_AttrValue_kFFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kFFieldNumber", _wrap_tensorflow_AttrValue_kFFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kBFieldNumber", _wrap_tensorflow_AttrValue_kBFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kBFieldNumber", _wrap_tensorflow_AttrValue_kBFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kTypeFieldNumber", _wrap_tensorflow_AttrValue_kTypeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kTypeFieldNumber", _wrap_tensorflow_AttrValue_kTypeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kShapeFieldNumber", _wrap_tensorflow_AttrValue_kShapeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kShapeFieldNumber", _wrap_tensorflow_AttrValue_kShapeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kTensorFieldNumber", _wrap_tensorflow_AttrValue_kTensorFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kTensorFieldNumber", _wrap_tensorflow_AttrValue_kTensorFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kListFieldNumber", _wrap_tensorflow_AttrValue_kListFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kListFieldNumber", _wrap_tensorflow_AttrValue_kListFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kFuncFieldNumber", _wrap_tensorflow_AttrValue_kFuncFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kFuncFieldNumber", _wrap_tensorflow_AttrValue_kFuncFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kPlaceholderFieldNumber", _wrap_tensorflow_AttrValue_kPlaceholderFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_AttrValue_obj, "kPlaceholderFieldNumber", _wrap_tensorflow_AttrValue_kPlaceholderFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_NameAttrList_obj, "descriptor", _wrap_NameAttrList_descriptor);
SWIGV8_AddStaticFunction(_exports_NameAttrList_obj, "default_instance", _wrap_NameAttrList_default_instance);
SWIGV8_AddStaticFunction(_exports_NameAttrList_obj, "internal_default_instance", _wrap_NameAttrList_internal_default_instance);
SWIGV8_AddStaticVariable(_exports_NameAttrList_obj, "kNameFieldNumber", _wrap_tensorflow_NameAttrList_kNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_NameAttrList_obj, "kNameFieldNumber", _wrap_tensorflow_NameAttrList_kNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_NameAttrList_obj, "kAttrFieldNumber", _wrap_tensorflow_NameAttrList_kAttrFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_NameAttrList_obj, "kAttrFieldNumber", _wrap_tensorflow_NameAttrList_kAttrFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto", _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_2eproto", _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_AssignDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto", _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2ftensor_2eproto", _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2ftensor_2eproto);
SWIGV8_AddStaticFunction(_exports_TensorProto_obj, "descriptor", _wrap_TensorProto_descriptor);
SWIGV8_AddStaticFunction(_exports_TensorProto_obj, "default_instance", _wrap_TensorProto_default_instance);
SWIGV8_AddStaticFunction(_exports_TensorProto_obj, "internal_default_instance", _wrap_TensorProto_internal_default_instance);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kDtypeFieldNumber", _wrap_tensorflow_TensorProto_kDtypeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kDtypeFieldNumber", _wrap_tensorflow_TensorProto_kDtypeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kTensorShapeFieldNumber", _wrap_tensorflow_TensorProto_kTensorShapeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kTensorShapeFieldNumber", _wrap_tensorflow_TensorProto_kTensorShapeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kVersionNumberFieldNumber", _wrap_tensorflow_TensorProto_kVersionNumberFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kVersionNumberFieldNumber", _wrap_tensorflow_TensorProto_kVersionNumberFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kTensorContentFieldNumber", _wrap_tensorflow_TensorProto_kTensorContentFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kTensorContentFieldNumber", _wrap_tensorflow_TensorProto_kTensorContentFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kHalfValFieldNumber", _wrap_tensorflow_TensorProto_kHalfValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kHalfValFieldNumber", _wrap_tensorflow_TensorProto_kHalfValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kFloatValFieldNumber", _wrap_tensorflow_TensorProto_kFloatValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kFloatValFieldNumber", _wrap_tensorflow_TensorProto_kFloatValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kDoubleValFieldNumber", _wrap_tensorflow_TensorProto_kDoubleValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kDoubleValFieldNumber", _wrap_tensorflow_TensorProto_kDoubleValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kIntValFieldNumber", _wrap_tensorflow_TensorProto_kIntValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kIntValFieldNumber", _wrap_tensorflow_TensorProto_kIntValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kStringValFieldNumber", _wrap_tensorflow_TensorProto_kStringValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kStringValFieldNumber", _wrap_tensorflow_TensorProto_kStringValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kScomplexValFieldNumber", _wrap_tensorflow_TensorProto_kScomplexValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kScomplexValFieldNumber", _wrap_tensorflow_TensorProto_kScomplexValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kInt64ValFieldNumber", _wrap_tensorflow_TensorProto_kInt64ValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kInt64ValFieldNumber", _wrap_tensorflow_TensorProto_kInt64ValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kBoolValFieldNumber", _wrap_tensorflow_TensorProto_kBoolValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kBoolValFieldNumber", _wrap_tensorflow_TensorProto_kBoolValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kDcomplexValFieldNumber", _wrap_tensorflow_TensorProto_kDcomplexValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kDcomplexValFieldNumber", _wrap_tensorflow_TensorProto_kDcomplexValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kResourceHandleValFieldNumber", _wrap_tensorflow_TensorProto_kResourceHandleValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_TensorProto_obj, "kResourceHandleValFieldNumber", _wrap_tensorflow_TensorProto_kResourceHandleValFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_AddDesc_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto", _wrap_protobuf_AddDesc_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto", _wrap_protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto", _wrap_protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto);
SWIGV8_AddStaticFunction(exports_obj, "protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto", _wrap_protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto);
SWIGV8_AddStaticFunction(_exports_OpDef_ArgDef_obj, "descriptor", _wrap_OpDef_ArgDef_descriptor);
SWIGV8_AddStaticFunction(_exports_OpDef_ArgDef_obj, "default_instance", _wrap_OpDef_ArgDef_default_instance);
SWIGV8_AddStaticFunction(_exports_OpDef_ArgDef_obj, "internal_default_instance", _wrap_OpDef_ArgDef_internal_default_instance);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kNameFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kNameFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kDescriptionFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kDescriptionFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kDescriptionFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kDescriptionFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kTypeFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kTypeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kTypeFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kTypeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kTypeAttrFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kTypeAttrFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kTypeAttrFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kTypeAttrFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kNumberAttrFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kNumberAttrFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kNumberAttrFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kNumberAttrFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kTypeListAttrFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kTypeListAttrFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kTypeListAttrFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kTypeListAttrFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kIsRefFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kIsRefFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_ArgDef_obj, "kIsRefFieldNumber", _wrap_tensorflow_OpDef_ArgDef_kIsRefFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_OpDef_AttrDef_obj, "descriptor", _wrap_OpDef_AttrDef_descriptor);
SWIGV8_AddStaticFunction(_exports_OpDef_AttrDef_obj, "default_instance", _wrap_OpDef_AttrDef_default_instance);
SWIGV8_AddStaticFunction(_exports_OpDef_AttrDef_obj, "internal_default_instance", _wrap_OpDef_AttrDef_internal_default_instance);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kNameFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kNameFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kTypeFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kTypeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kTypeFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kTypeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kDefaultValueFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kDefaultValueFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kDefaultValueFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kDefaultValueFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kDescriptionFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kDescriptionFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kDescriptionFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kDescriptionFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kHasMinimumFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kHasMinimumFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kHasMinimumFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kHasMinimumFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kMinimumFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kMinimumFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kMinimumFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kMinimumFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kAllowedValuesFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kAllowedValuesFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_AttrDef_obj, "kAllowedValuesFieldNumber", _wrap_tensorflow_OpDef_AttrDef_kAllowedValuesFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_OpDef_obj, "descriptor", _wrap_OpDef_descriptor);
SWIGV8_AddStaticFunction(_exports_OpDef_obj, "default_instance", _wrap_OpDef_default_instance);
SWIGV8_AddStaticFunction(_exports_OpDef_obj, "internal_default_instance", _wrap_OpDef_internal_default_instance);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kNameFieldNumber", _wrap_tensorflow_OpDef_kNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kNameFieldNumber", _wrap_tensorflow_OpDef_kNameFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kInputArgFieldNumber", _wrap_tensorflow_OpDef_kInputArgFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kInputArgFieldNumber", _wrap_tensorflow_OpDef_kInputArgFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kOutputArgFieldNumber", _wrap_tensorflow_OpDef_kOutputArgFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kOutputArgFieldNumber", _wrap_tensorflow_OpDef_kOutputArgFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kAttrFieldNumber", _wrap_tensorflow_OpDef_kAttrFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kAttrFieldNumber", _wrap_tensorflow_OpDef_kAttrFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kDeprecationFieldNumber", _wrap_tensorflow_OpDef_kDeprecationFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kDeprecationFieldNumber", _wrap_tensorflow_OpDef_kDeprecationFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kSummaryFieldNumber", _wrap_tensorflow_OpDef_kSummaryFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kSummaryFieldNumber", _wrap_tensorflow_OpDef_kSummaryFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kDescriptionFieldNumber", _wrap_tensorflow_OpDef_kDescriptionFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kDescriptionFieldNumber", _wrap_tensorflow_OpDef_kDescriptionFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kIsCommutativeFieldNumber", _wrap_tensorflow_OpDef_kIsCommutativeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kIsCommutativeFieldNumber", _wrap_tensorflow_OpDef_kIsCommutativeFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kIsAggregateFieldNumber", _wrap_tensorflow_OpDef_kIsAggregateFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kIsAggregateFieldNumber", _wrap_tensorflow_OpDef_kIsAggregateFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kIsStatefulFieldNumber", _wrap_tensorflow_OpDef_kIsStatefulFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kIsStatefulFieldNumber", _wrap_tensorflow_OpDef_kIsStatefulFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kAllowsUninitializedInputFieldNumber", _wrap_tensorflow_OpDef_kAllowsUninitializedInputFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDef_obj, "kAllowsUninitializedInputFieldNumber", _wrap_tensorflow_OpDef_kAllowsUninitializedInputFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_OpDeprecation_obj, "descriptor", _wrap_OpDeprecation_descriptor);
SWIGV8_AddStaticFunction(_exports_OpDeprecation_obj, "default_instance", _wrap_OpDeprecation_default_instance);
SWIGV8_AddStaticFunction(_exports_OpDeprecation_obj, "internal_default_instance", _wrap_OpDeprecation_internal_default_instance);
SWIGV8_AddStaticVariable(_exports_OpDeprecation_obj, "kVersionFieldNumber", _wrap_tensorflow_OpDeprecation_kVersionFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDeprecation_obj, "kVersionFieldNumber", _wrap_tensorflow_OpDeprecation_kVersionFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDeprecation_obj, "kExplanationFieldNumber", _wrap_tensorflow_OpDeprecation_kExplanationFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpDeprecation_obj, "kExplanationFieldNumber", _wrap_tensorflow_OpDeprecation_kExplanationFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_OpList_obj, "descriptor", _wrap_OpList_descriptor);
SWIGV8_AddStaticFunction(_exports_OpList_obj, "default_instance", _wrap_OpList_default_instance);
SWIGV8_AddStaticFunction(_exports_OpList_obj, "internal_default_instance", _wrap_OpList_internal_default_instance);
SWIGV8_AddStaticVariable(_exports_OpList_obj, "kOpFieldNumber", _wrap_tensorflow_OpList_kOpFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_OpList_obj, "kOpFieldNumber", _wrap_tensorflow_OpList_kOpFieldNumber, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_StringPiece_obj, "npos", _wrap_StringPiece_npos_get, JS_veto_set_variable);
SWIGV8_AddStaticFunction(_exports_Env_obj, "Default", _wrap_Env_Default);
SWIGV8_AddStaticFunction(exports_obj, "ReadFileToString", _wrap_ReadFileToString);
SWIGV8_AddStaticFunction(exports_obj, "WriteStringToFile", _wrap_WriteStringToFile);
SWIGV8_AddStaticFunction(exports_obj, "WriteBinaryProto", _wrap_WriteBinaryProto);
SWIGV8_AddStaticFunction(exports_obj, "ReadBinaryProto", _wrap_ReadBinaryProto);
SWIGV8_AddStaticFunction(exports_obj, "WriteTextProto", _wrap_WriteTextProto);
SWIGV8_AddStaticFunction(exports_obj, "ReadTextProto", _wrap_ReadTextProto);
SWIGV8_AddStaticFunction(exports_obj, "Reset", _wrap_Reset);
SWIGV8_AddStaticFunction(exports_obj, "NewSession", _wrap_tensorflow__wrap_NewSession);
SWIGV8_AddStaticFunction(_exports_TensorShape_obj, "IsValid", _wrap_TensorShape_IsValid);
SWIGV8_AddStaticFunction(_exports_TensorShape_obj, "IsValidShape", _wrap_TensorShape_IsValidShape);
SWIGV8_AddStaticFunction(_exports_TensorShape_obj, "DebugString", _wrap_TensorShape__wrap_TensorShape_DebugString);
SWIGV8_AddStaticFunction(_exports_TensorShapeUtils_obj, "IsScalar", _wrap_TensorShapeUtils_IsScalar);
SWIGV8_AddStaticFunction(_exports_TensorShapeUtils_obj, "IsVector", _wrap_TensorShapeUtils_IsVector);
SWIGV8_AddStaticFunction(_exports_TensorShapeUtils_obj, "IsVectorOrHigher", _wrap_TensorShapeUtils_IsVectorOrHigher);
SWIGV8_AddStaticFunction(_exports_TensorShapeUtils_obj, "IsMatrix", _wrap_TensorShapeUtils_IsMatrix);
SWIGV8_AddStaticFunction(_exports_TensorShapeUtils_obj, "IsSquareMatrix", _wrap_TensorShapeUtils_IsSquareMatrix);
SWIGV8_AddStaticFunction(_exports_TensorShapeUtils_obj, "IsMatrixOrHigher", _wrap_TensorShapeUtils_IsMatrixOrHigher);
SWIGV8_AddStaticFunction(_exports_TensorShapeUtils_obj, "MakeShape", _wrap_TensorShapeUtils__wrap_TensorShapeUtils_MakeShape);
SWIGV8_AddStaticFunction(_exports_TensorShapeUtils_obj, "ShapeListString", _wrap_TensorShapeUtils_ShapeListString);
SWIGV8_AddStaticFunction(_exports_TensorShapeUtils_obj, "StartsWith", _wrap_TensorShapeUtils_StartsWith);
SWIGV8_AddStaticFunction(_exports_TensorShapeUtils_obj, "EndsWith", _wrap_TensorShapeUtils_EndsWith);
SWIGV8_AddStaticFunction(exports_obj, "WaitForMilliseconds", _wrap_WaitForMilliseconds);
SWIGV8_AddStaticVariable(_exports_Graph_obj, "kControlSlot", _wrap_tensorflow_Graph_kControlSlot, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_Graph_obj, "kControlSlot", _wrap_tensorflow_Graph_kControlSlot, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_Graph_obj, "kSourceId", _wrap_tensorflow_Graph_kSourceId, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_Graph_obj, "kSinkId", _wrap_tensorflow_Graph_kSinkId, JS_veto_set_variable);
SWIGV8_AddStaticFunction(exports_obj, "IsSwitch", _wrap_IsSwitch);
SWIGV8_AddStaticFunction(exports_obj, "IsMerge", _wrap_IsMerge);
SWIGV8_AddStaticFunction(exports_obj, "IsEnter", _wrap_IsEnter);
SWIGV8_AddStaticFunction(exports_obj, "IsExit", _wrap_IsExit);
SWIGV8_AddStaticFunction(exports_obj, "IsNextIteration", _wrap_IsNextIteration);
SWIGV8_AddStaticFunction(exports_obj, "IsLoopCond", _wrap_IsLoopCond);
SWIGV8_AddStaticFunction(exports_obj, "IsControlTrigger", _wrap_IsControlTrigger);
SWIGV8_AddStaticFunction(exports_obj, "IsSend", _wrap_IsSend);
SWIGV8_AddStaticFunction(exports_obj, "IsRecv", _wrap_IsRecv);
SWIGV8_AddStaticFunction(exports_obj, "IsHostSend", _wrap_IsHostSend);
SWIGV8_AddStaticFunction(exports_obj, "IsHostRecv", _wrap_IsHostRecv);
SWIGV8_AddStaticFunction(exports_obj, "IsTransferNode", _wrap_IsTransferNode);
SWIGV8_AddStaticFunction(exports_obj, "IsConstant", _wrap_IsConstant);
SWIGV8_AddStaticFunction(exports_obj, "IsVariable", _wrap_IsVariable);
SWIGV8_AddStaticFunction(exports_obj, "IsIdentity", _wrap_IsIdentity);
SWIGV8_AddStaticFunction(exports_obj, "IsControlFlow", _wrap_IsControlFlow);
SWIGV8_AddStaticFunction(exports_obj, "IsHostMemoryPreserving", _wrap_IsHostMemoryPreserving);
SWIGV8_AddStaticFunction(_exports_Status_obj, "OK", _wrap_Status_OK);
SWIGV8_AddStaticFunction(_exports_OpRegistry_obj, "Global", _wrap_OpRegistry_Global);
SWIGV8_AddStaticFunction(exports_obj, "DeleteArray", _wrap_DeleteArray);
SWIGV8_AddStaticFunction(exports_obj, "TF_Tensor_DecodeStrings", _wrap_TF_Tensor_DecodeStrings);
SWIGV8_AddStaticFunction(exports_obj, "TF_Tensor_EncodeStrings", _wrap_TF_Tensor_EncodeStrings);
SWIGV8_AddStaticFunction(_exports_TensorCApi_obj, "Buffer", _wrap_TensorCApi_Buffer);
SWIGV8_AddStaticFunction(_exports_TensorCApi_obj, "MakeTensor", _wrap_TensorCApi_MakeTensor);
SWIGV8_AddStaticFunction(exports_obj, "EmptyTensor", _wrap_EmptyTensor);
SWIGV8_AddStaticFunction(exports_obj, "LoadLibrary", _wrap_LoadLibrary);
SWIGV8_AddStaticFunction(exports_obj, "TF_Run_Setup", _wrap_TF_Run_Setup);
SWIGV8_AddStaticFunction(exports_obj, "TF_Run_Inputs", _wrap_TF_Run_Inputs);
SWIGV8_AddStaticFunction(exports_obj, "TF_Run_Helper", _wrap_TF_Run_Helper);
SWIGV8_AddStaticFunction(exports_obj, "ExtendSessionGraphHelper", _wrap_ExtendSessionGraphHelper);
SWIGV8_AddStaticFunction(exports_obj, "V8_GetInstancePtr", _wrap_V8_GetInstancePtr);


  /* register classes */
  exports_obj->Set(SWIGV8_SYMBOL_NEW("MessageLite"), _exports_MessageLite_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Metadata"), _exports_Metadata_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Message"), _exports_Message_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Reflection"), _exports_Reflection_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("MessageFactory"), _exports_MessageFactory_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_Buffer"), _exports_TF_Buffer_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_Input"), _exports_TF_Input_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_Output"), _exports_TF_Output_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_AttrMetadata"), _exports_TF_AttrMetadata_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("NodeDef"), _exports_NodeDef_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("VariableDef"), _exports_VariableDef_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("SaveSliceInfoDef"), _exports_SaveSliceInfoDef_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AttrValue_ListValue"), _exports_AttrValue_ListValue_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("AttrValue"), _exports_AttrValue_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("NameAttrList"), _exports_NameAttrList_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TensorProto"), _exports_TensorProto_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("OpDef_ArgDef"), _exports_OpDef_ArgDef_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("OpDef_AttrDef"), _exports_OpDef_AttrDef_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("OpDef"), _exports_OpDef_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("OpDeprecation"), _exports_OpDeprecation_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("OpList"), _exports_OpList_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("StringPiece"), _exports_StringPiece_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Env"), _exports_Env_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("EnvWrapper"), _exports_EnvWrapper_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Thread"), _exports_Thread_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("ThreadOptions"), _exports_ThreadOptions_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Session"), _exports_Session_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("SessionOptions"), _exports_SessionOptions_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Tensor"), _exports_Tensor_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TensorBuffer"), _exports_TensorBuffer_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TensorShape"), _exports_TensorShape_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TensorShapeDim"), _exports_TensorShapeDim_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TensorShapeIter"), _exports_TensorShapeIter_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TensorShapeUtils"), _exports_TensorShapeUtils_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Node"), _exports_Node_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Edge"), _exports_Edge_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Graph"), _exports_Graph_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("NodeIter"), _exports_NodeIter_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("NeighborIter"), _exports_NeighborIter_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("ShapeRefiner"), _exports_ShapeRefiner_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("NodeBuilder"), _exports_NodeBuilder_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Status"), _exports_Status_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("OpRegistryInterface"), _exports_OpRegistryInterface_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("OpRegistry"), _exports_OpRegistry_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("OpListOpRegistry"), _exports_OpListOpRegistry_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("OpDefBuilderReceiver"), _exports_OpDefBuilderReceiver_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_Status"), _exports_TF_Status_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_Tensor"), _exports_TF_Tensor_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_SessionOptions"), _exports_TF_SessionOptions_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_DeprecatedSession"), _exports_TF_DeprecatedSession_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TensorCApi"), _exports_TensorCApi_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_Library"), _exports_TF_Library_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_Graph"), _exports_TF_Graph_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_OperationDescription"), _exports_TF_OperationDescription_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_Operation"), _exports_TF_Operation_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_Session"), _exports_TF_Session_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TF_ImportGraphDefOptions"), _exports_TF_ImportGraphDefOptions_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("CSession"), _exports_CSession_obj);


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(tensorflow, tensorflow_initialize)
#endif
